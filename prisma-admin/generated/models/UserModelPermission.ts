
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserModelPermission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserModelPermission
 * 
 */
export type UserModelPermissionModel = runtime.Types.Result.DefaultSelection<Prisma.$UserModelPermissionPayload>

export type AggregateUserModelPermission = {
  _count: UserModelPermissionCountAggregateOutputType | null
  _min: UserModelPermissionMinAggregateOutputType | null
  _max: UserModelPermissionMaxAggregateOutputType | null
}

export type UserModelPermissionMinAggregateOutputType = {
  id: string | null
  allowedUserId: string | null
  canCreate: boolean | null
  canRead: boolean | null
  canUpdate: boolean | null
  canDelete: boolean | null
  model: string | null
}

export type UserModelPermissionMaxAggregateOutputType = {
  id: string | null
  allowedUserId: string | null
  canCreate: boolean | null
  canRead: boolean | null
  canUpdate: boolean | null
  canDelete: boolean | null
  model: string | null
}

export type UserModelPermissionCountAggregateOutputType = {
  id: number
  allowedUserId: number
  canCreate: number
  canRead: number
  canUpdate: number
  canDelete: number
  model: number
  _all: number
}


export type UserModelPermissionMinAggregateInputType = {
  id?: true
  allowedUserId?: true
  canCreate?: true
  canRead?: true
  canUpdate?: true
  canDelete?: true
  model?: true
}

export type UserModelPermissionMaxAggregateInputType = {
  id?: true
  allowedUserId?: true
  canCreate?: true
  canRead?: true
  canUpdate?: true
  canDelete?: true
  model?: true
}

export type UserModelPermissionCountAggregateInputType = {
  id?: true
  allowedUserId?: true
  canCreate?: true
  canRead?: true
  canUpdate?: true
  canDelete?: true
  model?: true
  _all?: true
}

export type UserModelPermissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserModelPermission to aggregate.
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserModelPermissions to fetch.
   */
  orderBy?: Prisma.UserModelPermissionOrderByWithRelationInput | Prisma.UserModelPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserModelPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserModelPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserModelPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserModelPermissions
  **/
  _count?: true | UserModelPermissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserModelPermissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserModelPermissionMaxAggregateInputType
}

export type GetUserModelPermissionAggregateType<T extends UserModelPermissionAggregateArgs> = {
      [P in keyof T & keyof AggregateUserModelPermission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserModelPermission[P]>
    : Prisma.GetScalarType<T[P], AggregateUserModelPermission[P]>
}




export type UserModelPermissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserModelPermissionWhereInput
  orderBy?: Prisma.UserModelPermissionOrderByWithAggregationInput | Prisma.UserModelPermissionOrderByWithAggregationInput[]
  by: Prisma.UserModelPermissionScalarFieldEnum[] | Prisma.UserModelPermissionScalarFieldEnum
  having?: Prisma.UserModelPermissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserModelPermissionCountAggregateInputType | true
  _min?: UserModelPermissionMinAggregateInputType
  _max?: UserModelPermissionMaxAggregateInputType
}

export type UserModelPermissionGroupByOutputType = {
  id: string
  allowedUserId: string
  canCreate: boolean
  canRead: boolean
  canUpdate: boolean
  canDelete: boolean
  model: string
  _count: UserModelPermissionCountAggregateOutputType | null
  _min: UserModelPermissionMinAggregateOutputType | null
  _max: UserModelPermissionMaxAggregateOutputType | null
}

type GetUserModelPermissionGroupByPayload<T extends UserModelPermissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserModelPermissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserModelPermissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserModelPermissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserModelPermissionGroupByOutputType[P]>
      }
    >
  > 



export type UserModelPermissionWhereInput = {
  AND?: Prisma.UserModelPermissionWhereInput | Prisma.UserModelPermissionWhereInput[]
  OR?: Prisma.UserModelPermissionWhereInput[]
  NOT?: Prisma.UserModelPermissionWhereInput | Prisma.UserModelPermissionWhereInput[]
  id?: Prisma.StringFilter<"UserModelPermission"> | string
  allowedUserId?: Prisma.StringFilter<"UserModelPermission"> | string
  canCreate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canRead?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canUpdate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canDelete?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  model?: Prisma.StringFilter<"UserModelPermission"> | string
  allowedUser?: Prisma.XOR<Prisma.AllowedUserScalarRelationFilter, Prisma.AllowedUserWhereInput>
}

export type UserModelPermissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  allowedUserId?: Prisma.SortOrder
  canCreate?: Prisma.SortOrder
  canRead?: Prisma.SortOrder
  canUpdate?: Prisma.SortOrder
  canDelete?: Prisma.SortOrder
  model?: Prisma.SortOrder
  allowedUser?: Prisma.AllowedUserOrderByWithRelationInput
}

export type UserModelPermissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserModelPermissionWhereInput | Prisma.UserModelPermissionWhereInput[]
  OR?: Prisma.UserModelPermissionWhereInput[]
  NOT?: Prisma.UserModelPermissionWhereInput | Prisma.UserModelPermissionWhereInput[]
  allowedUserId?: Prisma.StringFilter<"UserModelPermission"> | string
  canCreate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canRead?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canUpdate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canDelete?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  model?: Prisma.StringFilter<"UserModelPermission"> | string
  allowedUser?: Prisma.XOR<Prisma.AllowedUserScalarRelationFilter, Prisma.AllowedUserWhereInput>
}, "id">

export type UserModelPermissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  allowedUserId?: Prisma.SortOrder
  canCreate?: Prisma.SortOrder
  canRead?: Prisma.SortOrder
  canUpdate?: Prisma.SortOrder
  canDelete?: Prisma.SortOrder
  model?: Prisma.SortOrder
  _count?: Prisma.UserModelPermissionCountOrderByAggregateInput
  _max?: Prisma.UserModelPermissionMaxOrderByAggregateInput
  _min?: Prisma.UserModelPermissionMinOrderByAggregateInput
}

export type UserModelPermissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserModelPermissionScalarWhereWithAggregatesInput | Prisma.UserModelPermissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserModelPermissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserModelPermissionScalarWhereWithAggregatesInput | Prisma.UserModelPermissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserModelPermission"> | string
  allowedUserId?: Prisma.StringWithAggregatesFilter<"UserModelPermission"> | string
  canCreate?: Prisma.BoolWithAggregatesFilter<"UserModelPermission"> | boolean
  canRead?: Prisma.BoolWithAggregatesFilter<"UserModelPermission"> | boolean
  canUpdate?: Prisma.BoolWithAggregatesFilter<"UserModelPermission"> | boolean
  canDelete?: Prisma.BoolWithAggregatesFilter<"UserModelPermission"> | boolean
  model?: Prisma.StringWithAggregatesFilter<"UserModelPermission"> | string
}

export type UserModelPermissionCreateInput = {
  id?: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
  allowedUser: Prisma.AllowedUserCreateNestedOneWithoutUserModelPermissionInput
}

export type UserModelPermissionUncheckedCreateInput = {
  id?: string
  allowedUserId: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
}

export type UserModelPermissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUser?: Prisma.AllowedUserUpdateOneRequiredWithoutUserModelPermissionNestedInput
}

export type UserModelPermissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUserId?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserModelPermissionCreateManyInput = {
  id?: string
  allowedUserId: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
}

export type UserModelPermissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserModelPermissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUserId?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserModelPermissionListRelationFilter = {
  every?: Prisma.UserModelPermissionWhereInput
  some?: Prisma.UserModelPermissionWhereInput
  none?: Prisma.UserModelPermissionWhereInput
}

export type UserModelPermissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserModelPermissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  allowedUserId?: Prisma.SortOrder
  canCreate?: Prisma.SortOrder
  canRead?: Prisma.SortOrder
  canUpdate?: Prisma.SortOrder
  canDelete?: Prisma.SortOrder
  model?: Prisma.SortOrder
}

export type UserModelPermissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  allowedUserId?: Prisma.SortOrder
  canCreate?: Prisma.SortOrder
  canRead?: Prisma.SortOrder
  canUpdate?: Prisma.SortOrder
  canDelete?: Prisma.SortOrder
  model?: Prisma.SortOrder
}

export type UserModelPermissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  allowedUserId?: Prisma.SortOrder
  canCreate?: Prisma.SortOrder
  canRead?: Prisma.SortOrder
  canUpdate?: Prisma.SortOrder
  canDelete?: Prisma.SortOrder
  model?: Prisma.SortOrder
}

export type UserModelPermissionCreateNestedManyWithoutAllowedUserInput = {
  create?: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput> | Prisma.UserModelPermissionCreateWithoutAllowedUserInput[] | Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput[]
  connectOrCreate?: Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput | Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput[]
  createMany?: Prisma.UserModelPermissionCreateManyAllowedUserInputEnvelope
  connect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
}

export type UserModelPermissionUncheckedCreateNestedManyWithoutAllowedUserInput = {
  create?: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput> | Prisma.UserModelPermissionCreateWithoutAllowedUserInput[] | Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput[]
  connectOrCreate?: Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput | Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput[]
  createMany?: Prisma.UserModelPermissionCreateManyAllowedUserInputEnvelope
  connect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
}

export type UserModelPermissionUpdateManyWithoutAllowedUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput> | Prisma.UserModelPermissionCreateWithoutAllowedUserInput[] | Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput[]
  connectOrCreate?: Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput | Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput[]
  upsert?: Prisma.UserModelPermissionUpsertWithWhereUniqueWithoutAllowedUserInput | Prisma.UserModelPermissionUpsertWithWhereUniqueWithoutAllowedUserInput[]
  createMany?: Prisma.UserModelPermissionCreateManyAllowedUserInputEnvelope
  set?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  disconnect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  delete?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  connect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  update?: Prisma.UserModelPermissionUpdateWithWhereUniqueWithoutAllowedUserInput | Prisma.UserModelPermissionUpdateWithWhereUniqueWithoutAllowedUserInput[]
  updateMany?: Prisma.UserModelPermissionUpdateManyWithWhereWithoutAllowedUserInput | Prisma.UserModelPermissionUpdateManyWithWhereWithoutAllowedUserInput[]
  deleteMany?: Prisma.UserModelPermissionScalarWhereInput | Prisma.UserModelPermissionScalarWhereInput[]
}

export type UserModelPermissionUncheckedUpdateManyWithoutAllowedUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput> | Prisma.UserModelPermissionCreateWithoutAllowedUserInput[] | Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput[]
  connectOrCreate?: Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput | Prisma.UserModelPermissionCreateOrConnectWithoutAllowedUserInput[]
  upsert?: Prisma.UserModelPermissionUpsertWithWhereUniqueWithoutAllowedUserInput | Prisma.UserModelPermissionUpsertWithWhereUniqueWithoutAllowedUserInput[]
  createMany?: Prisma.UserModelPermissionCreateManyAllowedUserInputEnvelope
  set?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  disconnect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  delete?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  connect?: Prisma.UserModelPermissionWhereUniqueInput | Prisma.UserModelPermissionWhereUniqueInput[]
  update?: Prisma.UserModelPermissionUpdateWithWhereUniqueWithoutAllowedUserInput | Prisma.UserModelPermissionUpdateWithWhereUniqueWithoutAllowedUserInput[]
  updateMany?: Prisma.UserModelPermissionUpdateManyWithWhereWithoutAllowedUserInput | Prisma.UserModelPermissionUpdateManyWithWhereWithoutAllowedUserInput[]
  deleteMany?: Prisma.UserModelPermissionScalarWhereInput | Prisma.UserModelPermissionScalarWhereInput[]
}

export type UserModelPermissionCreateWithoutAllowedUserInput = {
  id?: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
}

export type UserModelPermissionUncheckedCreateWithoutAllowedUserInput = {
  id?: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
}

export type UserModelPermissionCreateOrConnectWithoutAllowedUserInput = {
  where: Prisma.UserModelPermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput>
}

export type UserModelPermissionCreateManyAllowedUserInputEnvelope = {
  data: Prisma.UserModelPermissionCreateManyAllowedUserInput | Prisma.UserModelPermissionCreateManyAllowedUserInput[]
  skipDuplicates?: boolean
}

export type UserModelPermissionUpsertWithWhereUniqueWithoutAllowedUserInput = {
  where: Prisma.UserModelPermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.UserModelPermissionUpdateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedUpdateWithoutAllowedUserInput>
  create: Prisma.XOR<Prisma.UserModelPermissionCreateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedCreateWithoutAllowedUserInput>
}

export type UserModelPermissionUpdateWithWhereUniqueWithoutAllowedUserInput = {
  where: Prisma.UserModelPermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.UserModelPermissionUpdateWithoutAllowedUserInput, Prisma.UserModelPermissionUncheckedUpdateWithoutAllowedUserInput>
}

export type UserModelPermissionUpdateManyWithWhereWithoutAllowedUserInput = {
  where: Prisma.UserModelPermissionScalarWhereInput
  data: Prisma.XOR<Prisma.UserModelPermissionUpdateManyMutationInput, Prisma.UserModelPermissionUncheckedUpdateManyWithoutAllowedUserInput>
}

export type UserModelPermissionScalarWhereInput = {
  AND?: Prisma.UserModelPermissionScalarWhereInput | Prisma.UserModelPermissionScalarWhereInput[]
  OR?: Prisma.UserModelPermissionScalarWhereInput[]
  NOT?: Prisma.UserModelPermissionScalarWhereInput | Prisma.UserModelPermissionScalarWhereInput[]
  id?: Prisma.StringFilter<"UserModelPermission"> | string
  allowedUserId?: Prisma.StringFilter<"UserModelPermission"> | string
  canCreate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canRead?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canUpdate?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  canDelete?: Prisma.BoolFilter<"UserModelPermission"> | boolean
  model?: Prisma.StringFilter<"UserModelPermission"> | string
}

export type UserModelPermissionCreateManyAllowedUserInput = {
  id?: string
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model: string
}

export type UserModelPermissionUpdateWithoutAllowedUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserModelPermissionUncheckedUpdateWithoutAllowedUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserModelPermissionUncheckedUpdateManyWithoutAllowedUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  canCreate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canUpdate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  canDelete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  model?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserModelPermissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUserId?: boolean
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model?: boolean
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userModelPermission"]>

export type UserModelPermissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUserId?: boolean
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model?: boolean
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userModelPermission"]>

export type UserModelPermissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUserId?: boolean
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model?: boolean
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userModelPermission"]>

export type UserModelPermissionSelectScalar = {
  id?: boolean
  allowedUserId?: boolean
  canCreate?: boolean
  canRead?: boolean
  canUpdate?: boolean
  canDelete?: boolean
  model?: boolean
}

export type UserModelPermissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "allowedUserId" | "canCreate" | "canRead" | "canUpdate" | "canDelete" | "model", ExtArgs["result"]["userModelPermission"]>
export type UserModelPermissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}
export type UserModelPermissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}
export type UserModelPermissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  allowedUser?: boolean | Prisma.AllowedUserDefaultArgs<ExtArgs>
}

export type $UserModelPermissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserModelPermission"
  objects: {
    allowedUser: Prisma.$AllowedUserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    allowedUserId: string
    canCreate: boolean
    canRead: boolean
    canUpdate: boolean
    canDelete: boolean
    model: string
  }, ExtArgs["result"]["userModelPermission"]>
  composites: {}
}

export type UserModelPermissionGetPayload<S extends boolean | null | undefined | UserModelPermissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload, S>

export type UserModelPermissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserModelPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserModelPermissionCountAggregateInputType | true
  }

export interface UserModelPermissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserModelPermission'], meta: { name: 'UserModelPermission' } }
  /**
   * Find zero or one UserModelPermission that matches the filter.
   * @param {UserModelPermissionFindUniqueArgs} args - Arguments to find a UserModelPermission
   * @example
   * // Get one UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserModelPermissionFindUniqueArgs>(args: Prisma.SelectSubset<T, UserModelPermissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserModelPermission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserModelPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserModelPermission
   * @example
   * // Get one UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserModelPermissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserModelPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserModelPermission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionFindFirstArgs} args - Arguments to find a UserModelPermission
   * @example
   * // Get one UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserModelPermissionFindFirstArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserModelPermission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionFindFirstOrThrowArgs} args - Arguments to find a UserModelPermission
   * @example
   * // Get one UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserModelPermissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserModelPermissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserModelPermissions
   * const userModelPermissions = await prisma.userModelPermission.findMany()
   * 
   * // Get first 10 UserModelPermissions
   * const userModelPermissions = await prisma.userModelPermission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userModelPermissionWithIdOnly = await prisma.userModelPermission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserModelPermissionFindManyArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserModelPermission.
   * @param {UserModelPermissionCreateArgs} args - Arguments to create a UserModelPermission.
   * @example
   * // Create one UserModelPermission
   * const UserModelPermission = await prisma.userModelPermission.create({
   *   data: {
   *     // ... data to create a UserModelPermission
   *   }
   * })
   * 
   */
  create<T extends UserModelPermissionCreateArgs>(args: Prisma.SelectSubset<T, UserModelPermissionCreateArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserModelPermissions.
   * @param {UserModelPermissionCreateManyArgs} args - Arguments to create many UserModelPermissions.
   * @example
   * // Create many UserModelPermissions
   * const userModelPermission = await prisma.userModelPermission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserModelPermissionCreateManyArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserModelPermissions and returns the data saved in the database.
   * @param {UserModelPermissionCreateManyAndReturnArgs} args - Arguments to create many UserModelPermissions.
   * @example
   * // Create many UserModelPermissions
   * const userModelPermission = await prisma.userModelPermission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserModelPermissions and only return the `id`
   * const userModelPermissionWithIdOnly = await prisma.userModelPermission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserModelPermissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserModelPermission.
   * @param {UserModelPermissionDeleteArgs} args - Arguments to delete one UserModelPermission.
   * @example
   * // Delete one UserModelPermission
   * const UserModelPermission = await prisma.userModelPermission.delete({
   *   where: {
   *     // ... filter to delete one UserModelPermission
   *   }
   * })
   * 
   */
  delete<T extends UserModelPermissionDeleteArgs>(args: Prisma.SelectSubset<T, UserModelPermissionDeleteArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserModelPermission.
   * @param {UserModelPermissionUpdateArgs} args - Arguments to update one UserModelPermission.
   * @example
   * // Update one UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserModelPermissionUpdateArgs>(args: Prisma.SelectSubset<T, UserModelPermissionUpdateArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserModelPermissions.
   * @param {UserModelPermissionDeleteManyArgs} args - Arguments to filter UserModelPermissions to delete.
   * @example
   * // Delete a few UserModelPermissions
   * const { count } = await prisma.userModelPermission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserModelPermissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserModelPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserModelPermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserModelPermissions
   * const userModelPermission = await prisma.userModelPermission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserModelPermissionUpdateManyArgs>(args: Prisma.SelectSubset<T, UserModelPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserModelPermissions and returns the data updated in the database.
   * @param {UserModelPermissionUpdateManyAndReturnArgs} args - Arguments to update many UserModelPermissions.
   * @example
   * // Update many UserModelPermissions
   * const userModelPermission = await prisma.userModelPermission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserModelPermissions and only return the `id`
   * const userModelPermissionWithIdOnly = await prisma.userModelPermission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserModelPermissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserModelPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserModelPermission.
   * @param {UserModelPermissionUpsertArgs} args - Arguments to update or create a UserModelPermission.
   * @example
   * // Update or create a UserModelPermission
   * const userModelPermission = await prisma.userModelPermission.upsert({
   *   create: {
   *     // ... data to create a UserModelPermission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserModelPermission we want to update
   *   }
   * })
   */
  upsert<T extends UserModelPermissionUpsertArgs>(args: Prisma.SelectSubset<T, UserModelPermissionUpsertArgs<ExtArgs>>): Prisma.Prisma__UserModelPermissionClient<runtime.Types.Result.GetResult<Prisma.$UserModelPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserModelPermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionCountArgs} args - Arguments to filter UserModelPermissions to count.
   * @example
   * // Count the number of UserModelPermissions
   * const count = await prisma.userModelPermission.count({
   *   where: {
   *     // ... the filter for the UserModelPermissions we want to count
   *   }
   * })
  **/
  count<T extends UserModelPermissionCountArgs>(
    args?: Prisma.Subset<T, UserModelPermissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserModelPermissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserModelPermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserModelPermissionAggregateArgs>(args: Prisma.Subset<T, UserModelPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserModelPermissionAggregateType<T>>

  /**
   * Group by UserModelPermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserModelPermissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserModelPermissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserModelPermissionGroupByArgs['orderBy'] }
      : { orderBy?: UserModelPermissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserModelPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserModelPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserModelPermission model
 */
readonly fields: UserModelPermissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserModelPermission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserModelPermissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  allowedUser<T extends Prisma.AllowedUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AllowedUserDefaultArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserModelPermission model
 */
export interface UserModelPermissionFieldRefs {
  readonly id: Prisma.FieldRef<"UserModelPermission", 'String'>
  readonly allowedUserId: Prisma.FieldRef<"UserModelPermission", 'String'>
  readonly canCreate: Prisma.FieldRef<"UserModelPermission", 'Boolean'>
  readonly canRead: Prisma.FieldRef<"UserModelPermission", 'Boolean'>
  readonly canUpdate: Prisma.FieldRef<"UserModelPermission", 'Boolean'>
  readonly canDelete: Prisma.FieldRef<"UserModelPermission", 'Boolean'>
  readonly model: Prisma.FieldRef<"UserModelPermission", 'String'>
}
    

// Custom InputTypes
/**
 * UserModelPermission findUnique
 */
export type UserModelPermissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter, which UserModelPermission to fetch.
   */
  where: Prisma.UserModelPermissionWhereUniqueInput
}

/**
 * UserModelPermission findUniqueOrThrow
 */
export type UserModelPermissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter, which UserModelPermission to fetch.
   */
  where: Prisma.UserModelPermissionWhereUniqueInput
}

/**
 * UserModelPermission findFirst
 */
export type UserModelPermissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter, which UserModelPermission to fetch.
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserModelPermissions to fetch.
   */
  orderBy?: Prisma.UserModelPermissionOrderByWithRelationInput | Prisma.UserModelPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserModelPermissions.
   */
  cursor?: Prisma.UserModelPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserModelPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserModelPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserModelPermissions.
   */
  distinct?: Prisma.UserModelPermissionScalarFieldEnum | Prisma.UserModelPermissionScalarFieldEnum[]
}

/**
 * UserModelPermission findFirstOrThrow
 */
export type UserModelPermissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter, which UserModelPermission to fetch.
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserModelPermissions to fetch.
   */
  orderBy?: Prisma.UserModelPermissionOrderByWithRelationInput | Prisma.UserModelPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserModelPermissions.
   */
  cursor?: Prisma.UserModelPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserModelPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserModelPermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserModelPermissions.
   */
  distinct?: Prisma.UserModelPermissionScalarFieldEnum | Prisma.UserModelPermissionScalarFieldEnum[]
}

/**
 * UserModelPermission findMany
 */
export type UserModelPermissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter, which UserModelPermissions to fetch.
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserModelPermissions to fetch.
   */
  orderBy?: Prisma.UserModelPermissionOrderByWithRelationInput | Prisma.UserModelPermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserModelPermissions.
   */
  cursor?: Prisma.UserModelPermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserModelPermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserModelPermissions.
   */
  skip?: number
  distinct?: Prisma.UserModelPermissionScalarFieldEnum | Prisma.UserModelPermissionScalarFieldEnum[]
}

/**
 * UserModelPermission create
 */
export type UserModelPermissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * The data needed to create a UserModelPermission.
   */
  data: Prisma.XOR<Prisma.UserModelPermissionCreateInput, Prisma.UserModelPermissionUncheckedCreateInput>
}

/**
 * UserModelPermission createMany
 */
export type UserModelPermissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserModelPermissions.
   */
  data: Prisma.UserModelPermissionCreateManyInput | Prisma.UserModelPermissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserModelPermission createManyAndReturn
 */
export type UserModelPermissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * The data used to create many UserModelPermissions.
   */
  data: Prisma.UserModelPermissionCreateManyInput | Prisma.UserModelPermissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserModelPermission update
 */
export type UserModelPermissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * The data needed to update a UserModelPermission.
   */
  data: Prisma.XOR<Prisma.UserModelPermissionUpdateInput, Prisma.UserModelPermissionUncheckedUpdateInput>
  /**
   * Choose, which UserModelPermission to update.
   */
  where: Prisma.UserModelPermissionWhereUniqueInput
}

/**
 * UserModelPermission updateMany
 */
export type UserModelPermissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserModelPermissions.
   */
  data: Prisma.XOR<Prisma.UserModelPermissionUpdateManyMutationInput, Prisma.UserModelPermissionUncheckedUpdateManyInput>
  /**
   * Filter which UserModelPermissions to update
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * Limit how many UserModelPermissions to update.
   */
  limit?: number
}

/**
 * UserModelPermission updateManyAndReturn
 */
export type UserModelPermissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * The data used to update UserModelPermissions.
   */
  data: Prisma.XOR<Prisma.UserModelPermissionUpdateManyMutationInput, Prisma.UserModelPermissionUncheckedUpdateManyInput>
  /**
   * Filter which UserModelPermissions to update
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * Limit how many UserModelPermissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserModelPermission upsert
 */
export type UserModelPermissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * The filter to search for the UserModelPermission to update in case it exists.
   */
  where: Prisma.UserModelPermissionWhereUniqueInput
  /**
   * In case the UserModelPermission found by the `where` argument doesn't exist, create a new UserModelPermission with this data.
   */
  create: Prisma.XOR<Prisma.UserModelPermissionCreateInput, Prisma.UserModelPermissionUncheckedCreateInput>
  /**
   * In case the UserModelPermission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserModelPermissionUpdateInput, Prisma.UserModelPermissionUncheckedUpdateInput>
}

/**
 * UserModelPermission delete
 */
export type UserModelPermissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
  /**
   * Filter which UserModelPermission to delete.
   */
  where: Prisma.UserModelPermissionWhereUniqueInput
}

/**
 * UserModelPermission deleteMany
 */
export type UserModelPermissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserModelPermissions to delete
   */
  where?: Prisma.UserModelPermissionWhereInput
  /**
   * Limit how many UserModelPermissions to delete.
   */
  limit?: number
}

/**
 * UserModelPermission without action
 */
export type UserModelPermissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserModelPermission
   */
  select?: Prisma.UserModelPermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserModelPermission
   */
  omit?: Prisma.UserModelPermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserModelPermissionInclude<ExtArgs> | null
}
