generator client {
  provider      = "prisma-client"
  output        = "./generated"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("ADMIN_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  isRootAdmin Boolean       @default(false)
  AllowedUser AllowedUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model AllowedUser {
  id String @id @default(uuid())

  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserModelPermission UserModelPermission[]
  User                User?                 @relation(fields: [userId], references: [id])
  userId              String?

  @@map("allowed_user")
}

model UserModelPermission {
  id String @id @default(uuid())

  allowedUserId String      
  allowedUser   AllowedUser @relation(fields: [allowedUserId], references: [id], onDelete: Cascade)

  canCreate Boolean @default(false)
  canRead   Boolean @default(false)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)

  model String
}

enum VISIBILITY {
  PUBLIC
  PRIVATE
  PROTECTED
}

// Dashboard Model
model Dashboard {
  id String @id @default(uuid())
  name String
  description String?

  visibility VISIBILITY @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dashboard")
  DashboardWidget DashboardWidget[]
}

model DashboardWidget {
  id String @id @default(uuid())
  name String
  type String
  config Json

  dashboardId String
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dashboard_widget")
}