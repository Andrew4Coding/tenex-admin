
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExploreITFunfact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExploreITFunfact
 * 
 */
export type ExploreITFunfactModel = runtime.Types.Result.DefaultSelection<Prisma.$ExploreITFunfactPayload>

export type AggregateExploreITFunfact = {
  _count: ExploreITFunfactCountAggregateOutputType | null
  _min: ExploreITFunfactMinAggregateOutputType | null
  _max: ExploreITFunfactMaxAggregateOutputType | null
}

export type ExploreITFunfactMinAggregateOutputType = {
  id: string | null
  imageUrl: string | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
}

export type ExploreITFunfactMaxAggregateOutputType = {
  id: string | null
  imageUrl: string | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
}

export type ExploreITFunfactCountAggregateOutputType = {
  id: number
  imageUrl: number
  content: number
  createdAt: number
  updatedAt: number
  title: number
  _all: number
}


export type ExploreITFunfactMinAggregateInputType = {
  id?: true
  imageUrl?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  title?: true
}

export type ExploreITFunfactMaxAggregateInputType = {
  id?: true
  imageUrl?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  title?: true
}

export type ExploreITFunfactCountAggregateInputType = {
  id?: true
  imageUrl?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  _all?: true
}

export type ExploreITFunfactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExploreITFunfact to aggregate.
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExploreITFunfacts to fetch.
   */
  orderBy?: Prisma.ExploreITFunfactOrderByWithRelationInput | Prisma.ExploreITFunfactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExploreITFunfactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExploreITFunfacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExploreITFunfacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExploreITFunfacts
  **/
  _count?: true | ExploreITFunfactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExploreITFunfactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExploreITFunfactMaxAggregateInputType
}

export type GetExploreITFunfactAggregateType<T extends ExploreITFunfactAggregateArgs> = {
      [P in keyof T & keyof AggregateExploreITFunfact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExploreITFunfact[P]>
    : Prisma.GetScalarType<T[P], AggregateExploreITFunfact[P]>
}




export type ExploreITFunfactGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExploreITFunfactWhereInput
  orderBy?: Prisma.ExploreITFunfactOrderByWithAggregationInput | Prisma.ExploreITFunfactOrderByWithAggregationInput[]
  by: Prisma.ExploreITFunfactScalarFieldEnum[] | Prisma.ExploreITFunfactScalarFieldEnum
  having?: Prisma.ExploreITFunfactScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExploreITFunfactCountAggregateInputType | true
  _min?: ExploreITFunfactMinAggregateInputType
  _max?: ExploreITFunfactMaxAggregateInputType
}

export type ExploreITFunfactGroupByOutputType = {
  id: string
  imageUrl: string
  content: string
  createdAt: Date
  updatedAt: Date
  title: string
  _count: ExploreITFunfactCountAggregateOutputType | null
  _min: ExploreITFunfactMinAggregateOutputType | null
  _max: ExploreITFunfactMaxAggregateOutputType | null
}

type GetExploreITFunfactGroupByPayload<T extends ExploreITFunfactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExploreITFunfactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExploreITFunfactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExploreITFunfactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExploreITFunfactGroupByOutputType[P]>
      }
    >
  > 



export type ExploreITFunfactWhereInput = {
  AND?: Prisma.ExploreITFunfactWhereInput | Prisma.ExploreITFunfactWhereInput[]
  OR?: Prisma.ExploreITFunfactWhereInput[]
  NOT?: Prisma.ExploreITFunfactWhereInput | Prisma.ExploreITFunfactWhereInput[]
  id?: Prisma.StringFilter<"ExploreITFunfact"> | string
  imageUrl?: Prisma.StringFilter<"ExploreITFunfact"> | string
  content?: Prisma.StringFilter<"ExploreITFunfact"> | string
  createdAt?: Prisma.DateTimeFilter<"ExploreITFunfact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExploreITFunfact"> | Date | string
  title?: Prisma.StringFilter<"ExploreITFunfact"> | string
}

export type ExploreITFunfactOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type ExploreITFunfactWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExploreITFunfactWhereInput | Prisma.ExploreITFunfactWhereInput[]
  OR?: Prisma.ExploreITFunfactWhereInput[]
  NOT?: Prisma.ExploreITFunfactWhereInput | Prisma.ExploreITFunfactWhereInput[]
  imageUrl?: Prisma.StringFilter<"ExploreITFunfact"> | string
  content?: Prisma.StringFilter<"ExploreITFunfact"> | string
  createdAt?: Prisma.DateTimeFilter<"ExploreITFunfact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExploreITFunfact"> | Date | string
  title?: Prisma.StringFilter<"ExploreITFunfact"> | string
}, "id">

export type ExploreITFunfactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  _count?: Prisma.ExploreITFunfactCountOrderByAggregateInput
  _max?: Prisma.ExploreITFunfactMaxOrderByAggregateInput
  _min?: Prisma.ExploreITFunfactMinOrderByAggregateInput
}

export type ExploreITFunfactScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExploreITFunfactScalarWhereWithAggregatesInput | Prisma.ExploreITFunfactScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExploreITFunfactScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExploreITFunfactScalarWhereWithAggregatesInput | Prisma.ExploreITFunfactScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExploreITFunfact"> | string
  imageUrl?: Prisma.StringWithAggregatesFilter<"ExploreITFunfact"> | string
  content?: Prisma.StringWithAggregatesFilter<"ExploreITFunfact"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExploreITFunfact"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExploreITFunfact"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"ExploreITFunfact"> | string
}

export type ExploreITFunfactCreateInput = {
  id: string
  imageUrl: string
  content: string
  createdAt?: Date | string
  updatedAt: Date | string
  title?: string
}

export type ExploreITFunfactUncheckedCreateInput = {
  id: string
  imageUrl: string
  content: string
  createdAt?: Date | string
  updatedAt: Date | string
  title?: string
}

export type ExploreITFunfactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExploreITFunfactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExploreITFunfactCreateManyInput = {
  id: string
  imageUrl: string
  content: string
  createdAt?: Date | string
  updatedAt: Date | string
  title?: string
}

export type ExploreITFunfactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExploreITFunfactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExploreITFunfactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type ExploreITFunfactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type ExploreITFunfactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
}



export type ExploreITFunfactSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
}, ExtArgs["result"]["exploreITFunfact"]>

export type ExploreITFunfactSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
}, ExtArgs["result"]["exploreITFunfact"]>

export type ExploreITFunfactSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  imageUrl?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
}, ExtArgs["result"]["exploreITFunfact"]>

export type ExploreITFunfactSelectScalar = {
  id?: boolean
  imageUrl?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
}

export type ExploreITFunfactOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "imageUrl" | "content" | "createdAt" | "updatedAt" | "title", ExtArgs["result"]["exploreITFunfact"]>

export type $ExploreITFunfactPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExploreITFunfact"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    imageUrl: string
    content: string
    createdAt: Date
    updatedAt: Date
    title: string
  }, ExtArgs["result"]["exploreITFunfact"]>
  composites: {}
}

export type ExploreITFunfactGetPayload<S extends boolean | null | undefined | ExploreITFunfactDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload, S>

export type ExploreITFunfactCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExploreITFunfactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExploreITFunfactCountAggregateInputType | true
  }

export interface ExploreITFunfactDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExploreITFunfact'], meta: { name: 'ExploreITFunfact' } }
  /**
   * Find zero or one ExploreITFunfact that matches the filter.
   * @param {ExploreITFunfactFindUniqueArgs} args - Arguments to find a ExploreITFunfact
   * @example
   * // Get one ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExploreITFunfactFindUniqueArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExploreITFunfact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExploreITFunfactFindUniqueOrThrowArgs} args - Arguments to find a ExploreITFunfact
   * @example
   * // Get one ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExploreITFunfactFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExploreITFunfact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactFindFirstArgs} args - Arguments to find a ExploreITFunfact
   * @example
   * // Get one ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExploreITFunfactFindFirstArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExploreITFunfact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactFindFirstOrThrowArgs} args - Arguments to find a ExploreITFunfact
   * @example
   * // Get one ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExploreITFunfactFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExploreITFunfacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExploreITFunfacts
   * const exploreITFunfacts = await prisma.exploreITFunfact.findMany()
   * 
   * // Get first 10 ExploreITFunfacts
   * const exploreITFunfacts = await prisma.exploreITFunfact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exploreITFunfactWithIdOnly = await prisma.exploreITFunfact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExploreITFunfactFindManyArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExploreITFunfact.
   * @param {ExploreITFunfactCreateArgs} args - Arguments to create a ExploreITFunfact.
   * @example
   * // Create one ExploreITFunfact
   * const ExploreITFunfact = await prisma.exploreITFunfact.create({
   *   data: {
   *     // ... data to create a ExploreITFunfact
   *   }
   * })
   * 
   */
  create<T extends ExploreITFunfactCreateArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactCreateArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExploreITFunfacts.
   * @param {ExploreITFunfactCreateManyArgs} args - Arguments to create many ExploreITFunfacts.
   * @example
   * // Create many ExploreITFunfacts
   * const exploreITFunfact = await prisma.exploreITFunfact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExploreITFunfactCreateManyArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExploreITFunfacts and returns the data saved in the database.
   * @param {ExploreITFunfactCreateManyAndReturnArgs} args - Arguments to create many ExploreITFunfacts.
   * @example
   * // Create many ExploreITFunfacts
   * const exploreITFunfact = await prisma.exploreITFunfact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExploreITFunfacts and only return the `id`
   * const exploreITFunfactWithIdOnly = await prisma.exploreITFunfact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExploreITFunfactCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExploreITFunfact.
   * @param {ExploreITFunfactDeleteArgs} args - Arguments to delete one ExploreITFunfact.
   * @example
   * // Delete one ExploreITFunfact
   * const ExploreITFunfact = await prisma.exploreITFunfact.delete({
   *   where: {
   *     // ... filter to delete one ExploreITFunfact
   *   }
   * })
   * 
   */
  delete<T extends ExploreITFunfactDeleteArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactDeleteArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExploreITFunfact.
   * @param {ExploreITFunfactUpdateArgs} args - Arguments to update one ExploreITFunfact.
   * @example
   * // Update one ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExploreITFunfactUpdateArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactUpdateArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExploreITFunfacts.
   * @param {ExploreITFunfactDeleteManyArgs} args - Arguments to filter ExploreITFunfacts to delete.
   * @example
   * // Delete a few ExploreITFunfacts
   * const { count } = await prisma.exploreITFunfact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExploreITFunfactDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExploreITFunfactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExploreITFunfacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExploreITFunfacts
   * const exploreITFunfact = await prisma.exploreITFunfact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExploreITFunfactUpdateManyArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExploreITFunfacts and returns the data updated in the database.
   * @param {ExploreITFunfactUpdateManyAndReturnArgs} args - Arguments to update many ExploreITFunfacts.
   * @example
   * // Update many ExploreITFunfacts
   * const exploreITFunfact = await prisma.exploreITFunfact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExploreITFunfacts and only return the `id`
   * const exploreITFunfactWithIdOnly = await prisma.exploreITFunfact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExploreITFunfactUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExploreITFunfact.
   * @param {ExploreITFunfactUpsertArgs} args - Arguments to update or create a ExploreITFunfact.
   * @example
   * // Update or create a ExploreITFunfact
   * const exploreITFunfact = await prisma.exploreITFunfact.upsert({
   *   create: {
   *     // ... data to create a ExploreITFunfact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExploreITFunfact we want to update
   *   }
   * })
   */
  upsert<T extends ExploreITFunfactUpsertArgs>(args: Prisma.SelectSubset<T, ExploreITFunfactUpsertArgs<ExtArgs>>): Prisma.Prisma__ExploreITFunfactClient<runtime.Types.Result.GetResult<Prisma.$ExploreITFunfactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExploreITFunfacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactCountArgs} args - Arguments to filter ExploreITFunfacts to count.
   * @example
   * // Count the number of ExploreITFunfacts
   * const count = await prisma.exploreITFunfact.count({
   *   where: {
   *     // ... the filter for the ExploreITFunfacts we want to count
   *   }
   * })
  **/
  count<T extends ExploreITFunfactCountArgs>(
    args?: Prisma.Subset<T, ExploreITFunfactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExploreITFunfactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExploreITFunfact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExploreITFunfactAggregateArgs>(args: Prisma.Subset<T, ExploreITFunfactAggregateArgs>): Prisma.PrismaPromise<GetExploreITFunfactAggregateType<T>>

  /**
   * Group by ExploreITFunfact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExploreITFunfactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExploreITFunfactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExploreITFunfactGroupByArgs['orderBy'] }
      : { orderBy?: ExploreITFunfactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExploreITFunfactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExploreITFunfactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExploreITFunfact model
 */
readonly fields: ExploreITFunfactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExploreITFunfact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExploreITFunfactClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExploreITFunfact model
 */
export interface ExploreITFunfactFieldRefs {
  readonly id: Prisma.FieldRef<"ExploreITFunfact", 'String'>
  readonly imageUrl: Prisma.FieldRef<"ExploreITFunfact", 'String'>
  readonly content: Prisma.FieldRef<"ExploreITFunfact", 'String'>
  readonly createdAt: Prisma.FieldRef<"ExploreITFunfact", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExploreITFunfact", 'DateTime'>
  readonly title: Prisma.FieldRef<"ExploreITFunfact", 'String'>
}
    

// Custom InputTypes
/**
 * ExploreITFunfact findUnique
 */
export type ExploreITFunfactFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter, which ExploreITFunfact to fetch.
   */
  where: Prisma.ExploreITFunfactWhereUniqueInput
}

/**
 * ExploreITFunfact findUniqueOrThrow
 */
export type ExploreITFunfactFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter, which ExploreITFunfact to fetch.
   */
  where: Prisma.ExploreITFunfactWhereUniqueInput
}

/**
 * ExploreITFunfact findFirst
 */
export type ExploreITFunfactFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter, which ExploreITFunfact to fetch.
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExploreITFunfacts to fetch.
   */
  orderBy?: Prisma.ExploreITFunfactOrderByWithRelationInput | Prisma.ExploreITFunfactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExploreITFunfacts.
   */
  cursor?: Prisma.ExploreITFunfactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExploreITFunfacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExploreITFunfacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExploreITFunfacts.
   */
  distinct?: Prisma.ExploreITFunfactScalarFieldEnum | Prisma.ExploreITFunfactScalarFieldEnum[]
}

/**
 * ExploreITFunfact findFirstOrThrow
 */
export type ExploreITFunfactFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter, which ExploreITFunfact to fetch.
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExploreITFunfacts to fetch.
   */
  orderBy?: Prisma.ExploreITFunfactOrderByWithRelationInput | Prisma.ExploreITFunfactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExploreITFunfacts.
   */
  cursor?: Prisma.ExploreITFunfactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExploreITFunfacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExploreITFunfacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExploreITFunfacts.
   */
  distinct?: Prisma.ExploreITFunfactScalarFieldEnum | Prisma.ExploreITFunfactScalarFieldEnum[]
}

/**
 * ExploreITFunfact findMany
 */
export type ExploreITFunfactFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter, which ExploreITFunfacts to fetch.
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExploreITFunfacts to fetch.
   */
  orderBy?: Prisma.ExploreITFunfactOrderByWithRelationInput | Prisma.ExploreITFunfactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExploreITFunfacts.
   */
  cursor?: Prisma.ExploreITFunfactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExploreITFunfacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExploreITFunfacts.
   */
  skip?: number
  distinct?: Prisma.ExploreITFunfactScalarFieldEnum | Prisma.ExploreITFunfactScalarFieldEnum[]
}

/**
 * ExploreITFunfact create
 */
export type ExploreITFunfactCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * The data needed to create a ExploreITFunfact.
   */
  data: Prisma.XOR<Prisma.ExploreITFunfactCreateInput, Prisma.ExploreITFunfactUncheckedCreateInput>
}

/**
 * ExploreITFunfact createMany
 */
export type ExploreITFunfactCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExploreITFunfacts.
   */
  data: Prisma.ExploreITFunfactCreateManyInput | Prisma.ExploreITFunfactCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExploreITFunfact createManyAndReturn
 */
export type ExploreITFunfactCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * The data used to create many ExploreITFunfacts.
   */
  data: Prisma.ExploreITFunfactCreateManyInput | Prisma.ExploreITFunfactCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExploreITFunfact update
 */
export type ExploreITFunfactUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * The data needed to update a ExploreITFunfact.
   */
  data: Prisma.XOR<Prisma.ExploreITFunfactUpdateInput, Prisma.ExploreITFunfactUncheckedUpdateInput>
  /**
   * Choose, which ExploreITFunfact to update.
   */
  where: Prisma.ExploreITFunfactWhereUniqueInput
}

/**
 * ExploreITFunfact updateMany
 */
export type ExploreITFunfactUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExploreITFunfacts.
   */
  data: Prisma.XOR<Prisma.ExploreITFunfactUpdateManyMutationInput, Prisma.ExploreITFunfactUncheckedUpdateManyInput>
  /**
   * Filter which ExploreITFunfacts to update
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * Limit how many ExploreITFunfacts to update.
   */
  limit?: number
}

/**
 * ExploreITFunfact updateManyAndReturn
 */
export type ExploreITFunfactUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * The data used to update ExploreITFunfacts.
   */
  data: Prisma.XOR<Prisma.ExploreITFunfactUpdateManyMutationInput, Prisma.ExploreITFunfactUncheckedUpdateManyInput>
  /**
   * Filter which ExploreITFunfacts to update
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * Limit how many ExploreITFunfacts to update.
   */
  limit?: number
}

/**
 * ExploreITFunfact upsert
 */
export type ExploreITFunfactUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * The filter to search for the ExploreITFunfact to update in case it exists.
   */
  where: Prisma.ExploreITFunfactWhereUniqueInput
  /**
   * In case the ExploreITFunfact found by the `where` argument doesn't exist, create a new ExploreITFunfact with this data.
   */
  create: Prisma.XOR<Prisma.ExploreITFunfactCreateInput, Prisma.ExploreITFunfactUncheckedCreateInput>
  /**
   * In case the ExploreITFunfact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExploreITFunfactUpdateInput, Prisma.ExploreITFunfactUncheckedUpdateInput>
}

/**
 * ExploreITFunfact delete
 */
export type ExploreITFunfactDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
  /**
   * Filter which ExploreITFunfact to delete.
   */
  where: Prisma.ExploreITFunfactWhereUniqueInput
}

/**
 * ExploreITFunfact deleteMany
 */
export type ExploreITFunfactDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExploreITFunfacts to delete
   */
  where?: Prisma.ExploreITFunfactWhereInput
  /**
   * Limit how many ExploreITFunfacts to delete.
   */
  limit?: number
}

/**
 * ExploreITFunfact without action
 */
export type ExploreITFunfactDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExploreITFunfact
   */
  select?: Prisma.ExploreITFunfactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExploreITFunfact
   */
  omit?: Prisma.ExploreITFunfactOmit<ExtArgs> | null
}
