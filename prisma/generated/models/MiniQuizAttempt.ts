
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MiniQuizAttempt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MiniQuizAttempt
 * 
 */
export type MiniQuizAttemptModel = runtime.Types.Result.DefaultSelection<Prisma.$MiniQuizAttemptPayload>

export type AggregateMiniQuizAttempt = {
  _count: MiniQuizAttemptCountAggregateOutputType | null
  _min: MiniQuizAttemptMinAggregateOutputType | null
  _max: MiniQuizAttemptMaxAggregateOutputType | null
}

export type MiniQuizAttemptMinAggregateOutputType = {
  id: string | null
  quizId: string | null
  userId: string | null
  attemptedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MiniQuizAttemptMaxAggregateOutputType = {
  id: string | null
  quizId: string | null
  userId: string | null
  attemptedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MiniQuizAttemptCountAggregateOutputType = {
  id: number
  quizId: number
  userId: number
  answerJson: number
  attemptedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MiniQuizAttemptMinAggregateInputType = {
  id?: true
  quizId?: true
  userId?: true
  attemptedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type MiniQuizAttemptMaxAggregateInputType = {
  id?: true
  quizId?: true
  userId?: true
  attemptedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type MiniQuizAttemptCountAggregateInputType = {
  id?: true
  quizId?: true
  userId?: true
  answerJson?: true
  attemptedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MiniQuizAttemptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuizAttempt to aggregate.
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizAttempts to fetch.
   */
  orderBy?: Prisma.MiniQuizAttemptOrderByWithRelationInput | Prisma.MiniQuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MiniQuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MiniQuizAttempts
  **/
  _count?: true | MiniQuizAttemptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MiniQuizAttemptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MiniQuizAttemptMaxAggregateInputType
}

export type GetMiniQuizAttemptAggregateType<T extends MiniQuizAttemptAggregateArgs> = {
      [P in keyof T & keyof AggregateMiniQuizAttempt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMiniQuizAttempt[P]>
    : Prisma.GetScalarType<T[P], AggregateMiniQuizAttempt[P]>
}




export type MiniQuizAttemptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MiniQuizAttemptWhereInput
  orderBy?: Prisma.MiniQuizAttemptOrderByWithAggregationInput | Prisma.MiniQuizAttemptOrderByWithAggregationInput[]
  by: Prisma.MiniQuizAttemptScalarFieldEnum[] | Prisma.MiniQuizAttemptScalarFieldEnum
  having?: Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MiniQuizAttemptCountAggregateInputType | true
  _min?: MiniQuizAttemptMinAggregateInputType
  _max?: MiniQuizAttemptMaxAggregateInputType
}

export type MiniQuizAttemptGroupByOutputType = {
  id: string
  quizId: string
  userId: string
  answerJson: runtime.JsonValue
  attemptedAt: Date
  createdAt: Date
  updatedAt: Date
  _count: MiniQuizAttemptCountAggregateOutputType | null
  _min: MiniQuizAttemptMinAggregateOutputType | null
  _max: MiniQuizAttemptMaxAggregateOutputType | null
}

type GetMiniQuizAttemptGroupByPayload<T extends MiniQuizAttemptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MiniQuizAttemptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MiniQuizAttemptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MiniQuizAttemptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MiniQuizAttemptGroupByOutputType[P]>
      }
    >
  > 



export type MiniQuizAttemptWhereInput = {
  AND?: Prisma.MiniQuizAttemptWhereInput | Prisma.MiniQuizAttemptWhereInput[]
  OR?: Prisma.MiniQuizAttemptWhereInput[]
  NOT?: Prisma.MiniQuizAttemptWhereInput | Prisma.MiniQuizAttemptWhereInput[]
  id?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  quizId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  userId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  answerJson?: Prisma.JsonFilter<"MiniQuizAttempt">
  attemptedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  MiniQuiz?: Prisma.XOR<Prisma.MiniQuizScalarRelationFilter, Prisma.MiniQuizWhereInput>
  UserData?: Prisma.XOR<Prisma.UserDataScalarRelationFilter, Prisma.UserDataWhereInput>
}

export type MiniQuizAttemptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  attemptedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  MiniQuiz?: Prisma.MiniQuizOrderByWithRelationInput
  UserData?: Prisma.UserDataOrderByWithRelationInput
}

export type MiniQuizAttemptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MiniQuizAttemptWhereInput | Prisma.MiniQuizAttemptWhereInput[]
  OR?: Prisma.MiniQuizAttemptWhereInput[]
  NOT?: Prisma.MiniQuizAttemptWhereInput | Prisma.MiniQuizAttemptWhereInput[]
  quizId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  userId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  answerJson?: Prisma.JsonFilter<"MiniQuizAttempt">
  attemptedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  MiniQuiz?: Prisma.XOR<Prisma.MiniQuizScalarRelationFilter, Prisma.MiniQuizWhereInput>
  UserData?: Prisma.XOR<Prisma.UserDataScalarRelationFilter, Prisma.UserDataWhereInput>
}, "id">

export type MiniQuizAttemptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  attemptedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MiniQuizAttemptCountOrderByAggregateInput
  _max?: Prisma.MiniQuizAttemptMaxOrderByAggregateInput
  _min?: Prisma.MiniQuizAttemptMinOrderByAggregateInput
}

export type MiniQuizAttemptScalarWhereWithAggregatesInput = {
  AND?: Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput | Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput[]
  OR?: Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput | Prisma.MiniQuizAttemptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MiniQuizAttempt"> | string
  quizId?: Prisma.StringWithAggregatesFilter<"MiniQuizAttempt"> | string
  userId?: Prisma.StringWithAggregatesFilter<"MiniQuizAttempt"> | string
  answerJson?: Prisma.JsonWithAggregatesFilter<"MiniQuizAttempt">
  attemptedAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuizAttempt"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuizAttempt"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuizAttempt"> | Date | string
}

export type MiniQuizAttemptCreateInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  MiniQuiz: Prisma.MiniQuizCreateNestedOneWithoutMiniQuizAttemptInput
  UserData: Prisma.UserDataCreateNestedOneWithoutMiniQuizAttemptInput
}

export type MiniQuizAttemptUncheckedCreateInput = {
  id: string
  quizId: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  MiniQuiz?: Prisma.MiniQuizUpdateOneRequiredWithoutMiniQuizAttemptNestedInput
  UserData?: Prisma.UserDataUpdateOneRequiredWithoutMiniQuizAttemptNestedInput
}

export type MiniQuizAttemptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptCreateManyInput = {
  id: string
  quizId: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptListRelationFilter = {
  every?: Prisma.MiniQuizAttemptWhereInput
  some?: Prisma.MiniQuizAttemptWhereInput
  none?: Prisma.MiniQuizAttemptWhereInput
}

export type MiniQuizAttemptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MiniQuizAttemptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  attemptedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizAttemptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  attemptedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizAttemptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  attemptedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizAttemptCreateNestedManyWithoutMiniQuizInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyMiniQuizInputEnvelope
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
}

export type MiniQuizAttemptUncheckedCreateNestedManyWithoutMiniQuizInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyMiniQuizInputEnvelope
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
}

export type MiniQuizAttemptUpdateManyWithoutMiniQuizNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput[]
  upsert?: Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyMiniQuizInputEnvelope
  set?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  delete?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  update?: Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutMiniQuizInput[]
  updateMany?: Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutMiniQuizInput[]
  deleteMany?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
}

export type MiniQuizAttemptUncheckedUpdateManyWithoutMiniQuizNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput[]
  upsert?: Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyMiniQuizInputEnvelope
  set?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  delete?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  update?: Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutMiniQuizInput[]
  updateMany?: Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutMiniQuizInput | Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutMiniQuizInput[]
  deleteMany?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
}

export type MiniQuizAttemptCreateNestedManyWithoutUserDataInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput> | Prisma.MiniQuizAttemptCreateWithoutUserDataInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyUserDataInputEnvelope
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
}

export type MiniQuizAttemptUncheckedCreateNestedManyWithoutUserDataInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput> | Prisma.MiniQuizAttemptCreateWithoutUserDataInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyUserDataInputEnvelope
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
}

export type MiniQuizAttemptUpdateManyWithoutUserDataNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput> | Prisma.MiniQuizAttemptCreateWithoutUserDataInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput[]
  upsert?: Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutUserDataInput | Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutUserDataInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyUserDataInputEnvelope
  set?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  delete?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  update?: Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutUserDataInput | Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutUserDataInput[]
  updateMany?: Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutUserDataInput | Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutUserDataInput[]
  deleteMany?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
}

export type MiniQuizAttemptUncheckedUpdateManyWithoutUserDataNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput> | Prisma.MiniQuizAttemptCreateWithoutUserDataInput[] | Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput | Prisma.MiniQuizAttemptCreateOrConnectWithoutUserDataInput[]
  upsert?: Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutUserDataInput | Prisma.MiniQuizAttemptUpsertWithWhereUniqueWithoutUserDataInput[]
  createMany?: Prisma.MiniQuizAttemptCreateManyUserDataInputEnvelope
  set?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  delete?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  connect?: Prisma.MiniQuizAttemptWhereUniqueInput | Prisma.MiniQuizAttemptWhereUniqueInput[]
  update?: Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutUserDataInput | Prisma.MiniQuizAttemptUpdateWithWhereUniqueWithoutUserDataInput[]
  updateMany?: Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutUserDataInput | Prisma.MiniQuizAttemptUpdateManyWithWhereWithoutUserDataInput[]
  deleteMany?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
}

export type MiniQuizAttemptCreateWithoutMiniQuizInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  UserData: Prisma.UserDataCreateNestedOneWithoutMiniQuizAttemptInput
}

export type MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput = {
  id: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptCreateOrConnectWithoutMiniQuizInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput>
}

export type MiniQuizAttemptCreateManyMiniQuizInputEnvelope = {
  data: Prisma.MiniQuizAttemptCreateManyMiniQuizInput | Prisma.MiniQuizAttemptCreateManyMiniQuizInput[]
  skipDuplicates?: boolean
}

export type MiniQuizAttemptUpsertWithWhereUniqueWithoutMiniQuizInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.MiniQuizAttemptUpdateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedUpdateWithoutMiniQuizInput>
  create: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutMiniQuizInput>
}

export type MiniQuizAttemptUpdateWithWhereUniqueWithoutMiniQuizInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateWithoutMiniQuizInput, Prisma.MiniQuizAttemptUncheckedUpdateWithoutMiniQuizInput>
}

export type MiniQuizAttemptUpdateManyWithWhereWithoutMiniQuizInput = {
  where: Prisma.MiniQuizAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateManyMutationInput, Prisma.MiniQuizAttemptUncheckedUpdateManyWithoutMiniQuizInput>
}

export type MiniQuizAttemptScalarWhereInput = {
  AND?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
  OR?: Prisma.MiniQuizAttemptScalarWhereInput[]
  NOT?: Prisma.MiniQuizAttemptScalarWhereInput | Prisma.MiniQuizAttemptScalarWhereInput[]
  id?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  quizId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  userId?: Prisma.StringFilter<"MiniQuizAttempt"> | string
  answerJson?: Prisma.JsonFilter<"MiniQuizAttempt">
  attemptedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizAttempt"> | Date | string
}

export type MiniQuizAttemptCreateWithoutUserDataInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  MiniQuiz: Prisma.MiniQuizCreateNestedOneWithoutMiniQuizAttemptInput
}

export type MiniQuizAttemptUncheckedCreateWithoutUserDataInput = {
  id: string
  quizId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptCreateOrConnectWithoutUserDataInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput>
}

export type MiniQuizAttemptCreateManyUserDataInputEnvelope = {
  data: Prisma.MiniQuizAttemptCreateManyUserDataInput | Prisma.MiniQuizAttemptCreateManyUserDataInput[]
  skipDuplicates?: boolean
}

export type MiniQuizAttemptUpsertWithWhereUniqueWithoutUserDataInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.MiniQuizAttemptUpdateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedUpdateWithoutUserDataInput>
  create: Prisma.XOR<Prisma.MiniQuizAttemptCreateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedCreateWithoutUserDataInput>
}

export type MiniQuizAttemptUpdateWithWhereUniqueWithoutUserDataInput = {
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateWithoutUserDataInput, Prisma.MiniQuizAttemptUncheckedUpdateWithoutUserDataInput>
}

export type MiniQuizAttemptUpdateManyWithWhereWithoutUserDataInput = {
  where: Prisma.MiniQuizAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateManyMutationInput, Prisma.MiniQuizAttemptUncheckedUpdateManyWithoutUserDataInput>
}

export type MiniQuizAttemptCreateManyMiniQuizInput = {
  id: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptUpdateWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserData?: Prisma.UserDataUpdateOneRequiredWithoutMiniQuizAttemptNestedInput
}

export type MiniQuizAttemptUncheckedUpdateWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptUncheckedUpdateManyWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptCreateManyUserDataInput = {
  id: string
  quizId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizAttemptUpdateWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  MiniQuiz?: Prisma.MiniQuizUpdateOneRequiredWithoutMiniQuizAttemptNestedInput
}

export type MiniQuizAttemptUncheckedUpdateWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizAttemptUncheckedUpdateManyWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  attemptedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MiniQuizAttemptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quizId?: boolean
  userId?: boolean
  answerJson?: boolean
  attemptedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizAttempt"]>

export type MiniQuizAttemptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quizId?: boolean
  userId?: boolean
  answerJson?: boolean
  attemptedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizAttempt"]>

export type MiniQuizAttemptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quizId?: boolean
  userId?: boolean
  answerJson?: boolean
  attemptedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizAttempt"]>

export type MiniQuizAttemptSelectScalar = {
  id?: boolean
  quizId?: boolean
  userId?: boolean
  answerJson?: boolean
  attemptedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MiniQuizAttemptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "quizId" | "userId" | "answerJson" | "attemptedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["miniQuizAttempt"]>
export type MiniQuizAttemptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}
export type MiniQuizAttemptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}
export type MiniQuizAttemptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}

export type $MiniQuizAttemptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MiniQuizAttempt"
  objects: {
    MiniQuiz: Prisma.$MiniQuizPayload<ExtArgs>
    UserData: Prisma.$UserDataPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    quizId: string
    userId: string
    answerJson: runtime.JsonValue
    attemptedAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["miniQuizAttempt"]>
  composites: {}
}

export type MiniQuizAttemptGetPayload<S extends boolean | null | undefined | MiniQuizAttemptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload, S>

export type MiniQuizAttemptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MiniQuizAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MiniQuizAttemptCountAggregateInputType | true
  }

export interface MiniQuizAttemptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MiniQuizAttempt'], meta: { name: 'MiniQuizAttempt' } }
  /**
   * Find zero or one MiniQuizAttempt that matches the filter.
   * @param {MiniQuizAttemptFindUniqueArgs} args - Arguments to find a MiniQuizAttempt
   * @example
   * // Get one MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MiniQuizAttemptFindUniqueArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MiniQuizAttempt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MiniQuizAttemptFindUniqueOrThrowArgs} args - Arguments to find a MiniQuizAttempt
   * @example
   * // Get one MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MiniQuizAttemptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuizAttempt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptFindFirstArgs} args - Arguments to find a MiniQuizAttempt
   * @example
   * // Get one MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MiniQuizAttemptFindFirstArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptFindFirstArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuizAttempt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptFindFirstOrThrowArgs} args - Arguments to find a MiniQuizAttempt
   * @example
   * // Get one MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MiniQuizAttemptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MiniQuizAttempts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MiniQuizAttempts
   * const miniQuizAttempts = await prisma.miniQuizAttempt.findMany()
   * 
   * // Get first 10 MiniQuizAttempts
   * const miniQuizAttempts = await prisma.miniQuizAttempt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const miniQuizAttemptWithIdOnly = await prisma.miniQuizAttempt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MiniQuizAttemptFindManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MiniQuizAttempt.
   * @param {MiniQuizAttemptCreateArgs} args - Arguments to create a MiniQuizAttempt.
   * @example
   * // Create one MiniQuizAttempt
   * const MiniQuizAttempt = await prisma.miniQuizAttempt.create({
   *   data: {
   *     // ... data to create a MiniQuizAttempt
   *   }
   * })
   * 
   */
  create<T extends MiniQuizAttemptCreateArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptCreateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MiniQuizAttempts.
   * @param {MiniQuizAttemptCreateManyArgs} args - Arguments to create many MiniQuizAttempts.
   * @example
   * // Create many MiniQuizAttempts
   * const miniQuizAttempt = await prisma.miniQuizAttempt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MiniQuizAttemptCreateManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MiniQuizAttempts and returns the data saved in the database.
   * @param {MiniQuizAttemptCreateManyAndReturnArgs} args - Arguments to create many MiniQuizAttempts.
   * @example
   * // Create many MiniQuizAttempts
   * const miniQuizAttempt = await prisma.miniQuizAttempt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MiniQuizAttempts and only return the `id`
   * const miniQuizAttemptWithIdOnly = await prisma.miniQuizAttempt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MiniQuizAttemptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MiniQuizAttempt.
   * @param {MiniQuizAttemptDeleteArgs} args - Arguments to delete one MiniQuizAttempt.
   * @example
   * // Delete one MiniQuizAttempt
   * const MiniQuizAttempt = await prisma.miniQuizAttempt.delete({
   *   where: {
   *     // ... filter to delete one MiniQuizAttempt
   *   }
   * })
   * 
   */
  delete<T extends MiniQuizAttemptDeleteArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptDeleteArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MiniQuizAttempt.
   * @param {MiniQuizAttemptUpdateArgs} args - Arguments to update one MiniQuizAttempt.
   * @example
   * // Update one MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MiniQuizAttemptUpdateArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptUpdateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MiniQuizAttempts.
   * @param {MiniQuizAttemptDeleteManyArgs} args - Arguments to filter MiniQuizAttempts to delete.
   * @example
   * // Delete a few MiniQuizAttempts
   * const { count } = await prisma.miniQuizAttempt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MiniQuizAttemptDeleteManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MiniQuizAttempts
   * const miniQuizAttempt = await prisma.miniQuizAttempt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MiniQuizAttemptUpdateManyArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizAttempts and returns the data updated in the database.
   * @param {MiniQuizAttemptUpdateManyAndReturnArgs} args - Arguments to update many MiniQuizAttempts.
   * @example
   * // Update many MiniQuizAttempts
   * const miniQuizAttempt = await prisma.miniQuizAttempt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MiniQuizAttempts and only return the `id`
   * const miniQuizAttemptWithIdOnly = await prisma.miniQuizAttempt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MiniQuizAttemptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MiniQuizAttempt.
   * @param {MiniQuizAttemptUpsertArgs} args - Arguments to update or create a MiniQuizAttempt.
   * @example
   * // Update or create a MiniQuizAttempt
   * const miniQuizAttempt = await prisma.miniQuizAttempt.upsert({
   *   create: {
   *     // ... data to create a MiniQuizAttempt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MiniQuizAttempt we want to update
   *   }
   * })
   */
  upsert<T extends MiniQuizAttemptUpsertArgs>(args: Prisma.SelectSubset<T, MiniQuizAttemptUpsertArgs<ExtArgs>>): Prisma.Prisma__MiniQuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MiniQuizAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptCountArgs} args - Arguments to filter MiniQuizAttempts to count.
   * @example
   * // Count the number of MiniQuizAttempts
   * const count = await prisma.miniQuizAttempt.count({
   *   where: {
   *     // ... the filter for the MiniQuizAttempts we want to count
   *   }
   * })
  **/
  count<T extends MiniQuizAttemptCountArgs>(
    args?: Prisma.Subset<T, MiniQuizAttemptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MiniQuizAttemptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MiniQuizAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MiniQuizAttemptAggregateArgs>(args: Prisma.Subset<T, MiniQuizAttemptAggregateArgs>): Prisma.PrismaPromise<GetMiniQuizAttemptAggregateType<T>>

  /**
   * Group by MiniQuizAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAttemptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MiniQuizAttemptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MiniQuizAttemptGroupByArgs['orderBy'] }
      : { orderBy?: MiniQuizAttemptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MiniQuizAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMiniQuizAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MiniQuizAttempt model
 */
readonly fields: MiniQuizAttemptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MiniQuizAttempt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MiniQuizAttemptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  MiniQuiz<T extends Prisma.MiniQuizDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MiniQuizDefaultArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserData<T extends Prisma.UserDataDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDataDefaultArgs<ExtArgs>>): Prisma.Prisma__UserDataClient<runtime.Types.Result.GetResult<Prisma.$UserDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MiniQuizAttempt model
 */
export interface MiniQuizAttemptFieldRefs {
  readonly id: Prisma.FieldRef<"MiniQuizAttempt", 'String'>
  readonly quizId: Prisma.FieldRef<"MiniQuizAttempt", 'String'>
  readonly userId: Prisma.FieldRef<"MiniQuizAttempt", 'String'>
  readonly answerJson: Prisma.FieldRef<"MiniQuizAttempt", 'Json'>
  readonly attemptedAt: Prisma.FieldRef<"MiniQuizAttempt", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"MiniQuizAttempt", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MiniQuizAttempt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MiniQuizAttempt findUnique
 */
export type MiniQuizAttemptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizAttempt to fetch.
   */
  where: Prisma.MiniQuizAttemptWhereUniqueInput
}

/**
 * MiniQuizAttempt findUniqueOrThrow
 */
export type MiniQuizAttemptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizAttempt to fetch.
   */
  where: Prisma.MiniQuizAttemptWhereUniqueInput
}

/**
 * MiniQuizAttempt findFirst
 */
export type MiniQuizAttemptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizAttempt to fetch.
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizAttempts to fetch.
   */
  orderBy?: Prisma.MiniQuizAttemptOrderByWithRelationInput | Prisma.MiniQuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizAttempts.
   */
  cursor?: Prisma.MiniQuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizAttempts.
   */
  distinct?: Prisma.MiniQuizAttemptScalarFieldEnum | Prisma.MiniQuizAttemptScalarFieldEnum[]
}

/**
 * MiniQuizAttempt findFirstOrThrow
 */
export type MiniQuizAttemptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizAttempt to fetch.
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizAttempts to fetch.
   */
  orderBy?: Prisma.MiniQuizAttemptOrderByWithRelationInput | Prisma.MiniQuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizAttempts.
   */
  cursor?: Prisma.MiniQuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizAttempts.
   */
  distinct?: Prisma.MiniQuizAttemptScalarFieldEnum | Prisma.MiniQuizAttemptScalarFieldEnum[]
}

/**
 * MiniQuizAttempt findMany
 */
export type MiniQuizAttemptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizAttempts to fetch.
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizAttempts to fetch.
   */
  orderBy?: Prisma.MiniQuizAttemptOrderByWithRelationInput | Prisma.MiniQuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MiniQuizAttempts.
   */
  cursor?: Prisma.MiniQuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizAttempts.
   */
  skip?: number
  distinct?: Prisma.MiniQuizAttemptScalarFieldEnum | Prisma.MiniQuizAttemptScalarFieldEnum[]
}

/**
 * MiniQuizAttempt create
 */
export type MiniQuizAttemptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * The data needed to create a MiniQuizAttempt.
   */
  data: Prisma.XOR<Prisma.MiniQuizAttemptCreateInput, Prisma.MiniQuizAttemptUncheckedCreateInput>
}

/**
 * MiniQuizAttempt createMany
 */
export type MiniQuizAttemptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MiniQuizAttempts.
   */
  data: Prisma.MiniQuizAttemptCreateManyInput | Prisma.MiniQuizAttemptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MiniQuizAttempt createManyAndReturn
 */
export type MiniQuizAttemptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * The data used to create many MiniQuizAttempts.
   */
  data: Prisma.MiniQuizAttemptCreateManyInput | Prisma.MiniQuizAttemptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MiniQuizAttempt update
 */
export type MiniQuizAttemptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * The data needed to update a MiniQuizAttempt.
   */
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateInput, Prisma.MiniQuizAttemptUncheckedUpdateInput>
  /**
   * Choose, which MiniQuizAttempt to update.
   */
  where: Prisma.MiniQuizAttemptWhereUniqueInput
}

/**
 * MiniQuizAttempt updateMany
 */
export type MiniQuizAttemptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MiniQuizAttempts.
   */
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateManyMutationInput, Prisma.MiniQuizAttemptUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizAttempts to update
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * Limit how many MiniQuizAttempts to update.
   */
  limit?: number
}

/**
 * MiniQuizAttempt updateManyAndReturn
 */
export type MiniQuizAttemptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * The data used to update MiniQuizAttempts.
   */
  data: Prisma.XOR<Prisma.MiniQuizAttemptUpdateManyMutationInput, Prisma.MiniQuizAttemptUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizAttempts to update
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * Limit how many MiniQuizAttempts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MiniQuizAttempt upsert
 */
export type MiniQuizAttemptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * The filter to search for the MiniQuizAttempt to update in case it exists.
   */
  where: Prisma.MiniQuizAttemptWhereUniqueInput
  /**
   * In case the MiniQuizAttempt found by the `where` argument doesn't exist, create a new MiniQuizAttempt with this data.
   */
  create: Prisma.XOR<Prisma.MiniQuizAttemptCreateInput, Prisma.MiniQuizAttemptUncheckedCreateInput>
  /**
   * In case the MiniQuizAttempt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MiniQuizAttemptUpdateInput, Prisma.MiniQuizAttemptUncheckedUpdateInput>
}

/**
 * MiniQuizAttempt delete
 */
export type MiniQuizAttemptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  /**
   * Filter which MiniQuizAttempt to delete.
   */
  where: Prisma.MiniQuizAttemptWhereUniqueInput
}

/**
 * MiniQuizAttempt deleteMany
 */
export type MiniQuizAttemptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuizAttempts to delete
   */
  where?: Prisma.MiniQuizAttemptWhereInput
  /**
   * Limit how many MiniQuizAttempts to delete.
   */
  limit?: number
}

/**
 * MiniQuizAttempt without action
 */
export type MiniQuizAttemptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
}
