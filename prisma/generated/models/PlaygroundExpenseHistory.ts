
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PlaygroundExpenseHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlaygroundExpenseHistory
 * 
 */
export type PlaygroundExpenseHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$PlaygroundExpenseHistoryPayload>

export type AggregatePlaygroundExpenseHistory = {
  _count: PlaygroundExpenseHistoryCountAggregateOutputType | null
  _avg: PlaygroundExpenseHistoryAvgAggregateOutputType | null
  _sum: PlaygroundExpenseHistorySumAggregateOutputType | null
  _min: PlaygroundExpenseHistoryMinAggregateOutputType | null
  _max: PlaygroundExpenseHistoryMaxAggregateOutputType | null
}

export type PlaygroundExpenseHistoryAvgAggregateOutputType = {
  amount: number | null
}

export type PlaygroundExpenseHistorySumAggregateOutputType = {
  amount: number | null
}

export type PlaygroundExpenseHistoryMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaygroundExpenseHistoryMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaygroundExpenseHistoryCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  description: number
  amount: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlaygroundExpenseHistoryAvgAggregateInputType = {
  amount?: true
}

export type PlaygroundExpenseHistorySumAggregateInputType = {
  amount?: true
}

export type PlaygroundExpenseHistoryMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaygroundExpenseHistoryMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaygroundExpenseHistoryCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlaygroundExpenseHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundExpenseHistory to aggregate.
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundExpenseHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput | Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundExpenseHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundExpenseHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlaygroundExpenseHistories
  **/
  _count?: true | PlaygroundExpenseHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlaygroundExpenseHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlaygroundExpenseHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlaygroundExpenseHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlaygroundExpenseHistoryMaxAggregateInputType
}

export type GetPlaygroundExpenseHistoryAggregateType<T extends PlaygroundExpenseHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregatePlaygroundExpenseHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlaygroundExpenseHistory[P]>
    : Prisma.GetScalarType<T[P], AggregatePlaygroundExpenseHistory[P]>
}




export type PlaygroundExpenseHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithAggregationInput | Prisma.PlaygroundExpenseHistoryOrderByWithAggregationInput[]
  by: Prisma.PlaygroundExpenseHistoryScalarFieldEnum[] | Prisma.PlaygroundExpenseHistoryScalarFieldEnum
  having?: Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlaygroundExpenseHistoryCountAggregateInputType | true
  _avg?: PlaygroundExpenseHistoryAvgAggregateInputType
  _sum?: PlaygroundExpenseHistorySumAggregateInputType
  _min?: PlaygroundExpenseHistoryMinAggregateInputType
  _max?: PlaygroundExpenseHistoryMaxAggregateInputType
}

export type PlaygroundExpenseHistoryGroupByOutputType = {
  id: string
  userPlaygroundId: string
  description: string
  amount: number
  createdAt: Date
  updatedAt: Date
  _count: PlaygroundExpenseHistoryCountAggregateOutputType | null
  _avg: PlaygroundExpenseHistoryAvgAggregateOutputType | null
  _sum: PlaygroundExpenseHistorySumAggregateOutputType | null
  _min: PlaygroundExpenseHistoryMinAggregateOutputType | null
  _max: PlaygroundExpenseHistoryMaxAggregateOutputType | null
}

type GetPlaygroundExpenseHistoryGroupByPayload<T extends PlaygroundExpenseHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlaygroundExpenseHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlaygroundExpenseHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlaygroundExpenseHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlaygroundExpenseHistoryGroupByOutputType[P]>
      }
    >
  > 



export type PlaygroundExpenseHistoryWhereInput = {
  AND?: Prisma.PlaygroundExpenseHistoryWhereInput | Prisma.PlaygroundExpenseHistoryWhereInput[]
  OR?: Prisma.PlaygroundExpenseHistoryWhereInput[]
  NOT?: Prisma.PlaygroundExpenseHistoryWhereInput | Prisma.PlaygroundExpenseHistoryWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  amount?: Prisma.IntFilter<"PlaygroundExpenseHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type PlaygroundExpenseHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type PlaygroundExpenseHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PlaygroundExpenseHistoryWhereInput | Prisma.PlaygroundExpenseHistoryWhereInput[]
  OR?: Prisma.PlaygroundExpenseHistoryWhereInput[]
  NOT?: Prisma.PlaygroundExpenseHistoryWhereInput | Prisma.PlaygroundExpenseHistoryWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  amount?: Prisma.IntFilter<"PlaygroundExpenseHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id">

export type PlaygroundExpenseHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlaygroundExpenseHistoryCountOrderByAggregateInput
  _avg?: Prisma.PlaygroundExpenseHistoryAvgOrderByAggregateInput
  _max?: Prisma.PlaygroundExpenseHistoryMaxOrderByAggregateInput
  _min?: Prisma.PlaygroundExpenseHistoryMinOrderByAggregateInput
  _sum?: Prisma.PlaygroundExpenseHistorySumOrderByAggregateInput
}

export type PlaygroundExpenseHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput | Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput | Prisma.PlaygroundExpenseHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PlaygroundExpenseHistory"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"PlaygroundExpenseHistory"> | string
  description?: Prisma.StringWithAggregatesFilter<"PlaygroundExpenseHistory"> | string
  amount?: Prisma.IntWithAggregatesFilter<"PlaygroundExpenseHistory"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundExpenseHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundExpenseHistory"> | Date | string
}

export type PlaygroundExpenseHistoryCreateInput = {
  id: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutPlaygroundExpenseHistoryInput
}

export type PlaygroundExpenseHistoryUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundExpenseHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutPlaygroundExpenseHistoryNestedInput
}

export type PlaygroundExpenseHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundExpenseHistoryCreateManyInput = {
  id: string
  userPlaygroundId: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundExpenseHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundExpenseHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundExpenseHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundExpenseHistoryAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PlaygroundExpenseHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundExpenseHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundExpenseHistorySumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PlaygroundExpenseHistoryListRelationFilter = {
  every?: Prisma.PlaygroundExpenseHistoryWhereInput
  some?: Prisma.PlaygroundExpenseHistoryWhereInput
  none?: Prisma.PlaygroundExpenseHistoryWhereInput
}

export type PlaygroundExpenseHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
}

export type PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
}

export type PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundExpenseHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  delete?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  connect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  update?: Prisma.PlaygroundExpenseHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundExpenseHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundExpenseHistoryScalarWhereInput | Prisma.PlaygroundExpenseHistoryScalarWhereInput[]
}

export type PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundExpenseHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  delete?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  connect?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput | Prisma.PlaygroundExpenseHistoryWhereUniqueInput[]
  update?: Prisma.PlaygroundExpenseHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundExpenseHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundExpenseHistoryScalarWhereInput | Prisma.PlaygroundExpenseHistoryScalarWhereInput[]
}

export type PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput = {
  id: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundExpenseHistoryCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundExpenseHistoryCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInput | Prisma.PlaygroundExpenseHistoryCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type PlaygroundExpenseHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundExpenseHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateWithoutUserPlaygroundInput>
}

export type PlaygroundExpenseHistoryUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundExpenseHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateManyMutationInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type PlaygroundExpenseHistoryScalarWhereInput = {
  AND?: Prisma.PlaygroundExpenseHistoryScalarWhereInput | Prisma.PlaygroundExpenseHistoryScalarWhereInput[]
  OR?: Prisma.PlaygroundExpenseHistoryScalarWhereInput[]
  NOT?: Prisma.PlaygroundExpenseHistoryScalarWhereInput | Prisma.PlaygroundExpenseHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundExpenseHistory"> | string
  amount?: Prisma.IntFilter<"PlaygroundExpenseHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundExpenseHistory"> | Date | string
}

export type PlaygroundExpenseHistoryCreateManyUserPlaygroundInput = {
  id: string
  description?: string
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundExpenseHistoryUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundExpenseHistoryUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PlaygroundExpenseHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundExpenseHistory"]>

export type PlaygroundExpenseHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundExpenseHistory"]>

export type PlaygroundExpenseHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundExpenseHistory"]>

export type PlaygroundExpenseHistorySelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlaygroundExpenseHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "description" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["playgroundExpenseHistory"]>
export type PlaygroundExpenseHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type PlaygroundExpenseHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type PlaygroundExpenseHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $PlaygroundExpenseHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlaygroundExpenseHistory"
  objects: {
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    description: string
    amount: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["playgroundExpenseHistory"]>
  composites: {}
}

export type PlaygroundExpenseHistoryGetPayload<S extends boolean | null | undefined | PlaygroundExpenseHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload, S>

export type PlaygroundExpenseHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlaygroundExpenseHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlaygroundExpenseHistoryCountAggregateInputType | true
  }

export interface PlaygroundExpenseHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaygroundExpenseHistory'], meta: { name: 'PlaygroundExpenseHistory' } }
  /**
   * Find zero or one PlaygroundExpenseHistory that matches the filter.
   * @param {PlaygroundExpenseHistoryFindUniqueArgs} args - Arguments to find a PlaygroundExpenseHistory
   * @example
   * // Get one PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlaygroundExpenseHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlaygroundExpenseHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlaygroundExpenseHistoryFindUniqueOrThrowArgs} args - Arguments to find a PlaygroundExpenseHistory
   * @example
   * // Get one PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlaygroundExpenseHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundExpenseHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryFindFirstArgs} args - Arguments to find a PlaygroundExpenseHistory
   * @example
   * // Get one PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlaygroundExpenseHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundExpenseHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryFindFirstOrThrowArgs} args - Arguments to find a PlaygroundExpenseHistory
   * @example
   * // Get one PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlaygroundExpenseHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlaygroundExpenseHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlaygroundExpenseHistories
   * const playgroundExpenseHistories = await prisma.playgroundExpenseHistory.findMany()
   * 
   * // Get first 10 PlaygroundExpenseHistories
   * const playgroundExpenseHistories = await prisma.playgroundExpenseHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playgroundExpenseHistoryWithIdOnly = await prisma.playgroundExpenseHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlaygroundExpenseHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlaygroundExpenseHistory.
   * @param {PlaygroundExpenseHistoryCreateArgs} args - Arguments to create a PlaygroundExpenseHistory.
   * @example
   * // Create one PlaygroundExpenseHistory
   * const PlaygroundExpenseHistory = await prisma.playgroundExpenseHistory.create({
   *   data: {
   *     // ... data to create a PlaygroundExpenseHistory
   *   }
   * })
   * 
   */
  create<T extends PlaygroundExpenseHistoryCreateArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlaygroundExpenseHistories.
   * @param {PlaygroundExpenseHistoryCreateManyArgs} args - Arguments to create many PlaygroundExpenseHistories.
   * @example
   * // Create many PlaygroundExpenseHistories
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlaygroundExpenseHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlaygroundExpenseHistories and returns the data saved in the database.
   * @param {PlaygroundExpenseHistoryCreateManyAndReturnArgs} args - Arguments to create many PlaygroundExpenseHistories.
   * @example
   * // Create many PlaygroundExpenseHistories
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlaygroundExpenseHistories and only return the `id`
   * const playgroundExpenseHistoryWithIdOnly = await prisma.playgroundExpenseHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlaygroundExpenseHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlaygroundExpenseHistory.
   * @param {PlaygroundExpenseHistoryDeleteArgs} args - Arguments to delete one PlaygroundExpenseHistory.
   * @example
   * // Delete one PlaygroundExpenseHistory
   * const PlaygroundExpenseHistory = await prisma.playgroundExpenseHistory.delete({
   *   where: {
   *     // ... filter to delete one PlaygroundExpenseHistory
   *   }
   * })
   * 
   */
  delete<T extends PlaygroundExpenseHistoryDeleteArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlaygroundExpenseHistory.
   * @param {PlaygroundExpenseHistoryUpdateArgs} args - Arguments to update one PlaygroundExpenseHistory.
   * @example
   * // Update one PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlaygroundExpenseHistoryUpdateArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlaygroundExpenseHistories.
   * @param {PlaygroundExpenseHistoryDeleteManyArgs} args - Arguments to filter PlaygroundExpenseHistories to delete.
   * @example
   * // Delete a few PlaygroundExpenseHistories
   * const { count } = await prisma.playgroundExpenseHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlaygroundExpenseHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundExpenseHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundExpenseHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlaygroundExpenseHistories
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlaygroundExpenseHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundExpenseHistories and returns the data updated in the database.
   * @param {PlaygroundExpenseHistoryUpdateManyAndReturnArgs} args - Arguments to update many PlaygroundExpenseHistories.
   * @example
   * // Update many PlaygroundExpenseHistories
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlaygroundExpenseHistories and only return the `id`
   * const playgroundExpenseHistoryWithIdOnly = await prisma.playgroundExpenseHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlaygroundExpenseHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlaygroundExpenseHistory.
   * @param {PlaygroundExpenseHistoryUpsertArgs} args - Arguments to update or create a PlaygroundExpenseHistory.
   * @example
   * // Update or create a PlaygroundExpenseHistory
   * const playgroundExpenseHistory = await prisma.playgroundExpenseHistory.upsert({
   *   create: {
   *     // ... data to create a PlaygroundExpenseHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlaygroundExpenseHistory we want to update
   *   }
   * })
   */
  upsert<T extends PlaygroundExpenseHistoryUpsertArgs>(args: Prisma.SelectSubset<T, PlaygroundExpenseHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__PlaygroundExpenseHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlaygroundExpenseHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryCountArgs} args - Arguments to filter PlaygroundExpenseHistories to count.
   * @example
   * // Count the number of PlaygroundExpenseHistories
   * const count = await prisma.playgroundExpenseHistory.count({
   *   where: {
   *     // ... the filter for the PlaygroundExpenseHistories we want to count
   *   }
   * })
  **/
  count<T extends PlaygroundExpenseHistoryCountArgs>(
    args?: Prisma.Subset<T, PlaygroundExpenseHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlaygroundExpenseHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlaygroundExpenseHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlaygroundExpenseHistoryAggregateArgs>(args: Prisma.Subset<T, PlaygroundExpenseHistoryAggregateArgs>): Prisma.PrismaPromise<GetPlaygroundExpenseHistoryAggregateType<T>>

  /**
   * Group by PlaygroundExpenseHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundExpenseHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlaygroundExpenseHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlaygroundExpenseHistoryGroupByArgs['orderBy'] }
      : { orderBy?: PlaygroundExpenseHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlaygroundExpenseHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaygroundExpenseHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlaygroundExpenseHistory model
 */
readonly fields: PlaygroundExpenseHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlaygroundExpenseHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlaygroundExpenseHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlaygroundExpenseHistory model
 */
export interface PlaygroundExpenseHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"PlaygroundExpenseHistory", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"PlaygroundExpenseHistory", 'String'>
  readonly description: Prisma.FieldRef<"PlaygroundExpenseHistory", 'String'>
  readonly amount: Prisma.FieldRef<"PlaygroundExpenseHistory", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PlaygroundExpenseHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlaygroundExpenseHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlaygroundExpenseHistory findUnique
 */
export type PlaygroundExpenseHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundExpenseHistory to fetch.
   */
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
}

/**
 * PlaygroundExpenseHistory findUniqueOrThrow
 */
export type PlaygroundExpenseHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundExpenseHistory to fetch.
   */
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
}

/**
 * PlaygroundExpenseHistory findFirst
 */
export type PlaygroundExpenseHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundExpenseHistory to fetch.
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundExpenseHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput | Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundExpenseHistories.
   */
  cursor?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundExpenseHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundExpenseHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundExpenseHistories.
   */
  distinct?: Prisma.PlaygroundExpenseHistoryScalarFieldEnum | Prisma.PlaygroundExpenseHistoryScalarFieldEnum[]
}

/**
 * PlaygroundExpenseHistory findFirstOrThrow
 */
export type PlaygroundExpenseHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundExpenseHistory to fetch.
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundExpenseHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput | Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundExpenseHistories.
   */
  cursor?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundExpenseHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundExpenseHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundExpenseHistories.
   */
  distinct?: Prisma.PlaygroundExpenseHistoryScalarFieldEnum | Prisma.PlaygroundExpenseHistoryScalarFieldEnum[]
}

/**
 * PlaygroundExpenseHistory findMany
 */
export type PlaygroundExpenseHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundExpenseHistories to fetch.
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundExpenseHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput | Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlaygroundExpenseHistories.
   */
  cursor?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundExpenseHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundExpenseHistories.
   */
  skip?: number
  distinct?: Prisma.PlaygroundExpenseHistoryScalarFieldEnum | Prisma.PlaygroundExpenseHistoryScalarFieldEnum[]
}

/**
 * PlaygroundExpenseHistory create
 */
export type PlaygroundExpenseHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a PlaygroundExpenseHistory.
   */
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateInput>
}

/**
 * PlaygroundExpenseHistory createMany
 */
export type PlaygroundExpenseHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlaygroundExpenseHistories.
   */
  data: Prisma.PlaygroundExpenseHistoryCreateManyInput | Prisma.PlaygroundExpenseHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlaygroundExpenseHistory createManyAndReturn
 */
export type PlaygroundExpenseHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many PlaygroundExpenseHistories.
   */
  data: Prisma.PlaygroundExpenseHistoryCreateManyInput | Prisma.PlaygroundExpenseHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundExpenseHistory update
 */
export type PlaygroundExpenseHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a PlaygroundExpenseHistory.
   */
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateInput>
  /**
   * Choose, which PlaygroundExpenseHistory to update.
   */
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
}

/**
 * PlaygroundExpenseHistory updateMany
 */
export type PlaygroundExpenseHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlaygroundExpenseHistories.
   */
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateManyMutationInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundExpenseHistories to update
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * Limit how many PlaygroundExpenseHistories to update.
   */
  limit?: number
}

/**
 * PlaygroundExpenseHistory updateManyAndReturn
 */
export type PlaygroundExpenseHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * The data used to update PlaygroundExpenseHistories.
   */
  data: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateManyMutationInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundExpenseHistories to update
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * Limit how many PlaygroundExpenseHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundExpenseHistory upsert
 */
export type PlaygroundExpenseHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the PlaygroundExpenseHistory to update in case it exists.
   */
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  /**
   * In case the PlaygroundExpenseHistory found by the `where` argument doesn't exist, create a new PlaygroundExpenseHistory with this data.
   */
  create: Prisma.XOR<Prisma.PlaygroundExpenseHistoryCreateInput, Prisma.PlaygroundExpenseHistoryUncheckedCreateInput>
  /**
   * In case the PlaygroundExpenseHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlaygroundExpenseHistoryUpdateInput, Prisma.PlaygroundExpenseHistoryUncheckedUpdateInput>
}

/**
 * PlaygroundExpenseHistory delete
 */
export type PlaygroundExpenseHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  /**
   * Filter which PlaygroundExpenseHistory to delete.
   */
  where: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
}

/**
 * PlaygroundExpenseHistory deleteMany
 */
export type PlaygroundExpenseHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundExpenseHistories to delete
   */
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  /**
   * Limit how many PlaygroundExpenseHistories to delete.
   */
  limit?: number
}

/**
 * PlaygroundExpenseHistory without action
 */
export type PlaygroundExpenseHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
}
