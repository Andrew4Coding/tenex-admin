
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AdWatchHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AdWatchHistory
 * 
 */
export type AdWatchHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$AdWatchHistoryPayload>

export type AggregateAdWatchHistory = {
  _count: AdWatchHistoryCountAggregateOutputType | null
  _min: AdWatchHistoryMinAggregateOutputType | null
  _max: AdWatchHistoryMaxAggregateOutputType | null
}

export type AdWatchHistoryMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  adId: string | null
  watchedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdWatchHistoryMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  adId: string | null
  watchedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdWatchHistoryCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  adId: number
  watchedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AdWatchHistoryMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  watchedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type AdWatchHistoryMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  watchedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type AdWatchHistoryCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  watchedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AdWatchHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdWatchHistory to aggregate.
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchHistories to fetch.
   */
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AdWatchHistories
  **/
  _count?: true | AdWatchHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdWatchHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdWatchHistoryMaxAggregateInputType
}

export type GetAdWatchHistoryAggregateType<T extends AdWatchHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateAdWatchHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdWatchHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateAdWatchHistory[P]>
}




export type AdWatchHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchHistoryWhereInput
  orderBy?: Prisma.AdWatchHistoryOrderByWithAggregationInput | Prisma.AdWatchHistoryOrderByWithAggregationInput[]
  by: Prisma.AdWatchHistoryScalarFieldEnum[] | Prisma.AdWatchHistoryScalarFieldEnum
  having?: Prisma.AdWatchHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdWatchHistoryCountAggregateInputType | true
  _min?: AdWatchHistoryMinAggregateInputType
  _max?: AdWatchHistoryMaxAggregateInputType
}

export type AdWatchHistoryGroupByOutputType = {
  id: string
  userPlaygroundId: string
  adId: string
  watchedAt: Date
  createdAt: Date
  updatedAt: Date
  _count: AdWatchHistoryCountAggregateOutputType | null
  _min: AdWatchHistoryMinAggregateOutputType | null
  _max: AdWatchHistoryMaxAggregateOutputType | null
}

type GetAdWatchHistoryGroupByPayload<T extends AdWatchHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdWatchHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdWatchHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdWatchHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdWatchHistoryGroupByOutputType[P]>
      }
    >
  > 



export type AdWatchHistoryWhereInput = {
  AND?: Prisma.AdWatchHistoryWhereInput | Prisma.AdWatchHistoryWhereInput[]
  OR?: Prisma.AdWatchHistoryWhereInput[]
  NOT?: Prisma.AdWatchHistoryWhereInput | Prisma.AdWatchHistoryWhereInput[]
  id?: Prisma.StringFilter<"AdWatchHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"AdWatchHistory"> | string
  adId?: Prisma.StringFilter<"AdWatchHistory"> | string
  watchedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  Advertisement?: Prisma.XOR<Prisma.AdvertisementScalarRelationFilter, Prisma.AdvertisementWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type AdWatchHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  watchedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Advertisement?: Prisma.AdvertisementOrderByWithRelationInput
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type AdWatchHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AdWatchHistoryWhereInput | Prisma.AdWatchHistoryWhereInput[]
  OR?: Prisma.AdWatchHistoryWhereInput[]
  NOT?: Prisma.AdWatchHistoryWhereInput | Prisma.AdWatchHistoryWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"AdWatchHistory"> | string
  adId?: Prisma.StringFilter<"AdWatchHistory"> | string
  watchedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  Advertisement?: Prisma.XOR<Prisma.AdvertisementScalarRelationFilter, Prisma.AdvertisementWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id">

export type AdWatchHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  watchedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AdWatchHistoryCountOrderByAggregateInput
  _max?: Prisma.AdWatchHistoryMaxOrderByAggregateInput
  _min?: Prisma.AdWatchHistoryMinOrderByAggregateInput
}

export type AdWatchHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdWatchHistoryScalarWhereWithAggregatesInput | Prisma.AdWatchHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdWatchHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdWatchHistoryScalarWhereWithAggregatesInput | Prisma.AdWatchHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AdWatchHistory"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"AdWatchHistory"> | string
  adId?: Prisma.StringWithAggregatesFilter<"AdWatchHistory"> | string
  watchedAt?: Prisma.DateTimeWithAggregatesFilter<"AdWatchHistory"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AdWatchHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AdWatchHistory"> | Date | string
}

export type AdWatchHistoryCreateInput = {
  id: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  Advertisement: Prisma.AdvertisementCreateNestedOneWithoutAdWatchHistoryInput
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutAdWatchHistoryInput
}

export type AdWatchHistoryUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  adId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Advertisement?: Prisma.AdvertisementUpdateOneRequiredWithoutAdWatchHistoryNestedInput
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutAdWatchHistoryNestedInput
}

export type AdWatchHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryCreateManyInput = {
  id: string
  userPlaygroundId: string
  adId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  watchedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  watchedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  watchedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchHistoryListRelationFilter = {
  every?: Prisma.AdWatchHistoryWhereInput
  some?: Prisma.AdWatchHistoryWhereInput
  none?: Prisma.AdWatchHistoryWhereInput
}

export type AdWatchHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type AdWatchHistoryCreateNestedManyWithoutAdvertisementInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchHistoryCreateWithoutAdvertisementInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyAdvertisementInputEnvelope
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
}

export type AdWatchHistoryUncheckedCreateNestedManyWithoutAdvertisementInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchHistoryCreateWithoutAdvertisementInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyAdvertisementInputEnvelope
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
}

export type AdWatchHistoryUpdateManyWithoutAdvertisementNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchHistoryCreateWithoutAdvertisementInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput[]
  upsert?: Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyAdvertisementInputEnvelope
  set?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  disconnect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  delete?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  update?: Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutAdvertisementInput[]
  updateMany?: Prisma.AdWatchHistoryUpdateManyWithWhereWithoutAdvertisementInput | Prisma.AdWatchHistoryUpdateManyWithWhereWithoutAdvertisementInput[]
  deleteMany?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
}

export type AdWatchHistoryUncheckedUpdateManyWithoutAdvertisementNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchHistoryCreateWithoutAdvertisementInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchHistoryCreateOrConnectWithoutAdvertisementInput[]
  upsert?: Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyAdvertisementInputEnvelope
  set?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  disconnect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  delete?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  update?: Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutAdvertisementInput[]
  updateMany?: Prisma.AdWatchHistoryUpdateManyWithWhereWithoutAdvertisementInput | Prisma.AdWatchHistoryUpdateManyWithWhereWithoutAdvertisementInput[]
  deleteMany?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
}

export type AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
}

export type AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
}

export type AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  disconnect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  delete?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  update?: Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.AdWatchHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
}

export type AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  disconnect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  delete?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  connect?: Prisma.AdWatchHistoryWhereUniqueInput | Prisma.AdWatchHistoryWhereUniqueInput[]
  update?: Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.AdWatchHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.AdWatchHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
}

export type AdWatchHistoryCreateWithoutAdvertisementInput = {
  id: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutAdWatchHistoryInput
}

export type AdWatchHistoryUncheckedCreateWithoutAdvertisementInput = {
  id: string
  userPlaygroundId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryCreateOrConnectWithoutAdvertisementInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput>
}

export type AdWatchHistoryCreateManyAdvertisementInputEnvelope = {
  data: Prisma.AdWatchHistoryCreateManyAdvertisementInput | Prisma.AdWatchHistoryCreateManyAdvertisementInput[]
  skipDuplicates?: boolean
}

export type AdWatchHistoryUpsertWithWhereUniqueWithoutAdvertisementInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.AdWatchHistoryUpdateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedUpdateWithoutAdvertisementInput>
  create: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedCreateWithoutAdvertisementInput>
}

export type AdWatchHistoryUpdateWithWhereUniqueWithoutAdvertisementInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateWithoutAdvertisementInput, Prisma.AdWatchHistoryUncheckedUpdateWithoutAdvertisementInput>
}

export type AdWatchHistoryUpdateManyWithWhereWithoutAdvertisementInput = {
  where: Prisma.AdWatchHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateManyMutationInput, Prisma.AdWatchHistoryUncheckedUpdateManyWithoutAdvertisementInput>
}

export type AdWatchHistoryScalarWhereInput = {
  AND?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
  OR?: Prisma.AdWatchHistoryScalarWhereInput[]
  NOT?: Prisma.AdWatchHistoryScalarWhereInput | Prisma.AdWatchHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"AdWatchHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"AdWatchHistory"> | string
  adId?: Prisma.StringFilter<"AdWatchHistory"> | string
  watchedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchHistory"> | Date | string
}

export type AdWatchHistoryCreateWithoutUserPlaygroundInput = {
  id: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  Advertisement: Prisma.AdvertisementCreateNestedOneWithoutAdWatchHistoryInput
}

export type AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  adId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type AdWatchHistoryCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.AdWatchHistoryCreateManyUserPlaygroundInput | Prisma.AdWatchHistoryCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type AdWatchHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.AdWatchHistoryUpdateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.AdWatchHistoryCreateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type AdWatchHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateWithoutUserPlaygroundInput, Prisma.AdWatchHistoryUncheckedUpdateWithoutUserPlaygroundInput>
}

export type AdWatchHistoryUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateManyMutationInput, Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type AdWatchHistoryCreateManyAdvertisementInput = {
  id: string
  userPlaygroundId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryUpdateWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutAdWatchHistoryNestedInput
}

export type AdWatchHistoryUncheckedUpdateWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryUncheckedUpdateManyWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryCreateManyUserPlaygroundInput = {
  id: string
  adId: string
  watchedAt: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchHistoryUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Advertisement?: Prisma.AdvertisementUpdateOneRequiredWithoutAdWatchHistoryNestedInput
}

export type AdWatchHistoryUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  watchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AdWatchHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  watchedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchHistory"]>

export type AdWatchHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  watchedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchHistory"]>

export type AdWatchHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  watchedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchHistory"]>

export type AdWatchHistorySelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  watchedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AdWatchHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "adId" | "watchedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["adWatchHistory"]>
export type AdWatchHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type AdWatchHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type AdWatchHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $AdWatchHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AdWatchHistory"
  objects: {
    Advertisement: Prisma.$AdvertisementPayload<ExtArgs>
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    adId: string
    watchedAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["adWatchHistory"]>
  composites: {}
}

export type AdWatchHistoryGetPayload<S extends boolean | null | undefined | AdWatchHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload, S>

export type AdWatchHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdWatchHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdWatchHistoryCountAggregateInputType | true
  }

export interface AdWatchHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdWatchHistory'], meta: { name: 'AdWatchHistory' } }
  /**
   * Find zero or one AdWatchHistory that matches the filter.
   * @param {AdWatchHistoryFindUniqueArgs} args - Arguments to find a AdWatchHistory
   * @example
   * // Get one AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdWatchHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AdWatchHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdWatchHistoryFindUniqueOrThrowArgs} args - Arguments to find a AdWatchHistory
   * @example
   * // Get one AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdWatchHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdWatchHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryFindFirstArgs} args - Arguments to find a AdWatchHistory
   * @example
   * // Get one AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdWatchHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdWatchHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryFindFirstOrThrowArgs} args - Arguments to find a AdWatchHistory
   * @example
   * // Get one AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdWatchHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AdWatchHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdWatchHistories
   * const adWatchHistories = await prisma.adWatchHistory.findMany()
   * 
   * // Get first 10 AdWatchHistories
   * const adWatchHistories = await prisma.adWatchHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adWatchHistoryWithIdOnly = await prisma.adWatchHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdWatchHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AdWatchHistory.
   * @param {AdWatchHistoryCreateArgs} args - Arguments to create a AdWatchHistory.
   * @example
   * // Create one AdWatchHistory
   * const AdWatchHistory = await prisma.adWatchHistory.create({
   *   data: {
   *     // ... data to create a AdWatchHistory
   *   }
   * })
   * 
   */
  create<T extends AdWatchHistoryCreateArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AdWatchHistories.
   * @param {AdWatchHistoryCreateManyArgs} args - Arguments to create many AdWatchHistories.
   * @example
   * // Create many AdWatchHistories
   * const adWatchHistory = await prisma.adWatchHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdWatchHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AdWatchHistories and returns the data saved in the database.
   * @param {AdWatchHistoryCreateManyAndReturnArgs} args - Arguments to create many AdWatchHistories.
   * @example
   * // Create many AdWatchHistories
   * const adWatchHistory = await prisma.adWatchHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AdWatchHistories and only return the `id`
   * const adWatchHistoryWithIdOnly = await prisma.adWatchHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdWatchHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AdWatchHistory.
   * @param {AdWatchHistoryDeleteArgs} args - Arguments to delete one AdWatchHistory.
   * @example
   * // Delete one AdWatchHistory
   * const AdWatchHistory = await prisma.adWatchHistory.delete({
   *   where: {
   *     // ... filter to delete one AdWatchHistory
   *   }
   * })
   * 
   */
  delete<T extends AdWatchHistoryDeleteArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AdWatchHistory.
   * @param {AdWatchHistoryUpdateArgs} args - Arguments to update one AdWatchHistory.
   * @example
   * // Update one AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdWatchHistoryUpdateArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AdWatchHistories.
   * @param {AdWatchHistoryDeleteManyArgs} args - Arguments to filter AdWatchHistories to delete.
   * @example
   * // Delete a few AdWatchHistories
   * const { count } = await prisma.adWatchHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdWatchHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdWatchHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdWatchHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdWatchHistories
   * const adWatchHistory = await prisma.adWatchHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdWatchHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdWatchHistories and returns the data updated in the database.
   * @param {AdWatchHistoryUpdateManyAndReturnArgs} args - Arguments to update many AdWatchHistories.
   * @example
   * // Update many AdWatchHistories
   * const adWatchHistory = await prisma.adWatchHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AdWatchHistories and only return the `id`
   * const adWatchHistoryWithIdOnly = await prisma.adWatchHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdWatchHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AdWatchHistory.
   * @param {AdWatchHistoryUpsertArgs} args - Arguments to update or create a AdWatchHistory.
   * @example
   * // Update or create a AdWatchHistory
   * const adWatchHistory = await prisma.adWatchHistory.upsert({
   *   create: {
   *     // ... data to create a AdWatchHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdWatchHistory we want to update
   *   }
   * })
   */
  upsert<T extends AdWatchHistoryUpsertArgs>(args: Prisma.SelectSubset<T, AdWatchHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__AdWatchHistoryClient<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AdWatchHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryCountArgs} args - Arguments to filter AdWatchHistories to count.
   * @example
   * // Count the number of AdWatchHistories
   * const count = await prisma.adWatchHistory.count({
   *   where: {
   *     // ... the filter for the AdWatchHistories we want to count
   *   }
   * })
  **/
  count<T extends AdWatchHistoryCountArgs>(
    args?: Prisma.Subset<T, AdWatchHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdWatchHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AdWatchHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdWatchHistoryAggregateArgs>(args: Prisma.Subset<T, AdWatchHistoryAggregateArgs>): Prisma.PrismaPromise<GetAdWatchHistoryAggregateType<T>>

  /**
   * Group by AdWatchHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdWatchHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdWatchHistoryGroupByArgs['orderBy'] }
      : { orderBy?: AdWatchHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdWatchHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdWatchHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AdWatchHistory model
 */
readonly fields: AdWatchHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdWatchHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdWatchHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Advertisement<T extends Prisma.AdvertisementDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AdvertisementDefaultArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AdWatchHistory model
 */
export interface AdWatchHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"AdWatchHistory", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"AdWatchHistory", 'String'>
  readonly adId: Prisma.FieldRef<"AdWatchHistory", 'String'>
  readonly watchedAt: Prisma.FieldRef<"AdWatchHistory", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"AdWatchHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AdWatchHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AdWatchHistory findUnique
 */
export type AdWatchHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchHistory to fetch.
   */
  where: Prisma.AdWatchHistoryWhereUniqueInput
}

/**
 * AdWatchHistory findUniqueOrThrow
 */
export type AdWatchHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchHistory to fetch.
   */
  where: Prisma.AdWatchHistoryWhereUniqueInput
}

/**
 * AdWatchHistory findFirst
 */
export type AdWatchHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchHistory to fetch.
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchHistories to fetch.
   */
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdWatchHistories.
   */
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdWatchHistories.
   */
  distinct?: Prisma.AdWatchHistoryScalarFieldEnum | Prisma.AdWatchHistoryScalarFieldEnum[]
}

/**
 * AdWatchHistory findFirstOrThrow
 */
export type AdWatchHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchHistory to fetch.
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchHistories to fetch.
   */
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdWatchHistories.
   */
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdWatchHistories.
   */
  distinct?: Prisma.AdWatchHistoryScalarFieldEnum | Prisma.AdWatchHistoryScalarFieldEnum[]
}

/**
 * AdWatchHistory findMany
 */
export type AdWatchHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchHistories to fetch.
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchHistories to fetch.
   */
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AdWatchHistories.
   */
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchHistories.
   */
  skip?: number
  distinct?: Prisma.AdWatchHistoryScalarFieldEnum | Prisma.AdWatchHistoryScalarFieldEnum[]
}

/**
 * AdWatchHistory create
 */
export type AdWatchHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a AdWatchHistory.
   */
  data: Prisma.XOR<Prisma.AdWatchHistoryCreateInput, Prisma.AdWatchHistoryUncheckedCreateInput>
}

/**
 * AdWatchHistory createMany
 */
export type AdWatchHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AdWatchHistories.
   */
  data: Prisma.AdWatchHistoryCreateManyInput | Prisma.AdWatchHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdWatchHistory createManyAndReturn
 */
export type AdWatchHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many AdWatchHistories.
   */
  data: Prisma.AdWatchHistoryCreateManyInput | Prisma.AdWatchHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AdWatchHistory update
 */
export type AdWatchHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a AdWatchHistory.
   */
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateInput, Prisma.AdWatchHistoryUncheckedUpdateInput>
  /**
   * Choose, which AdWatchHistory to update.
   */
  where: Prisma.AdWatchHistoryWhereUniqueInput
}

/**
 * AdWatchHistory updateMany
 */
export type AdWatchHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AdWatchHistories.
   */
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateManyMutationInput, Prisma.AdWatchHistoryUncheckedUpdateManyInput>
  /**
   * Filter which AdWatchHistories to update
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * Limit how many AdWatchHistories to update.
   */
  limit?: number
}

/**
 * AdWatchHistory updateManyAndReturn
 */
export type AdWatchHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * The data used to update AdWatchHistories.
   */
  data: Prisma.XOR<Prisma.AdWatchHistoryUpdateManyMutationInput, Prisma.AdWatchHistoryUncheckedUpdateManyInput>
  /**
   * Filter which AdWatchHistories to update
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * Limit how many AdWatchHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AdWatchHistory upsert
 */
export type AdWatchHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the AdWatchHistory to update in case it exists.
   */
  where: Prisma.AdWatchHistoryWhereUniqueInput
  /**
   * In case the AdWatchHistory found by the `where` argument doesn't exist, create a new AdWatchHistory with this data.
   */
  create: Prisma.XOR<Prisma.AdWatchHistoryCreateInput, Prisma.AdWatchHistoryUncheckedCreateInput>
  /**
   * In case the AdWatchHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdWatchHistoryUpdateInput, Prisma.AdWatchHistoryUncheckedUpdateInput>
}

/**
 * AdWatchHistory delete
 */
export type AdWatchHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  /**
   * Filter which AdWatchHistory to delete.
   */
  where: Prisma.AdWatchHistoryWhereUniqueInput
}

/**
 * AdWatchHistory deleteMany
 */
export type AdWatchHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdWatchHistories to delete
   */
  where?: Prisma.AdWatchHistoryWhereInput
  /**
   * Limit how many AdWatchHistories to delete.
   */
  limit?: number
}

/**
 * AdWatchHistory without action
 */
export type AdWatchHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
}
