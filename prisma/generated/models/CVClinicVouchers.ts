
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CVClinicVouchers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CVClinicVouchers
 * 
 */
export type CVClinicVouchersModel = runtime.Types.Result.DefaultSelection<Prisma.$CVClinicVouchersPayload>

export type AggregateCVClinicVouchers = {
  _count: CVClinicVouchersCountAggregateOutputType | null
  _min: CVClinicVouchersMinAggregateOutputType | null
  _max: CVClinicVouchersMaxAggregateOutputType | null
}

export type CVClinicVouchersMinAggregateOutputType = {
  code: string | null
}

export type CVClinicVouchersMaxAggregateOutputType = {
  code: string | null
}

export type CVClinicVouchersCountAggregateOutputType = {
  code: number
  _all: number
}


export type CVClinicVouchersMinAggregateInputType = {
  code?: true
}

export type CVClinicVouchersMaxAggregateInputType = {
  code?: true
}

export type CVClinicVouchersCountAggregateInputType = {
  code?: true
  _all?: true
}

export type CVClinicVouchersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CVClinicVouchers to aggregate.
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicVouchers to fetch.
   */
  orderBy?: Prisma.CVClinicVouchersOrderByWithRelationInput | Prisma.CVClinicVouchersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CVClinicVouchersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicVouchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicVouchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CVClinicVouchers
  **/
  _count?: true | CVClinicVouchersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CVClinicVouchersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CVClinicVouchersMaxAggregateInputType
}

export type GetCVClinicVouchersAggregateType<T extends CVClinicVouchersAggregateArgs> = {
      [P in keyof T & keyof AggregateCVClinicVouchers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCVClinicVouchers[P]>
    : Prisma.GetScalarType<T[P], AggregateCVClinicVouchers[P]>
}




export type CVClinicVouchersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CVClinicVouchersWhereInput
  orderBy?: Prisma.CVClinicVouchersOrderByWithAggregationInput | Prisma.CVClinicVouchersOrderByWithAggregationInput[]
  by: Prisma.CVClinicVouchersScalarFieldEnum[] | Prisma.CVClinicVouchersScalarFieldEnum
  having?: Prisma.CVClinicVouchersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CVClinicVouchersCountAggregateInputType | true
  _min?: CVClinicVouchersMinAggregateInputType
  _max?: CVClinicVouchersMaxAggregateInputType
}

export type CVClinicVouchersGroupByOutputType = {
  code: string
  _count: CVClinicVouchersCountAggregateOutputType | null
  _min: CVClinicVouchersMinAggregateOutputType | null
  _max: CVClinicVouchersMaxAggregateOutputType | null
}

type GetCVClinicVouchersGroupByPayload<T extends CVClinicVouchersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CVClinicVouchersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CVClinicVouchersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CVClinicVouchersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CVClinicVouchersGroupByOutputType[P]>
      }
    >
  > 



export type CVClinicVouchersWhereInput = {
  AND?: Prisma.CVClinicVouchersWhereInput | Prisma.CVClinicVouchersWhereInput[]
  OR?: Prisma.CVClinicVouchersWhereInput[]
  NOT?: Prisma.CVClinicVouchersWhereInput | Prisma.CVClinicVouchersWhereInput[]
  code?: Prisma.StringFilter<"CVClinicVouchers"> | string
  CVClinicClaim?: Prisma.CVClinicClaimListRelationFilter
}

export type CVClinicVouchersOrderByWithRelationInput = {
  code?: Prisma.SortOrder
  CVClinicClaim?: Prisma.CVClinicClaimOrderByRelationAggregateInput
}

export type CVClinicVouchersWhereUniqueInput = Prisma.AtLeast<{
  code?: string
  AND?: Prisma.CVClinicVouchersWhereInput | Prisma.CVClinicVouchersWhereInput[]
  OR?: Prisma.CVClinicVouchersWhereInput[]
  NOT?: Prisma.CVClinicVouchersWhereInput | Prisma.CVClinicVouchersWhereInput[]
  CVClinicClaim?: Prisma.CVClinicClaimListRelationFilter
}, "code">

export type CVClinicVouchersOrderByWithAggregationInput = {
  code?: Prisma.SortOrder
  _count?: Prisma.CVClinicVouchersCountOrderByAggregateInput
  _max?: Prisma.CVClinicVouchersMaxOrderByAggregateInput
  _min?: Prisma.CVClinicVouchersMinOrderByAggregateInput
}

export type CVClinicVouchersScalarWhereWithAggregatesInput = {
  AND?: Prisma.CVClinicVouchersScalarWhereWithAggregatesInput | Prisma.CVClinicVouchersScalarWhereWithAggregatesInput[]
  OR?: Prisma.CVClinicVouchersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CVClinicVouchersScalarWhereWithAggregatesInput | Prisma.CVClinicVouchersScalarWhereWithAggregatesInput[]
  code?: Prisma.StringWithAggregatesFilter<"CVClinicVouchers"> | string
}

export type CVClinicVouchersCreateInput = {
  code: string
  CVClinicClaim?: Prisma.CVClinicClaimCreateNestedManyWithoutCVClinicVouchersInput
}

export type CVClinicVouchersUncheckedCreateInput = {
  code: string
  CVClinicClaim?: Prisma.CVClinicClaimUncheckedCreateNestedManyWithoutCVClinicVouchersInput
}

export type CVClinicVouchersUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  CVClinicClaim?: Prisma.CVClinicClaimUpdateManyWithoutCVClinicVouchersNestedInput
}

export type CVClinicVouchersUncheckedUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  CVClinicClaim?: Prisma.CVClinicClaimUncheckedUpdateManyWithoutCVClinicVouchersNestedInput
}

export type CVClinicVouchersCreateManyInput = {
  code: string
}

export type CVClinicVouchersUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CVClinicVouchersUncheckedUpdateManyInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CVClinicVouchersScalarRelationFilter = {
  is?: Prisma.CVClinicVouchersWhereInput
  isNot?: Prisma.CVClinicVouchersWhereInput
}

export type CVClinicVouchersCountOrderByAggregateInput = {
  code?: Prisma.SortOrder
}

export type CVClinicVouchersMaxOrderByAggregateInput = {
  code?: Prisma.SortOrder
}

export type CVClinicVouchersMinOrderByAggregateInput = {
  code?: Prisma.SortOrder
}

export type CVClinicVouchersCreateNestedOneWithoutCVClinicClaimInput = {
  create?: Prisma.XOR<Prisma.CVClinicVouchersCreateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedCreateWithoutCVClinicClaimInput>
  connectOrCreate?: Prisma.CVClinicVouchersCreateOrConnectWithoutCVClinicClaimInput
  connect?: Prisma.CVClinicVouchersWhereUniqueInput
}

export type CVClinicVouchersUpdateOneRequiredWithoutCVClinicClaimNestedInput = {
  create?: Prisma.XOR<Prisma.CVClinicVouchersCreateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedCreateWithoutCVClinicClaimInput>
  connectOrCreate?: Prisma.CVClinicVouchersCreateOrConnectWithoutCVClinicClaimInput
  upsert?: Prisma.CVClinicVouchersUpsertWithoutCVClinicClaimInput
  connect?: Prisma.CVClinicVouchersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CVClinicVouchersUpdateToOneWithWhereWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUpdateWithoutCVClinicClaimInput>, Prisma.CVClinicVouchersUncheckedUpdateWithoutCVClinicClaimInput>
}

export type CVClinicVouchersCreateWithoutCVClinicClaimInput = {
  code: string
}

export type CVClinicVouchersUncheckedCreateWithoutCVClinicClaimInput = {
  code: string
}

export type CVClinicVouchersCreateOrConnectWithoutCVClinicClaimInput = {
  where: Prisma.CVClinicVouchersWhereUniqueInput
  create: Prisma.XOR<Prisma.CVClinicVouchersCreateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedCreateWithoutCVClinicClaimInput>
}

export type CVClinicVouchersUpsertWithoutCVClinicClaimInput = {
  update: Prisma.XOR<Prisma.CVClinicVouchersUpdateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedUpdateWithoutCVClinicClaimInput>
  create: Prisma.XOR<Prisma.CVClinicVouchersCreateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedCreateWithoutCVClinicClaimInput>
  where?: Prisma.CVClinicVouchersWhereInput
}

export type CVClinicVouchersUpdateToOneWithWhereWithoutCVClinicClaimInput = {
  where?: Prisma.CVClinicVouchersWhereInput
  data: Prisma.XOR<Prisma.CVClinicVouchersUpdateWithoutCVClinicClaimInput, Prisma.CVClinicVouchersUncheckedUpdateWithoutCVClinicClaimInput>
}

export type CVClinicVouchersUpdateWithoutCVClinicClaimInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CVClinicVouchersUncheckedUpdateWithoutCVClinicClaimInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type CVClinicVouchersCountOutputType
 */

export type CVClinicVouchersCountOutputType = {
  CVClinicClaim: number
}

export type CVClinicVouchersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CVClinicClaim?: boolean | CVClinicVouchersCountOutputTypeCountCVClinicClaimArgs
}

/**
 * CVClinicVouchersCountOutputType without action
 */
export type CVClinicVouchersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchersCountOutputType
   */
  select?: Prisma.CVClinicVouchersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CVClinicVouchersCountOutputType without action
 */
export type CVClinicVouchersCountOutputTypeCountCVClinicClaimArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CVClinicClaimWhereInput
}


export type CVClinicVouchersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  CVClinicClaim?: boolean | Prisma.CVClinicVouchers$CVClinicClaimArgs<ExtArgs>
  _count?: boolean | Prisma.CVClinicVouchersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cVClinicVouchers"]>

export type CVClinicVouchersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
}, ExtArgs["result"]["cVClinicVouchers"]>

export type CVClinicVouchersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
}, ExtArgs["result"]["cVClinicVouchers"]>

export type CVClinicVouchersSelectScalar = {
  code?: boolean
}

export type CVClinicVouchersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"code", ExtArgs["result"]["cVClinicVouchers"]>
export type CVClinicVouchersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CVClinicClaim?: boolean | Prisma.CVClinicVouchers$CVClinicClaimArgs<ExtArgs>
  _count?: boolean | Prisma.CVClinicVouchersCountOutputTypeDefaultArgs<ExtArgs>
}
export type CVClinicVouchersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CVClinicVouchersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CVClinicVouchersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CVClinicVouchers"
  objects: {
    CVClinicClaim: Prisma.$CVClinicClaimPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    code: string
  }, ExtArgs["result"]["cVClinicVouchers"]>
  composites: {}
}

export type CVClinicVouchersGetPayload<S extends boolean | null | undefined | CVClinicVouchersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload, S>

export type CVClinicVouchersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CVClinicVouchersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CVClinicVouchersCountAggregateInputType | true
  }

export interface CVClinicVouchersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CVClinicVouchers'], meta: { name: 'CVClinicVouchers' } }
  /**
   * Find zero or one CVClinicVouchers that matches the filter.
   * @param {CVClinicVouchersFindUniqueArgs} args - Arguments to find a CVClinicVouchers
   * @example
   * // Get one CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CVClinicVouchersFindUniqueArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CVClinicVouchers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CVClinicVouchersFindUniqueOrThrowArgs} args - Arguments to find a CVClinicVouchers
   * @example
   * // Get one CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CVClinicVouchersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CVClinicVouchers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersFindFirstArgs} args - Arguments to find a CVClinicVouchers
   * @example
   * // Get one CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CVClinicVouchersFindFirstArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersFindFirstArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CVClinicVouchers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersFindFirstOrThrowArgs} args - Arguments to find a CVClinicVouchers
   * @example
   * // Get one CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CVClinicVouchersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CVClinicVouchers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findMany()
   * 
   * // Get first 10 CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.findMany({ take: 10 })
   * 
   * // Only select the `code`
   * const cVClinicVouchersWithCodeOnly = await prisma.cVClinicVouchers.findMany({ select: { code: true } })
   * 
   */
  findMany<T extends CVClinicVouchersFindManyArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CVClinicVouchers.
   * @param {CVClinicVouchersCreateArgs} args - Arguments to create a CVClinicVouchers.
   * @example
   * // Create one CVClinicVouchers
   * const CVClinicVouchers = await prisma.cVClinicVouchers.create({
   *   data: {
   *     // ... data to create a CVClinicVouchers
   *   }
   * })
   * 
   */
  create<T extends CVClinicVouchersCreateArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersCreateArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CVClinicVouchers.
   * @param {CVClinicVouchersCreateManyArgs} args - Arguments to create many CVClinicVouchers.
   * @example
   * // Create many CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CVClinicVouchersCreateManyArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CVClinicVouchers and returns the data saved in the database.
   * @param {CVClinicVouchersCreateManyAndReturnArgs} args - Arguments to create many CVClinicVouchers.
   * @example
   * // Create many CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CVClinicVouchers and only return the `code`
   * const cVClinicVouchersWithCodeOnly = await prisma.cVClinicVouchers.createManyAndReturn({
   *   select: { code: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CVClinicVouchersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CVClinicVouchers.
   * @param {CVClinicVouchersDeleteArgs} args - Arguments to delete one CVClinicVouchers.
   * @example
   * // Delete one CVClinicVouchers
   * const CVClinicVouchers = await prisma.cVClinicVouchers.delete({
   *   where: {
   *     // ... filter to delete one CVClinicVouchers
   *   }
   * })
   * 
   */
  delete<T extends CVClinicVouchersDeleteArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersDeleteArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CVClinicVouchers.
   * @param {CVClinicVouchersUpdateArgs} args - Arguments to update one CVClinicVouchers.
   * @example
   * // Update one CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CVClinicVouchersUpdateArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersUpdateArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CVClinicVouchers.
   * @param {CVClinicVouchersDeleteManyArgs} args - Arguments to filter CVClinicVouchers to delete.
   * @example
   * // Delete a few CVClinicVouchers
   * const { count } = await prisma.cVClinicVouchers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CVClinicVouchersDeleteManyArgs>(args?: Prisma.SelectSubset<T, CVClinicVouchersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CVClinicVouchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CVClinicVouchersUpdateManyArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CVClinicVouchers and returns the data updated in the database.
   * @param {CVClinicVouchersUpdateManyAndReturnArgs} args - Arguments to update many CVClinicVouchers.
   * @example
   * // Update many CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CVClinicVouchers and only return the `code`
   * const cVClinicVouchersWithCodeOnly = await prisma.cVClinicVouchers.updateManyAndReturn({
   *   select: { code: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CVClinicVouchersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CVClinicVouchers.
   * @param {CVClinicVouchersUpsertArgs} args - Arguments to update or create a CVClinicVouchers.
   * @example
   * // Update or create a CVClinicVouchers
   * const cVClinicVouchers = await prisma.cVClinicVouchers.upsert({
   *   create: {
   *     // ... data to create a CVClinicVouchers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CVClinicVouchers we want to update
   *   }
   * })
   */
  upsert<T extends CVClinicVouchersUpsertArgs>(args: Prisma.SelectSubset<T, CVClinicVouchersUpsertArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CVClinicVouchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersCountArgs} args - Arguments to filter CVClinicVouchers to count.
   * @example
   * // Count the number of CVClinicVouchers
   * const count = await prisma.cVClinicVouchers.count({
   *   where: {
   *     // ... the filter for the CVClinicVouchers we want to count
   *   }
   * })
  **/
  count<T extends CVClinicVouchersCountArgs>(
    args?: Prisma.Subset<T, CVClinicVouchersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CVClinicVouchersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CVClinicVouchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CVClinicVouchersAggregateArgs>(args: Prisma.Subset<T, CVClinicVouchersAggregateArgs>): Prisma.PrismaPromise<GetCVClinicVouchersAggregateType<T>>

  /**
   * Group by CVClinicVouchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicVouchersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CVClinicVouchersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CVClinicVouchersGroupByArgs['orderBy'] }
      : { orderBy?: CVClinicVouchersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CVClinicVouchersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCVClinicVouchersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CVClinicVouchers model
 */
readonly fields: CVClinicVouchersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CVClinicVouchers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CVClinicVouchersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  CVClinicClaim<T extends Prisma.CVClinicVouchers$CVClinicClaimArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CVClinicVouchers$CVClinicClaimArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CVClinicVouchers model
 */
export interface CVClinicVouchersFieldRefs {
  readonly code: Prisma.FieldRef<"CVClinicVouchers", 'String'>
}
    

// Custom InputTypes
/**
 * CVClinicVouchers findUnique
 */
export type CVClinicVouchersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicVouchers to fetch.
   */
  where: Prisma.CVClinicVouchersWhereUniqueInput
}

/**
 * CVClinicVouchers findUniqueOrThrow
 */
export type CVClinicVouchersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicVouchers to fetch.
   */
  where: Prisma.CVClinicVouchersWhereUniqueInput
}

/**
 * CVClinicVouchers findFirst
 */
export type CVClinicVouchersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicVouchers to fetch.
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicVouchers to fetch.
   */
  orderBy?: Prisma.CVClinicVouchersOrderByWithRelationInput | Prisma.CVClinicVouchersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CVClinicVouchers.
   */
  cursor?: Prisma.CVClinicVouchersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicVouchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicVouchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CVClinicVouchers.
   */
  distinct?: Prisma.CVClinicVouchersScalarFieldEnum | Prisma.CVClinicVouchersScalarFieldEnum[]
}

/**
 * CVClinicVouchers findFirstOrThrow
 */
export type CVClinicVouchersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicVouchers to fetch.
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicVouchers to fetch.
   */
  orderBy?: Prisma.CVClinicVouchersOrderByWithRelationInput | Prisma.CVClinicVouchersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CVClinicVouchers.
   */
  cursor?: Prisma.CVClinicVouchersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicVouchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicVouchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CVClinicVouchers.
   */
  distinct?: Prisma.CVClinicVouchersScalarFieldEnum | Prisma.CVClinicVouchersScalarFieldEnum[]
}

/**
 * CVClinicVouchers findMany
 */
export type CVClinicVouchersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicVouchers to fetch.
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicVouchers to fetch.
   */
  orderBy?: Prisma.CVClinicVouchersOrderByWithRelationInput | Prisma.CVClinicVouchersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CVClinicVouchers.
   */
  cursor?: Prisma.CVClinicVouchersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicVouchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicVouchers.
   */
  skip?: number
  distinct?: Prisma.CVClinicVouchersScalarFieldEnum | Prisma.CVClinicVouchersScalarFieldEnum[]
}

/**
 * CVClinicVouchers create
 */
export type CVClinicVouchersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * The data needed to create a CVClinicVouchers.
   */
  data: Prisma.XOR<Prisma.CVClinicVouchersCreateInput, Prisma.CVClinicVouchersUncheckedCreateInput>
}

/**
 * CVClinicVouchers createMany
 */
export type CVClinicVouchersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CVClinicVouchers.
   */
  data: Prisma.CVClinicVouchersCreateManyInput | Prisma.CVClinicVouchersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CVClinicVouchers createManyAndReturn
 */
export type CVClinicVouchersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * The data used to create many CVClinicVouchers.
   */
  data: Prisma.CVClinicVouchersCreateManyInput | Prisma.CVClinicVouchersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CVClinicVouchers update
 */
export type CVClinicVouchersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * The data needed to update a CVClinicVouchers.
   */
  data: Prisma.XOR<Prisma.CVClinicVouchersUpdateInput, Prisma.CVClinicVouchersUncheckedUpdateInput>
  /**
   * Choose, which CVClinicVouchers to update.
   */
  where: Prisma.CVClinicVouchersWhereUniqueInput
}

/**
 * CVClinicVouchers updateMany
 */
export type CVClinicVouchersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CVClinicVouchers.
   */
  data: Prisma.XOR<Prisma.CVClinicVouchersUpdateManyMutationInput, Prisma.CVClinicVouchersUncheckedUpdateManyInput>
  /**
   * Filter which CVClinicVouchers to update
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * Limit how many CVClinicVouchers to update.
   */
  limit?: number
}

/**
 * CVClinicVouchers updateManyAndReturn
 */
export type CVClinicVouchersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * The data used to update CVClinicVouchers.
   */
  data: Prisma.XOR<Prisma.CVClinicVouchersUpdateManyMutationInput, Prisma.CVClinicVouchersUncheckedUpdateManyInput>
  /**
   * Filter which CVClinicVouchers to update
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * Limit how many CVClinicVouchers to update.
   */
  limit?: number
}

/**
 * CVClinicVouchers upsert
 */
export type CVClinicVouchersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * The filter to search for the CVClinicVouchers to update in case it exists.
   */
  where: Prisma.CVClinicVouchersWhereUniqueInput
  /**
   * In case the CVClinicVouchers found by the `where` argument doesn't exist, create a new CVClinicVouchers with this data.
   */
  create: Prisma.XOR<Prisma.CVClinicVouchersCreateInput, Prisma.CVClinicVouchersUncheckedCreateInput>
  /**
   * In case the CVClinicVouchers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CVClinicVouchersUpdateInput, Prisma.CVClinicVouchersUncheckedUpdateInput>
}

/**
 * CVClinicVouchers delete
 */
export type CVClinicVouchersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
  /**
   * Filter which CVClinicVouchers to delete.
   */
  where: Prisma.CVClinicVouchersWhereUniqueInput
}

/**
 * CVClinicVouchers deleteMany
 */
export type CVClinicVouchersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CVClinicVouchers to delete
   */
  where?: Prisma.CVClinicVouchersWhereInput
  /**
   * Limit how many CVClinicVouchers to delete.
   */
  limit?: number
}

/**
 * CVClinicVouchers.CVClinicClaim
 */
export type CVClinicVouchers$CVClinicClaimArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  where?: Prisma.CVClinicClaimWhereInput
  orderBy?: Prisma.CVClinicClaimOrderByWithRelationInput | Prisma.CVClinicClaimOrderByWithRelationInput[]
  cursor?: Prisma.CVClinicClaimWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CVClinicClaimScalarFieldEnum | Prisma.CVClinicClaimScalarFieldEnum[]
}

/**
 * CVClinicVouchers without action
 */
export type CVClinicVouchersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicVouchers
   */
  select?: Prisma.CVClinicVouchersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicVouchers
   */
  omit?: Prisma.CVClinicVouchersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicVouchersInclude<ExtArgs> | null
}
