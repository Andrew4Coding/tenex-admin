
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EventDate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EventDate
 * 
 */
export type EventDateModel = runtime.Types.Result.DefaultSelection<Prisma.$EventDatePayload>

export type AggregateEventDate = {
  _count: EventDateCountAggregateOutputType | null
  _min: EventDateMinAggregateOutputType | null
  _max: EventDateMaxAggregateOutputType | null
}

export type EventDateMinAggregateOutputType = {
  id: string | null
  name: string | null
  eventId: string | null
  endDate: Date | null
  startDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  description: string | null
}

export type EventDateMaxAggregateOutputType = {
  id: string | null
  name: string | null
  eventId: string | null
  endDate: Date | null
  startDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  description: string | null
}

export type EventDateCountAggregateOutputType = {
  id: number
  name: number
  eventId: number
  endDate: number
  startDate: number
  createdAt: number
  updatedAt: number
  description: number
  _all: number
}


export type EventDateMinAggregateInputType = {
  id?: true
  name?: true
  eventId?: true
  endDate?: true
  startDate?: true
  createdAt?: true
  updatedAt?: true
  description?: true
}

export type EventDateMaxAggregateInputType = {
  id?: true
  name?: true
  eventId?: true
  endDate?: true
  startDate?: true
  createdAt?: true
  updatedAt?: true
  description?: true
}

export type EventDateCountAggregateInputType = {
  id?: true
  name?: true
  eventId?: true
  endDate?: true
  startDate?: true
  createdAt?: true
  updatedAt?: true
  description?: true
  _all?: true
}

export type EventDateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventDate to aggregate.
   */
  where?: Prisma.EventDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventDates to fetch.
   */
  orderBy?: Prisma.EventDateOrderByWithRelationInput | Prisma.EventDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EventDates
  **/
  _count?: true | EventDateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventDateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventDateMaxAggregateInputType
}

export type GetEventDateAggregateType<T extends EventDateAggregateArgs> = {
      [P in keyof T & keyof AggregateEventDate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEventDate[P]>
    : Prisma.GetScalarType<T[P], AggregateEventDate[P]>
}




export type EventDateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventDateWhereInput
  orderBy?: Prisma.EventDateOrderByWithAggregationInput | Prisma.EventDateOrderByWithAggregationInput[]
  by: Prisma.EventDateScalarFieldEnum[] | Prisma.EventDateScalarFieldEnum
  having?: Prisma.EventDateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventDateCountAggregateInputType | true
  _min?: EventDateMinAggregateInputType
  _max?: EventDateMaxAggregateInputType
}

export type EventDateGroupByOutputType = {
  id: string
  name: string
  eventId: string
  endDate: Date | null
  startDate: Date
  createdAt: Date
  updatedAt: Date
  description: string | null
  _count: EventDateCountAggregateOutputType | null
  _min: EventDateMinAggregateOutputType | null
  _max: EventDateMaxAggregateOutputType | null
}

type GetEventDateGroupByPayload<T extends EventDateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventDateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventDateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventDateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventDateGroupByOutputType[P]>
      }
    >
  > 



export type EventDateWhereInput = {
  AND?: Prisma.EventDateWhereInput | Prisma.EventDateWhereInput[]
  OR?: Prisma.EventDateWhereInput[]
  NOT?: Prisma.EventDateWhereInput | Prisma.EventDateWhereInput[]
  id?: Prisma.StringFilter<"EventDate"> | string
  name?: Prisma.StringFilter<"EventDate"> | string
  eventId?: Prisma.StringFilter<"EventDate"> | string
  endDate?: Prisma.DateTimeNullableFilter<"EventDate"> | Date | string | null
  startDate?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  description?: Prisma.StringNullableFilter<"EventDate"> | string | null
  Event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
}

export type EventDateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  Event?: Prisma.EventOrderByWithRelationInput
}

export type EventDateWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EventDateWhereInput | Prisma.EventDateWhereInput[]
  OR?: Prisma.EventDateWhereInput[]
  NOT?: Prisma.EventDateWhereInput | Prisma.EventDateWhereInput[]
  name?: Prisma.StringFilter<"EventDate"> | string
  eventId?: Prisma.StringFilter<"EventDate"> | string
  endDate?: Prisma.DateTimeNullableFilter<"EventDate"> | Date | string | null
  startDate?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  description?: Prisma.StringNullableFilter<"EventDate"> | string | null
  Event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
}, "id">

export type EventDateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EventDateCountOrderByAggregateInput
  _max?: Prisma.EventDateMaxOrderByAggregateInput
  _min?: Prisma.EventDateMinOrderByAggregateInput
}

export type EventDateScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventDateScalarWhereWithAggregatesInput | Prisma.EventDateScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventDateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventDateScalarWhereWithAggregatesInput | Prisma.EventDateScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EventDate"> | string
  name?: Prisma.StringWithAggregatesFilter<"EventDate"> | string
  eventId?: Prisma.StringWithAggregatesFilter<"EventDate"> | string
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"EventDate"> | Date | string | null
  startDate?: Prisma.DateTimeWithAggregatesFilter<"EventDate"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EventDate"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EventDate"> | Date | string
  description?: Prisma.StringNullableWithAggregatesFilter<"EventDate"> | string | null
}

export type EventDateCreateInput = {
  id: string
  name: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
  Event: Prisma.EventCreateNestedOneWithoutEventDateInput
}

export type EventDateUncheckedCreateInput = {
  id: string
  name: string
  eventId: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
}

export type EventDateUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Event?: Prisma.EventUpdateOneRequiredWithoutEventDateNestedInput
}

export type EventDateUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EventDateCreateManyInput = {
  id: string
  name: string
  eventId: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
}

export type EventDateUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EventDateUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EventDateListRelationFilter = {
  every?: Prisma.EventDateWhereInput
  some?: Prisma.EventDateWhereInput
  none?: Prisma.EventDateWhereInput
}

export type EventDateOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventDateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type EventDateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type EventDateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type EventDateCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput> | Prisma.EventDateCreateWithoutEventInput[] | Prisma.EventDateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventDateCreateOrConnectWithoutEventInput | Prisma.EventDateCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventDateCreateManyEventInputEnvelope
  connect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
}

export type EventDateUncheckedCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput> | Prisma.EventDateCreateWithoutEventInput[] | Prisma.EventDateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventDateCreateOrConnectWithoutEventInput | Prisma.EventDateCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventDateCreateManyEventInputEnvelope
  connect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
}

export type EventDateUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput> | Prisma.EventDateCreateWithoutEventInput[] | Prisma.EventDateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventDateCreateOrConnectWithoutEventInput | Prisma.EventDateCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventDateUpsertWithWhereUniqueWithoutEventInput | Prisma.EventDateUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventDateCreateManyEventInputEnvelope
  set?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  disconnect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  delete?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  connect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  update?: Prisma.EventDateUpdateWithWhereUniqueWithoutEventInput | Prisma.EventDateUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventDateUpdateManyWithWhereWithoutEventInput | Prisma.EventDateUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventDateScalarWhereInput | Prisma.EventDateScalarWhereInput[]
}

export type EventDateUncheckedUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput> | Prisma.EventDateCreateWithoutEventInput[] | Prisma.EventDateUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventDateCreateOrConnectWithoutEventInput | Prisma.EventDateCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventDateUpsertWithWhereUniqueWithoutEventInput | Prisma.EventDateUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventDateCreateManyEventInputEnvelope
  set?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  disconnect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  delete?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  connect?: Prisma.EventDateWhereUniqueInput | Prisma.EventDateWhereUniqueInput[]
  update?: Prisma.EventDateUpdateWithWhereUniqueWithoutEventInput | Prisma.EventDateUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventDateUpdateManyWithWhereWithoutEventInput | Prisma.EventDateUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventDateScalarWhereInput | Prisma.EventDateScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type EventDateCreateWithoutEventInput = {
  id: string
  name: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
}

export type EventDateUncheckedCreateWithoutEventInput = {
  id: string
  name: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
}

export type EventDateCreateOrConnectWithoutEventInput = {
  where: Prisma.EventDateWhereUniqueInput
  create: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput>
}

export type EventDateCreateManyEventInputEnvelope = {
  data: Prisma.EventDateCreateManyEventInput | Prisma.EventDateCreateManyEventInput[]
  skipDuplicates?: boolean
}

export type EventDateUpsertWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventDateWhereUniqueInput
  update: Prisma.XOR<Prisma.EventDateUpdateWithoutEventInput, Prisma.EventDateUncheckedUpdateWithoutEventInput>
  create: Prisma.XOR<Prisma.EventDateCreateWithoutEventInput, Prisma.EventDateUncheckedCreateWithoutEventInput>
}

export type EventDateUpdateWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventDateWhereUniqueInput
  data: Prisma.XOR<Prisma.EventDateUpdateWithoutEventInput, Prisma.EventDateUncheckedUpdateWithoutEventInput>
}

export type EventDateUpdateManyWithWhereWithoutEventInput = {
  where: Prisma.EventDateScalarWhereInput
  data: Prisma.XOR<Prisma.EventDateUpdateManyMutationInput, Prisma.EventDateUncheckedUpdateManyWithoutEventInput>
}

export type EventDateScalarWhereInput = {
  AND?: Prisma.EventDateScalarWhereInput | Prisma.EventDateScalarWhereInput[]
  OR?: Prisma.EventDateScalarWhereInput[]
  NOT?: Prisma.EventDateScalarWhereInput | Prisma.EventDateScalarWhereInput[]
  id?: Prisma.StringFilter<"EventDate"> | string
  name?: Prisma.StringFilter<"EventDate"> | string
  eventId?: Prisma.StringFilter<"EventDate"> | string
  endDate?: Prisma.DateTimeNullableFilter<"EventDate"> | Date | string | null
  startDate?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventDate"> | Date | string
  description?: Prisma.StringNullableFilter<"EventDate"> | string | null
}

export type EventDateCreateManyEventInput = {
  id: string
  name: string
  endDate?: Date | string | null
  startDate: Date | string
  createdAt?: Date | string
  updatedAt: Date | string
  description?: string | null
}

export type EventDateUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EventDateUncheckedUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EventDateUncheckedUpdateManyWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type EventDateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventId?: boolean
  endDate?: boolean
  startDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  description?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventDate"]>

export type EventDateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventId?: boolean
  endDate?: boolean
  startDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  description?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventDate"]>

export type EventDateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  eventId?: boolean
  endDate?: boolean
  startDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  description?: boolean
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventDate"]>

export type EventDateSelectScalar = {
  id?: boolean
  name?: boolean
  eventId?: boolean
  endDate?: boolean
  startDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  description?: boolean
}

export type EventDateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "eventId" | "endDate" | "startDate" | "createdAt" | "updatedAt" | "description", ExtArgs["result"]["eventDate"]>
export type EventDateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type EventDateIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}
export type EventDateIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
}

export type $EventDatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EventDate"
  objects: {
    Event: Prisma.$EventPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    eventId: string
    endDate: Date | null
    startDate: Date
    createdAt: Date
    updatedAt: Date
    description: string | null
  }, ExtArgs["result"]["eventDate"]>
  composites: {}
}

export type EventDateGetPayload<S extends boolean | null | undefined | EventDateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventDatePayload, S>

export type EventDateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventDateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventDateCountAggregateInputType | true
  }

export interface EventDateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventDate'], meta: { name: 'EventDate' } }
  /**
   * Find zero or one EventDate that matches the filter.
   * @param {EventDateFindUniqueArgs} args - Arguments to find a EventDate
   * @example
   * // Get one EventDate
   * const eventDate = await prisma.eventDate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventDateFindUniqueArgs>(args: Prisma.SelectSubset<T, EventDateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EventDate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventDateFindUniqueOrThrowArgs} args - Arguments to find a EventDate
   * @example
   * // Get one EventDate
   * const eventDate = await prisma.eventDate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventDateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventDateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventDate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateFindFirstArgs} args - Arguments to find a EventDate
   * @example
   * // Get one EventDate
   * const eventDate = await prisma.eventDate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventDateFindFirstArgs>(args?: Prisma.SelectSubset<T, EventDateFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventDate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateFindFirstOrThrowArgs} args - Arguments to find a EventDate
   * @example
   * // Get one EventDate
   * const eventDate = await prisma.eventDate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventDateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventDateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EventDates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EventDates
   * const eventDates = await prisma.eventDate.findMany()
   * 
   * // Get first 10 EventDates
   * const eventDates = await prisma.eventDate.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventDateWithIdOnly = await prisma.eventDate.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventDateFindManyArgs>(args?: Prisma.SelectSubset<T, EventDateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EventDate.
   * @param {EventDateCreateArgs} args - Arguments to create a EventDate.
   * @example
   * // Create one EventDate
   * const EventDate = await prisma.eventDate.create({
   *   data: {
   *     // ... data to create a EventDate
   *   }
   * })
   * 
   */
  create<T extends EventDateCreateArgs>(args: Prisma.SelectSubset<T, EventDateCreateArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EventDates.
   * @param {EventDateCreateManyArgs} args - Arguments to create many EventDates.
   * @example
   * // Create many EventDates
   * const eventDate = await prisma.eventDate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventDateCreateManyArgs>(args?: Prisma.SelectSubset<T, EventDateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EventDates and returns the data saved in the database.
   * @param {EventDateCreateManyAndReturnArgs} args - Arguments to create many EventDates.
   * @example
   * // Create many EventDates
   * const eventDate = await prisma.eventDate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EventDates and only return the `id`
   * const eventDateWithIdOnly = await prisma.eventDate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EventDateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EventDateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EventDate.
   * @param {EventDateDeleteArgs} args - Arguments to delete one EventDate.
   * @example
   * // Delete one EventDate
   * const EventDate = await prisma.eventDate.delete({
   *   where: {
   *     // ... filter to delete one EventDate
   *   }
   * })
   * 
   */
  delete<T extends EventDateDeleteArgs>(args: Prisma.SelectSubset<T, EventDateDeleteArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EventDate.
   * @param {EventDateUpdateArgs} args - Arguments to update one EventDate.
   * @example
   * // Update one EventDate
   * const eventDate = await prisma.eventDate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventDateUpdateArgs>(args: Prisma.SelectSubset<T, EventDateUpdateArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EventDates.
   * @param {EventDateDeleteManyArgs} args - Arguments to filter EventDates to delete.
   * @example
   * // Delete a few EventDates
   * const { count } = await prisma.eventDate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventDateDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventDateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventDates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EventDates
   * const eventDate = await prisma.eventDate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventDateUpdateManyArgs>(args: Prisma.SelectSubset<T, EventDateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventDates and returns the data updated in the database.
   * @param {EventDateUpdateManyAndReturnArgs} args - Arguments to update many EventDates.
   * @example
   * // Update many EventDates
   * const eventDate = await prisma.eventDate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EventDates and only return the `id`
   * const eventDateWithIdOnly = await prisma.eventDate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EventDateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EventDateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EventDate.
   * @param {EventDateUpsertArgs} args - Arguments to update or create a EventDate.
   * @example
   * // Update or create a EventDate
   * const eventDate = await prisma.eventDate.upsert({
   *   create: {
   *     // ... data to create a EventDate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EventDate we want to update
   *   }
   * })
   */
  upsert<T extends EventDateUpsertArgs>(args: Prisma.SelectSubset<T, EventDateUpsertArgs<ExtArgs>>): Prisma.Prisma__EventDateClient<runtime.Types.Result.GetResult<Prisma.$EventDatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EventDates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateCountArgs} args - Arguments to filter EventDates to count.
   * @example
   * // Count the number of EventDates
   * const count = await prisma.eventDate.count({
   *   where: {
   *     // ... the filter for the EventDates we want to count
   *   }
   * })
  **/
  count<T extends EventDateCountArgs>(
    args?: Prisma.Subset<T, EventDateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventDateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EventDate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventDateAggregateArgs>(args: Prisma.Subset<T, EventDateAggregateArgs>): Prisma.PrismaPromise<GetEventDateAggregateType<T>>

  /**
   * Group by EventDate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventDateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventDateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventDateGroupByArgs['orderBy'] }
      : { orderBy?: EventDateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventDateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventDateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EventDate model
 */
readonly fields: EventDateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EventDate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventDateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Event<T extends Prisma.EventDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventDefaultArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EventDate model
 */
export interface EventDateFieldRefs {
  readonly id: Prisma.FieldRef<"EventDate", 'String'>
  readonly name: Prisma.FieldRef<"EventDate", 'String'>
  readonly eventId: Prisma.FieldRef<"EventDate", 'String'>
  readonly endDate: Prisma.FieldRef<"EventDate", 'DateTime'>
  readonly startDate: Prisma.FieldRef<"EventDate", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"EventDate", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EventDate", 'DateTime'>
  readonly description: Prisma.FieldRef<"EventDate", 'String'>
}
    

// Custom InputTypes
/**
 * EventDate findUnique
 */
export type EventDateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter, which EventDate to fetch.
   */
  where: Prisma.EventDateWhereUniqueInput
}

/**
 * EventDate findUniqueOrThrow
 */
export type EventDateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter, which EventDate to fetch.
   */
  where: Prisma.EventDateWhereUniqueInput
}

/**
 * EventDate findFirst
 */
export type EventDateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter, which EventDate to fetch.
   */
  where?: Prisma.EventDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventDates to fetch.
   */
  orderBy?: Prisma.EventDateOrderByWithRelationInput | Prisma.EventDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventDates.
   */
  cursor?: Prisma.EventDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventDates.
   */
  distinct?: Prisma.EventDateScalarFieldEnum | Prisma.EventDateScalarFieldEnum[]
}

/**
 * EventDate findFirstOrThrow
 */
export type EventDateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter, which EventDate to fetch.
   */
  where?: Prisma.EventDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventDates to fetch.
   */
  orderBy?: Prisma.EventDateOrderByWithRelationInput | Prisma.EventDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventDates.
   */
  cursor?: Prisma.EventDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventDates.
   */
  distinct?: Prisma.EventDateScalarFieldEnum | Prisma.EventDateScalarFieldEnum[]
}

/**
 * EventDate findMany
 */
export type EventDateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter, which EventDates to fetch.
   */
  where?: Prisma.EventDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventDates to fetch.
   */
  orderBy?: Prisma.EventDateOrderByWithRelationInput | Prisma.EventDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EventDates.
   */
  cursor?: Prisma.EventDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventDates.
   */
  skip?: number
  distinct?: Prisma.EventDateScalarFieldEnum | Prisma.EventDateScalarFieldEnum[]
}

/**
 * EventDate create
 */
export type EventDateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * The data needed to create a EventDate.
   */
  data: Prisma.XOR<Prisma.EventDateCreateInput, Prisma.EventDateUncheckedCreateInput>
}

/**
 * EventDate createMany
 */
export type EventDateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EventDates.
   */
  data: Prisma.EventDateCreateManyInput | Prisma.EventDateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EventDate createManyAndReturn
 */
export type EventDateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * The data used to create many EventDates.
   */
  data: Prisma.EventDateCreateManyInput | Prisma.EventDateCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EventDate update
 */
export type EventDateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * The data needed to update a EventDate.
   */
  data: Prisma.XOR<Prisma.EventDateUpdateInput, Prisma.EventDateUncheckedUpdateInput>
  /**
   * Choose, which EventDate to update.
   */
  where: Prisma.EventDateWhereUniqueInput
}

/**
 * EventDate updateMany
 */
export type EventDateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EventDates.
   */
  data: Prisma.XOR<Prisma.EventDateUpdateManyMutationInput, Prisma.EventDateUncheckedUpdateManyInput>
  /**
   * Filter which EventDates to update
   */
  where?: Prisma.EventDateWhereInput
  /**
   * Limit how many EventDates to update.
   */
  limit?: number
}

/**
 * EventDate updateManyAndReturn
 */
export type EventDateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * The data used to update EventDates.
   */
  data: Prisma.XOR<Prisma.EventDateUpdateManyMutationInput, Prisma.EventDateUncheckedUpdateManyInput>
  /**
   * Filter which EventDates to update
   */
  where?: Prisma.EventDateWhereInput
  /**
   * Limit how many EventDates to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EventDate upsert
 */
export type EventDateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * The filter to search for the EventDate to update in case it exists.
   */
  where: Prisma.EventDateWhereUniqueInput
  /**
   * In case the EventDate found by the `where` argument doesn't exist, create a new EventDate with this data.
   */
  create: Prisma.XOR<Prisma.EventDateCreateInput, Prisma.EventDateUncheckedCreateInput>
  /**
   * In case the EventDate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventDateUpdateInput, Prisma.EventDateUncheckedUpdateInput>
}

/**
 * EventDate delete
 */
export type EventDateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
  /**
   * Filter which EventDate to delete.
   */
  where: Prisma.EventDateWhereUniqueInput
}

/**
 * EventDate deleteMany
 */
export type EventDateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventDates to delete
   */
  where?: Prisma.EventDateWhereInput
  /**
   * Limit how many EventDates to delete.
   */
  limit?: number
}

/**
 * EventDate without action
 */
export type EventDateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventDate
   */
  select?: Prisma.EventDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventDate
   */
  omit?: Prisma.EventDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventDateInclude<ExtArgs> | null
}
