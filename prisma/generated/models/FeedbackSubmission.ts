
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FeedbackSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FeedbackSubmission
 * 
 */
export type FeedbackSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$FeedbackSubmissionPayload>

export type AggregateFeedbackSubmission = {
  _count: FeedbackSubmissionCountAggregateOutputType | null
  _min: FeedbackSubmissionMinAggregateOutputType | null
  _max: FeedbackSubmissionMaxAggregateOutputType | null
}

export type FeedbackSubmissionMinAggregateOutputType = {
  id: string | null
  feedbackId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackSubmissionMaxAggregateOutputType = {
  id: string | null
  feedbackId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackSubmissionCountAggregateOutputType = {
  id: number
  feedbackId: number
  userId: number
  answerJson: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FeedbackSubmissionMinAggregateInputType = {
  id?: true
  feedbackId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackSubmissionMaxAggregateInputType = {
  id?: true
  feedbackId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackSubmissionCountAggregateInputType = {
  id?: true
  feedbackId?: true
  userId?: true
  answerJson?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeedbackSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackSubmission to aggregate.
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackSubmissions to fetch.
   */
  orderBy?: Prisma.FeedbackSubmissionOrderByWithRelationInput | Prisma.FeedbackSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeedbackSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FeedbackSubmissions
  **/
  _count?: true | FeedbackSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeedbackSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeedbackSubmissionMaxAggregateInputType
}

export type GetFeedbackSubmissionAggregateType<T extends FeedbackSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateFeedbackSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackSubmission[P]>
}




export type FeedbackSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackSubmissionWhereInput
  orderBy?: Prisma.FeedbackSubmissionOrderByWithAggregationInput | Prisma.FeedbackSubmissionOrderByWithAggregationInput[]
  by: Prisma.FeedbackSubmissionScalarFieldEnum[] | Prisma.FeedbackSubmissionScalarFieldEnum
  having?: Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackSubmissionCountAggregateInputType | true
  _min?: FeedbackSubmissionMinAggregateInputType
  _max?: FeedbackSubmissionMaxAggregateInputType
}

export type FeedbackSubmissionGroupByOutputType = {
  id: string
  feedbackId: string
  userId: string
  answerJson: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: FeedbackSubmissionCountAggregateOutputType | null
  _min: FeedbackSubmissionMinAggregateOutputType | null
  _max: FeedbackSubmissionMaxAggregateOutputType | null
}

type GetFeedbackSubmissionGroupByPayload<T extends FeedbackSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeedbackSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeedbackSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackSubmissionGroupByOutputType[P]>
      }
    >
  > 



export type FeedbackSubmissionWhereInput = {
  AND?: Prisma.FeedbackSubmissionWhereInput | Prisma.FeedbackSubmissionWhereInput[]
  OR?: Prisma.FeedbackSubmissionWhereInput[]
  NOT?: Prisma.FeedbackSubmissionWhereInput | Prisma.FeedbackSubmissionWhereInput[]
  id?: Prisma.StringFilter<"FeedbackSubmission"> | string
  feedbackId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  userId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  answerJson?: Prisma.JsonFilter<"FeedbackSubmission">
  createdAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
  Feedback?: Prisma.XOR<Prisma.FeedbackScalarRelationFilter, Prisma.FeedbackWhereInput>
  UserData?: Prisma.XOR<Prisma.UserDataScalarRelationFilter, Prisma.UserDataWhereInput>
}

export type FeedbackSubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Feedback?: Prisma.FeedbackOrderByWithRelationInput
  UserData?: Prisma.UserDataOrderByWithRelationInput
}

export type FeedbackSubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FeedbackSubmissionWhereInput | Prisma.FeedbackSubmissionWhereInput[]
  OR?: Prisma.FeedbackSubmissionWhereInput[]
  NOT?: Prisma.FeedbackSubmissionWhereInput | Prisma.FeedbackSubmissionWhereInput[]
  feedbackId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  userId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  answerJson?: Prisma.JsonFilter<"FeedbackSubmission">
  createdAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
  Feedback?: Prisma.XOR<Prisma.FeedbackScalarRelationFilter, Prisma.FeedbackWhereInput>
  UserData?: Prisma.XOR<Prisma.UserDataScalarRelationFilter, Prisma.UserDataWhereInput>
}, "id">

export type FeedbackSubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackSubmissionCountOrderByAggregateInput
  _max?: Prisma.FeedbackSubmissionMaxOrderByAggregateInput
  _min?: Prisma.FeedbackSubmissionMinOrderByAggregateInput
}

export type FeedbackSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput | Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput | Prisma.FeedbackSubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FeedbackSubmission"> | string
  feedbackId?: Prisma.StringWithAggregatesFilter<"FeedbackSubmission"> | string
  userId?: Prisma.StringWithAggregatesFilter<"FeedbackSubmission"> | string
  answerJson?: Prisma.JsonWithAggregatesFilter<"FeedbackSubmission">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FeedbackSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FeedbackSubmission"> | Date | string
}

export type FeedbackSubmissionCreateInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
  Feedback: Prisma.FeedbackCreateNestedOneWithoutFeedbackSubmissionInput
  UserData: Prisma.UserDataCreateNestedOneWithoutFeedbackSubmissionInput
}

export type FeedbackSubmissionUncheckedCreateInput = {
  id: string
  feedbackId: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Feedback?: Prisma.FeedbackUpdateOneRequiredWithoutFeedbackSubmissionNestedInput
  UserData?: Prisma.UserDataUpdateOneRequiredWithoutFeedbackSubmissionNestedInput
}

export type FeedbackSubmissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionCreateManyInput = {
  id: string
  feedbackId: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionListRelationFilter = {
  every?: Prisma.FeedbackSubmissionWhereInput
  some?: Prisma.FeedbackSubmissionWhereInput
  none?: Prisma.FeedbackSubmissionWhereInput
}

export type FeedbackSubmissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeedbackSubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answerJson?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackSubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackSubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  feedbackId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackSubmissionCreateNestedManyWithoutFeedbackInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackSubmissionCreateWithoutFeedbackInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyFeedbackInputEnvelope
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
}

export type FeedbackSubmissionUncheckedCreateNestedManyWithoutFeedbackInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackSubmissionCreateWithoutFeedbackInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyFeedbackInputEnvelope
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
}

export type FeedbackSubmissionUpdateManyWithoutFeedbackNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackSubmissionCreateWithoutFeedbackInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput[]
  upsert?: Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyFeedbackInputEnvelope
  set?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  delete?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  update?: Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutFeedbackInput[]
  updateMany?: Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutFeedbackInput | Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutFeedbackInput[]
  deleteMany?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
}

export type FeedbackSubmissionUncheckedUpdateManyWithoutFeedbackNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput> | Prisma.FeedbackSubmissionCreateWithoutFeedbackInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutFeedbackInput[]
  upsert?: Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutFeedbackInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyFeedbackInputEnvelope
  set?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  delete?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  update?: Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutFeedbackInput | Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutFeedbackInput[]
  updateMany?: Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutFeedbackInput | Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutFeedbackInput[]
  deleteMany?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
}

export type FeedbackSubmissionCreateNestedManyWithoutUserDataInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput> | Prisma.FeedbackSubmissionCreateWithoutUserDataInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyUserDataInputEnvelope
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
}

export type FeedbackSubmissionUncheckedCreateNestedManyWithoutUserDataInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput> | Prisma.FeedbackSubmissionCreateWithoutUserDataInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyUserDataInputEnvelope
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
}

export type FeedbackSubmissionUpdateManyWithoutUserDataNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput> | Prisma.FeedbackSubmissionCreateWithoutUserDataInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput[]
  upsert?: Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutUserDataInput | Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutUserDataInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyUserDataInputEnvelope
  set?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  delete?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  update?: Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutUserDataInput | Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutUserDataInput[]
  updateMany?: Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutUserDataInput | Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutUserDataInput[]
  deleteMany?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
}

export type FeedbackSubmissionUncheckedUpdateManyWithoutUserDataNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput> | Prisma.FeedbackSubmissionCreateWithoutUserDataInput[] | Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput[]
  connectOrCreate?: Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput | Prisma.FeedbackSubmissionCreateOrConnectWithoutUserDataInput[]
  upsert?: Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutUserDataInput | Prisma.FeedbackSubmissionUpsertWithWhereUniqueWithoutUserDataInput[]
  createMany?: Prisma.FeedbackSubmissionCreateManyUserDataInputEnvelope
  set?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  delete?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  connect?: Prisma.FeedbackSubmissionWhereUniqueInput | Prisma.FeedbackSubmissionWhereUniqueInput[]
  update?: Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutUserDataInput | Prisma.FeedbackSubmissionUpdateWithWhereUniqueWithoutUserDataInput[]
  updateMany?: Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutUserDataInput | Prisma.FeedbackSubmissionUpdateManyWithWhereWithoutUserDataInput[]
  deleteMany?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
}

export type FeedbackSubmissionCreateWithoutFeedbackInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
  UserData: Prisma.UserDataCreateNestedOneWithoutFeedbackSubmissionInput
}

export type FeedbackSubmissionUncheckedCreateWithoutFeedbackInput = {
  id: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionCreateOrConnectWithoutFeedbackInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput>
}

export type FeedbackSubmissionCreateManyFeedbackInputEnvelope = {
  data: Prisma.FeedbackSubmissionCreateManyFeedbackInput | Prisma.FeedbackSubmissionCreateManyFeedbackInput[]
  skipDuplicates?: boolean
}

export type FeedbackSubmissionUpsertWithWhereUniqueWithoutFeedbackInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FeedbackSubmissionUpdateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedUpdateWithoutFeedbackInput>
  create: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutFeedbackInput>
}

export type FeedbackSubmissionUpdateWithWhereUniqueWithoutFeedbackInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateWithoutFeedbackInput, Prisma.FeedbackSubmissionUncheckedUpdateWithoutFeedbackInput>
}

export type FeedbackSubmissionUpdateManyWithWhereWithoutFeedbackInput = {
  where: Prisma.FeedbackSubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateManyMutationInput, Prisma.FeedbackSubmissionUncheckedUpdateManyWithoutFeedbackInput>
}

export type FeedbackSubmissionScalarWhereInput = {
  AND?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
  OR?: Prisma.FeedbackSubmissionScalarWhereInput[]
  NOT?: Prisma.FeedbackSubmissionScalarWhereInput | Prisma.FeedbackSubmissionScalarWhereInput[]
  id?: Prisma.StringFilter<"FeedbackSubmission"> | string
  feedbackId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  userId?: Prisma.StringFilter<"FeedbackSubmission"> | string
  answerJson?: Prisma.JsonFilter<"FeedbackSubmission">
  createdAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackSubmission"> | Date | string
}

export type FeedbackSubmissionCreateWithoutUserDataInput = {
  id: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
  Feedback: Prisma.FeedbackCreateNestedOneWithoutFeedbackSubmissionInput
}

export type FeedbackSubmissionUncheckedCreateWithoutUserDataInput = {
  id: string
  feedbackId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionCreateOrConnectWithoutUserDataInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput>
}

export type FeedbackSubmissionCreateManyUserDataInputEnvelope = {
  data: Prisma.FeedbackSubmissionCreateManyUserDataInput | Prisma.FeedbackSubmissionCreateManyUserDataInput[]
  skipDuplicates?: boolean
}

export type FeedbackSubmissionUpsertWithWhereUniqueWithoutUserDataInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FeedbackSubmissionUpdateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedUpdateWithoutUserDataInput>
  create: Prisma.XOR<Prisma.FeedbackSubmissionCreateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedCreateWithoutUserDataInput>
}

export type FeedbackSubmissionUpdateWithWhereUniqueWithoutUserDataInput = {
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateWithoutUserDataInput, Prisma.FeedbackSubmissionUncheckedUpdateWithoutUserDataInput>
}

export type FeedbackSubmissionUpdateManyWithWhereWithoutUserDataInput = {
  where: Prisma.FeedbackSubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateManyMutationInput, Prisma.FeedbackSubmissionUncheckedUpdateManyWithoutUserDataInput>
}

export type FeedbackSubmissionCreateManyFeedbackInput = {
  id: string
  userId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionUpdateWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserData?: Prisma.UserDataUpdateOneRequiredWithoutFeedbackSubmissionNestedInput
}

export type FeedbackSubmissionUncheckedUpdateWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionUncheckedUpdateManyWithoutFeedbackInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionCreateManyUserDataInput = {
  id: string
  feedbackId: string
  answerJson: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackSubmissionUpdateWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Feedback?: Prisma.FeedbackUpdateOneRequiredWithoutFeedbackSubmissionNestedInput
}

export type FeedbackSubmissionUncheckedUpdateWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackSubmissionUncheckedUpdateManyWithoutUserDataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  feedbackId?: Prisma.StringFieldUpdateOperationsInput | string
  answerJson?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FeedbackSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feedbackId?: boolean
  userId?: boolean
  answerJson?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackSubmission"]>

export type FeedbackSubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feedbackId?: boolean
  userId?: boolean
  answerJson?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackSubmission"]>

export type FeedbackSubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  feedbackId?: boolean
  userId?: boolean
  answerJson?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackSubmission"]>

export type FeedbackSubmissionSelectScalar = {
  id?: boolean
  feedbackId?: boolean
  userId?: boolean
  answerJson?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeedbackSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "feedbackId" | "userId" | "answerJson" | "createdAt" | "updatedAt", ExtArgs["result"]["feedbackSubmission"]>
export type FeedbackSubmissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}
export type FeedbackSubmissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}
export type FeedbackSubmissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Feedback?: boolean | Prisma.FeedbackDefaultArgs<ExtArgs>
  UserData?: boolean | Prisma.UserDataDefaultArgs<ExtArgs>
}

export type $FeedbackSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FeedbackSubmission"
  objects: {
    Feedback: Prisma.$FeedbackPayload<ExtArgs>
    UserData: Prisma.$UserDataPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    feedbackId: string
    userId: string
    answerJson: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["feedbackSubmission"]>
  composites: {}
}

export type FeedbackSubmissionGetPayload<S extends boolean | null | undefined | FeedbackSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload, S>

export type FeedbackSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeedbackSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeedbackSubmissionCountAggregateInputType | true
  }

export interface FeedbackSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackSubmission'], meta: { name: 'FeedbackSubmission' } }
  /**
   * Find zero or one FeedbackSubmission that matches the filter.
   * @param {FeedbackSubmissionFindUniqueArgs} args - Arguments to find a FeedbackSubmission
   * @example
   * // Get one FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FeedbackSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackSubmissionFindUniqueOrThrowArgs} args - Arguments to find a FeedbackSubmission
   * @example
   * // Get one FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionFindFirstArgs} args - Arguments to find a FeedbackSubmission
   * @example
   * // Get one FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionFindFirstOrThrowArgs} args - Arguments to find a FeedbackSubmission
   * @example
   * // Get one FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FeedbackSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackSubmissions
   * const feedbackSubmissions = await prisma.feedbackSubmission.findMany()
   * 
   * // Get first 10 FeedbackSubmissions
   * const feedbackSubmissions = await prisma.feedbackSubmission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feedbackSubmissionWithIdOnly = await prisma.feedbackSubmission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeedbackSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FeedbackSubmission.
   * @param {FeedbackSubmissionCreateArgs} args - Arguments to create a FeedbackSubmission.
   * @example
   * // Create one FeedbackSubmission
   * const FeedbackSubmission = await prisma.feedbackSubmission.create({
   *   data: {
   *     // ... data to create a FeedbackSubmission
   *   }
   * })
   * 
   */
  create<T extends FeedbackSubmissionCreateArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FeedbackSubmissions.
   * @param {FeedbackSubmissionCreateManyArgs} args - Arguments to create many FeedbackSubmissions.
   * @example
   * // Create many FeedbackSubmissions
   * const feedbackSubmission = await prisma.feedbackSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeedbackSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackSubmissions and returns the data saved in the database.
   * @param {FeedbackSubmissionCreateManyAndReturnArgs} args - Arguments to create many FeedbackSubmissions.
   * @example
   * // Create many FeedbackSubmissions
   * const feedbackSubmission = await prisma.feedbackSubmission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FeedbackSubmissions and only return the `id`
   * const feedbackSubmissionWithIdOnly = await prisma.feedbackSubmission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeedbackSubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FeedbackSubmission.
   * @param {FeedbackSubmissionDeleteArgs} args - Arguments to delete one FeedbackSubmission.
   * @example
   * // Delete one FeedbackSubmission
   * const FeedbackSubmission = await prisma.feedbackSubmission.delete({
   *   where: {
   *     // ... filter to delete one FeedbackSubmission
   *   }
   * })
   * 
   */
  delete<T extends FeedbackSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FeedbackSubmission.
   * @param {FeedbackSubmissionUpdateArgs} args - Arguments to update one FeedbackSubmission.
   * @example
   * // Update one FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeedbackSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FeedbackSubmissions.
   * @param {FeedbackSubmissionDeleteManyArgs} args - Arguments to filter FeedbackSubmissions to delete.
   * @example
   * // Delete a few FeedbackSubmissions
   * const { count } = await prisma.feedbackSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeedbackSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeedbackSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackSubmissions
   * const feedbackSubmission = await prisma.feedbackSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeedbackSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackSubmissions and returns the data updated in the database.
   * @param {FeedbackSubmissionUpdateManyAndReturnArgs} args - Arguments to update many FeedbackSubmissions.
   * @example
   * // Update many FeedbackSubmissions
   * const feedbackSubmission = await prisma.feedbackSubmission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FeedbackSubmissions and only return the `id`
   * const feedbackSubmissionWithIdOnly = await prisma.feedbackSubmission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeedbackSubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FeedbackSubmission.
   * @param {FeedbackSubmissionUpsertArgs} args - Arguments to update or create a FeedbackSubmission.
   * @example
   * // Update or create a FeedbackSubmission
   * const feedbackSubmission = await prisma.feedbackSubmission.upsert({
   *   create: {
   *     // ... data to create a FeedbackSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackSubmission we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, FeedbackSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__FeedbackSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FeedbackSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionCountArgs} args - Arguments to filter FeedbackSubmissions to count.
   * @example
   * // Count the number of FeedbackSubmissions
   * const count = await prisma.feedbackSubmission.count({
   *   where: {
   *     // ... the filter for the FeedbackSubmissions we want to count
   *   }
   * })
  **/
  count<T extends FeedbackSubmissionCountArgs>(
    args?: Prisma.Subset<T, FeedbackSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeedbackSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeedbackSubmissionAggregateArgs>(args: Prisma.Subset<T, FeedbackSubmissionAggregateArgs>): Prisma.PrismaPromise<GetFeedbackSubmissionAggregateType<T>>

  /**
   * Group by FeedbackSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeedbackSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeedbackSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FeedbackSubmission model
 */
readonly fields: FeedbackSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Feedback<T extends Prisma.FeedbackDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeedbackDefaultArgs<ExtArgs>>): Prisma.Prisma__FeedbackClient<runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserData<T extends Prisma.UserDataDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDataDefaultArgs<ExtArgs>>): Prisma.Prisma__UserDataClient<runtime.Types.Result.GetResult<Prisma.$UserDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FeedbackSubmission model
 */
export interface FeedbackSubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"FeedbackSubmission", 'String'>
  readonly feedbackId: Prisma.FieldRef<"FeedbackSubmission", 'String'>
  readonly userId: Prisma.FieldRef<"FeedbackSubmission", 'String'>
  readonly answerJson: Prisma.FieldRef<"FeedbackSubmission", 'Json'>
  readonly createdAt: Prisma.FieldRef<"FeedbackSubmission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FeedbackSubmission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FeedbackSubmission findUnique
 */
export type FeedbackSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackSubmission to fetch.
   */
  where: Prisma.FeedbackSubmissionWhereUniqueInput
}

/**
 * FeedbackSubmission findUniqueOrThrow
 */
export type FeedbackSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackSubmission to fetch.
   */
  where: Prisma.FeedbackSubmissionWhereUniqueInput
}

/**
 * FeedbackSubmission findFirst
 */
export type FeedbackSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackSubmission to fetch.
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackSubmissions to fetch.
   */
  orderBy?: Prisma.FeedbackSubmissionOrderByWithRelationInput | Prisma.FeedbackSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackSubmissions.
   */
  cursor?: Prisma.FeedbackSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackSubmissions.
   */
  distinct?: Prisma.FeedbackSubmissionScalarFieldEnum | Prisma.FeedbackSubmissionScalarFieldEnum[]
}

/**
 * FeedbackSubmission findFirstOrThrow
 */
export type FeedbackSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackSubmission to fetch.
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackSubmissions to fetch.
   */
  orderBy?: Prisma.FeedbackSubmissionOrderByWithRelationInput | Prisma.FeedbackSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackSubmissions.
   */
  cursor?: Prisma.FeedbackSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackSubmissions.
   */
  distinct?: Prisma.FeedbackSubmissionScalarFieldEnum | Prisma.FeedbackSubmissionScalarFieldEnum[]
}

/**
 * FeedbackSubmission findMany
 */
export type FeedbackSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackSubmissions to fetch.
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackSubmissions to fetch.
   */
  orderBy?: Prisma.FeedbackSubmissionOrderByWithRelationInput | Prisma.FeedbackSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FeedbackSubmissions.
   */
  cursor?: Prisma.FeedbackSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackSubmissions.
   */
  skip?: number
  distinct?: Prisma.FeedbackSubmissionScalarFieldEnum | Prisma.FeedbackSubmissionScalarFieldEnum[]
}

/**
 * FeedbackSubmission create
 */
export type FeedbackSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackSubmission.
   */
  data: Prisma.XOR<Prisma.FeedbackSubmissionCreateInput, Prisma.FeedbackSubmissionUncheckedCreateInput>
}

/**
 * FeedbackSubmission createMany
 */
export type FeedbackSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FeedbackSubmissions.
   */
  data: Prisma.FeedbackSubmissionCreateManyInput | Prisma.FeedbackSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackSubmission createManyAndReturn
 */
export type FeedbackSubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackSubmissions.
   */
  data: Prisma.FeedbackSubmissionCreateManyInput | Prisma.FeedbackSubmissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackSubmission update
 */
export type FeedbackSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackSubmission.
   */
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateInput, Prisma.FeedbackSubmissionUncheckedUpdateInput>
  /**
   * Choose, which FeedbackSubmission to update.
   */
  where: Prisma.FeedbackSubmissionWhereUniqueInput
}

/**
 * FeedbackSubmission updateMany
 */
export type FeedbackSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FeedbackSubmissions.
   */
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateManyMutationInput, Prisma.FeedbackSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackSubmissions to update
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * Limit how many FeedbackSubmissions to update.
   */
  limit?: number
}

/**
 * FeedbackSubmission updateManyAndReturn
 */
export type FeedbackSubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackSubmissions.
   */
  data: Prisma.XOR<Prisma.FeedbackSubmissionUpdateManyMutationInput, Prisma.FeedbackSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackSubmissions to update
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * Limit how many FeedbackSubmissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackSubmission upsert
 */
export type FeedbackSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackSubmission to update in case it exists.
   */
  where: Prisma.FeedbackSubmissionWhereUniqueInput
  /**
   * In case the FeedbackSubmission found by the `where` argument doesn't exist, create a new FeedbackSubmission with this data.
   */
  create: Prisma.XOR<Prisma.FeedbackSubmissionCreateInput, Prisma.FeedbackSubmissionUncheckedCreateInput>
  /**
   * In case the FeedbackSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeedbackSubmissionUpdateInput, Prisma.FeedbackSubmissionUncheckedUpdateInput>
}

/**
 * FeedbackSubmission delete
 */
export type FeedbackSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
  /**
   * Filter which FeedbackSubmission to delete.
   */
  where: Prisma.FeedbackSubmissionWhereUniqueInput
}

/**
 * FeedbackSubmission deleteMany
 */
export type FeedbackSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackSubmissions to delete
   */
  where?: Prisma.FeedbackSubmissionWhereInput
  /**
   * Limit how many FeedbackSubmissions to delete.
   */
  limit?: number
}

/**
 * FeedbackSubmission without action
 */
export type FeedbackSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackSubmission
   */
  select?: Prisma.FeedbackSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackSubmission
   */
  omit?: Prisma.FeedbackSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackSubmissionInclude<ExtArgs> | null
}
