
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FeedbackOption` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FeedbackOption
 * 
 */
export type FeedbackOptionModel = runtime.Types.Result.DefaultSelection<Prisma.$FeedbackOptionPayload>

export type AggregateFeedbackOption = {
  _count: FeedbackOptionCountAggregateOutputType | null
  _min: FeedbackOptionMinAggregateOutputType | null
  _max: FeedbackOptionMaxAggregateOutputType | null
}

export type FeedbackOptionMinAggregateOutputType = {
  id: string | null
  questionId: string | null
  stringAnswer: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackOptionMaxAggregateOutputType = {
  id: string | null
  questionId: string | null
  stringAnswer: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackOptionCountAggregateOutputType = {
  id: number
  questionId: number
  stringAnswer: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FeedbackOptionMinAggregateInputType = {
  id?: true
  questionId?: true
  stringAnswer?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackOptionMaxAggregateInputType = {
  id?: true
  questionId?: true
  stringAnswer?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackOptionCountAggregateInputType = {
  id?: true
  questionId?: true
  stringAnswer?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeedbackOptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackOption to aggregate.
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackOptions to fetch.
   */
  orderBy?: Prisma.FeedbackOptionOrderByWithRelationInput | Prisma.FeedbackOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FeedbackOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FeedbackOptions
  **/
  _count?: true | FeedbackOptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FeedbackOptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FeedbackOptionMaxAggregateInputType
}

export type GetFeedbackOptionAggregateType<T extends FeedbackOptionAggregateArgs> = {
      [P in keyof T & keyof AggregateFeedbackOption]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackOption[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackOption[P]>
}




export type FeedbackOptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackOptionWhereInput
  orderBy?: Prisma.FeedbackOptionOrderByWithAggregationInput | Prisma.FeedbackOptionOrderByWithAggregationInput[]
  by: Prisma.FeedbackOptionScalarFieldEnum[] | Prisma.FeedbackOptionScalarFieldEnum
  having?: Prisma.FeedbackOptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackOptionCountAggregateInputType | true
  _min?: FeedbackOptionMinAggregateInputType
  _max?: FeedbackOptionMaxAggregateInputType
}

export type FeedbackOptionGroupByOutputType = {
  id: string
  questionId: string
  stringAnswer: string | null
  createdAt: Date
  updatedAt: Date
  _count: FeedbackOptionCountAggregateOutputType | null
  _min: FeedbackOptionMinAggregateOutputType | null
  _max: FeedbackOptionMaxAggregateOutputType | null
}

type GetFeedbackOptionGroupByPayload<T extends FeedbackOptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeedbackOptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FeedbackOptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackOptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackOptionGroupByOutputType[P]>
      }
    >
  > 



export type FeedbackOptionWhereInput = {
  AND?: Prisma.FeedbackOptionWhereInput | Prisma.FeedbackOptionWhereInput[]
  OR?: Prisma.FeedbackOptionWhereInput[]
  NOT?: Prisma.FeedbackOptionWhereInput | Prisma.FeedbackOptionWhereInput[]
  id?: Prisma.StringFilter<"FeedbackOption"> | string
  questionId?: Prisma.StringFilter<"FeedbackOption"> | string
  stringAnswer?: Prisma.StringNullableFilter<"FeedbackOption"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
  FeedbackQuestion?: Prisma.XOR<Prisma.FeedbackQuestionScalarRelationFilter, Prisma.FeedbackQuestionWhereInput>
}

export type FeedbackOptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  stringAnswer?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  FeedbackQuestion?: Prisma.FeedbackQuestionOrderByWithRelationInput
}

export type FeedbackOptionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FeedbackOptionWhereInput | Prisma.FeedbackOptionWhereInput[]
  OR?: Prisma.FeedbackOptionWhereInput[]
  NOT?: Prisma.FeedbackOptionWhereInput | Prisma.FeedbackOptionWhereInput[]
  questionId?: Prisma.StringFilter<"FeedbackOption"> | string
  stringAnswer?: Prisma.StringNullableFilter<"FeedbackOption"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
  FeedbackQuestion?: Prisma.XOR<Prisma.FeedbackQuestionScalarRelationFilter, Prisma.FeedbackQuestionWhereInput>
}, "id">

export type FeedbackOptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  stringAnswer?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackOptionCountOrderByAggregateInput
  _max?: Prisma.FeedbackOptionMaxOrderByAggregateInput
  _min?: Prisma.FeedbackOptionMinOrderByAggregateInput
}

export type FeedbackOptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeedbackOptionScalarWhereWithAggregatesInput | Prisma.FeedbackOptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackOptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FeedbackOptionScalarWhereWithAggregatesInput | Prisma.FeedbackOptionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FeedbackOption"> | string
  questionId?: Prisma.StringWithAggregatesFilter<"FeedbackOption"> | string
  stringAnswer?: Prisma.StringNullableWithAggregatesFilter<"FeedbackOption"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FeedbackOption"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FeedbackOption"> | Date | string
}

export type FeedbackOptionCreateInput = {
  id: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
  FeedbackQuestion: Prisma.FeedbackQuestionCreateNestedOneWithoutFeedbackOptionInput
}

export type FeedbackOptionUncheckedCreateInput = {
  id: string
  questionId: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackOptionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  FeedbackQuestion?: Prisma.FeedbackQuestionUpdateOneRequiredWithoutFeedbackOptionNestedInput
}

export type FeedbackOptionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  questionId?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackOptionCreateManyInput = {
  id: string
  questionId: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackOptionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackOptionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  questionId?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackOptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  stringAnswer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackOptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  stringAnswer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackOptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  stringAnswer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackOptionListRelationFilter = {
  every?: Prisma.FeedbackOptionWhereInput
  some?: Prisma.FeedbackOptionWhereInput
  none?: Prisma.FeedbackOptionWhereInput
}

export type FeedbackOptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeedbackOptionCreateNestedManyWithoutFeedbackQuestionInput = {
  create?: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput> | Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput[] | Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput[]
  connectOrCreate?: Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput | Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput[]
  createMany?: Prisma.FeedbackOptionCreateManyFeedbackQuestionInputEnvelope
  connect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
}

export type FeedbackOptionUncheckedCreateNestedManyWithoutFeedbackQuestionInput = {
  create?: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput> | Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput[] | Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput[]
  connectOrCreate?: Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput | Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput[]
  createMany?: Prisma.FeedbackOptionCreateManyFeedbackQuestionInputEnvelope
  connect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
}

export type FeedbackOptionUpdateManyWithoutFeedbackQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput> | Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput[] | Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput[]
  connectOrCreate?: Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput | Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput[]
  upsert?: Prisma.FeedbackOptionUpsertWithWhereUniqueWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpsertWithWhereUniqueWithoutFeedbackQuestionInput[]
  createMany?: Prisma.FeedbackOptionCreateManyFeedbackQuestionInputEnvelope
  set?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  delete?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  connect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  update?: Prisma.FeedbackOptionUpdateWithWhereUniqueWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpdateWithWhereUniqueWithoutFeedbackQuestionInput[]
  updateMany?: Prisma.FeedbackOptionUpdateManyWithWhereWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpdateManyWithWhereWithoutFeedbackQuestionInput[]
  deleteMany?: Prisma.FeedbackOptionScalarWhereInput | Prisma.FeedbackOptionScalarWhereInput[]
}

export type FeedbackOptionUncheckedUpdateManyWithoutFeedbackQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput> | Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput[] | Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput[]
  connectOrCreate?: Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput | Prisma.FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput[]
  upsert?: Prisma.FeedbackOptionUpsertWithWhereUniqueWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpsertWithWhereUniqueWithoutFeedbackQuestionInput[]
  createMany?: Prisma.FeedbackOptionCreateManyFeedbackQuestionInputEnvelope
  set?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  disconnect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  delete?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  connect?: Prisma.FeedbackOptionWhereUniqueInput | Prisma.FeedbackOptionWhereUniqueInput[]
  update?: Prisma.FeedbackOptionUpdateWithWhereUniqueWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpdateWithWhereUniqueWithoutFeedbackQuestionInput[]
  updateMany?: Prisma.FeedbackOptionUpdateManyWithWhereWithoutFeedbackQuestionInput | Prisma.FeedbackOptionUpdateManyWithWhereWithoutFeedbackQuestionInput[]
  deleteMany?: Prisma.FeedbackOptionScalarWhereInput | Prisma.FeedbackOptionScalarWhereInput[]
}

export type FeedbackOptionCreateWithoutFeedbackQuestionInput = {
  id: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput = {
  id: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackOptionCreateOrConnectWithoutFeedbackQuestionInput = {
  where: Prisma.FeedbackOptionWhereUniqueInput
  create: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput>
}

export type FeedbackOptionCreateManyFeedbackQuestionInputEnvelope = {
  data: Prisma.FeedbackOptionCreateManyFeedbackQuestionInput | Prisma.FeedbackOptionCreateManyFeedbackQuestionInput[]
  skipDuplicates?: boolean
}

export type FeedbackOptionUpsertWithWhereUniqueWithoutFeedbackQuestionInput = {
  where: Prisma.FeedbackOptionWhereUniqueInput
  update: Prisma.XOR<Prisma.FeedbackOptionUpdateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedUpdateWithoutFeedbackQuestionInput>
  create: Prisma.XOR<Prisma.FeedbackOptionCreateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedCreateWithoutFeedbackQuestionInput>
}

export type FeedbackOptionUpdateWithWhereUniqueWithoutFeedbackQuestionInput = {
  where: Prisma.FeedbackOptionWhereUniqueInput
  data: Prisma.XOR<Prisma.FeedbackOptionUpdateWithoutFeedbackQuestionInput, Prisma.FeedbackOptionUncheckedUpdateWithoutFeedbackQuestionInput>
}

export type FeedbackOptionUpdateManyWithWhereWithoutFeedbackQuestionInput = {
  where: Prisma.FeedbackOptionScalarWhereInput
  data: Prisma.XOR<Prisma.FeedbackOptionUpdateManyMutationInput, Prisma.FeedbackOptionUncheckedUpdateManyWithoutFeedbackQuestionInput>
}

export type FeedbackOptionScalarWhereInput = {
  AND?: Prisma.FeedbackOptionScalarWhereInput | Prisma.FeedbackOptionScalarWhereInput[]
  OR?: Prisma.FeedbackOptionScalarWhereInput[]
  NOT?: Prisma.FeedbackOptionScalarWhereInput | Prisma.FeedbackOptionScalarWhereInput[]
  id?: Prisma.StringFilter<"FeedbackOption"> | string
  questionId?: Prisma.StringFilter<"FeedbackOption"> | string
  stringAnswer?: Prisma.StringNullableFilter<"FeedbackOption"> | string | null
  createdAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FeedbackOption"> | Date | string
}

export type FeedbackOptionCreateManyFeedbackQuestionInput = {
  id: string
  stringAnswer?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type FeedbackOptionUpdateWithoutFeedbackQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackOptionUncheckedUpdateWithoutFeedbackQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackOptionUncheckedUpdateManyWithoutFeedbackQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stringAnswer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FeedbackOptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  questionId?: boolean
  stringAnswer?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackOption"]>

export type FeedbackOptionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  questionId?: boolean
  stringAnswer?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackOption"]>

export type FeedbackOptionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  questionId?: boolean
  stringAnswer?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["feedbackOption"]>

export type FeedbackOptionSelectScalar = {
  id?: boolean
  questionId?: boolean
  stringAnswer?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeedbackOptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "questionId" | "stringAnswer" | "createdAt" | "updatedAt", ExtArgs["result"]["feedbackOption"]>
export type FeedbackOptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}
export type FeedbackOptionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}
export type FeedbackOptionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FeedbackQuestion?: boolean | Prisma.FeedbackQuestionDefaultArgs<ExtArgs>
}

export type $FeedbackOptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FeedbackOption"
  objects: {
    FeedbackQuestion: Prisma.$FeedbackQuestionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    questionId: string
    stringAnswer: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["feedbackOption"]>
  composites: {}
}

export type FeedbackOptionGetPayload<S extends boolean | null | undefined | FeedbackOptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload, S>

export type FeedbackOptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FeedbackOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FeedbackOptionCountAggregateInputType | true
  }

export interface FeedbackOptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackOption'], meta: { name: 'FeedbackOption' } }
  /**
   * Find zero or one FeedbackOption that matches the filter.
   * @param {FeedbackOptionFindUniqueArgs} args - Arguments to find a FeedbackOption
   * @example
   * // Get one FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackOptionFindUniqueArgs>(args: Prisma.SelectSubset<T, FeedbackOptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FeedbackOption that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackOptionFindUniqueOrThrowArgs} args - Arguments to find a FeedbackOption
   * @example
   * // Get one FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackOptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FeedbackOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackOption that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionFindFirstArgs} args - Arguments to find a FeedbackOption
   * @example
   * // Get one FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackOptionFindFirstArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FeedbackOption that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionFindFirstOrThrowArgs} args - Arguments to find a FeedbackOption
   * @example
   * // Get one FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackOptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FeedbackOptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackOptions
   * const feedbackOptions = await prisma.feedbackOption.findMany()
   * 
   * // Get first 10 FeedbackOptions
   * const feedbackOptions = await prisma.feedbackOption.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const feedbackOptionWithIdOnly = await prisma.feedbackOption.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FeedbackOptionFindManyArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FeedbackOption.
   * @param {FeedbackOptionCreateArgs} args - Arguments to create a FeedbackOption.
   * @example
   * // Create one FeedbackOption
   * const FeedbackOption = await prisma.feedbackOption.create({
   *   data: {
   *     // ... data to create a FeedbackOption
   *   }
   * })
   * 
   */
  create<T extends FeedbackOptionCreateArgs>(args: Prisma.SelectSubset<T, FeedbackOptionCreateArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FeedbackOptions.
   * @param {FeedbackOptionCreateManyArgs} args - Arguments to create many FeedbackOptions.
   * @example
   * // Create many FeedbackOptions
   * const feedbackOption = await prisma.feedbackOption.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FeedbackOptionCreateManyArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackOptions and returns the data saved in the database.
   * @param {FeedbackOptionCreateManyAndReturnArgs} args - Arguments to create many FeedbackOptions.
   * @example
   * // Create many FeedbackOptions
   * const feedbackOption = await prisma.feedbackOption.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FeedbackOptions and only return the `id`
   * const feedbackOptionWithIdOnly = await prisma.feedbackOption.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FeedbackOptionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FeedbackOption.
   * @param {FeedbackOptionDeleteArgs} args - Arguments to delete one FeedbackOption.
   * @example
   * // Delete one FeedbackOption
   * const FeedbackOption = await prisma.feedbackOption.delete({
   *   where: {
   *     // ... filter to delete one FeedbackOption
   *   }
   * })
   * 
   */
  delete<T extends FeedbackOptionDeleteArgs>(args: Prisma.SelectSubset<T, FeedbackOptionDeleteArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FeedbackOption.
   * @param {FeedbackOptionUpdateArgs} args - Arguments to update one FeedbackOption.
   * @example
   * // Update one FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FeedbackOptionUpdateArgs>(args: Prisma.SelectSubset<T, FeedbackOptionUpdateArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FeedbackOptions.
   * @param {FeedbackOptionDeleteManyArgs} args - Arguments to filter FeedbackOptions to delete.
   * @example
   * // Delete a few FeedbackOptions
   * const { count } = await prisma.feedbackOption.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FeedbackOptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FeedbackOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackOptions
   * const feedbackOption = await prisma.feedbackOption.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FeedbackOptionUpdateManyArgs>(args: Prisma.SelectSubset<T, FeedbackOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackOptions and returns the data updated in the database.
   * @param {FeedbackOptionUpdateManyAndReturnArgs} args - Arguments to update many FeedbackOptions.
   * @example
   * // Update many FeedbackOptions
   * const feedbackOption = await prisma.feedbackOption.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FeedbackOptions and only return the `id`
   * const feedbackOptionWithIdOnly = await prisma.feedbackOption.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FeedbackOptionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FeedbackOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FeedbackOption.
   * @param {FeedbackOptionUpsertArgs} args - Arguments to update or create a FeedbackOption.
   * @example
   * // Update or create a FeedbackOption
   * const feedbackOption = await prisma.feedbackOption.upsert({
   *   create: {
   *     // ... data to create a FeedbackOption
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackOption we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackOptionUpsertArgs>(args: Prisma.SelectSubset<T, FeedbackOptionUpsertArgs<ExtArgs>>): Prisma.Prisma__FeedbackOptionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FeedbackOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionCountArgs} args - Arguments to filter FeedbackOptions to count.
   * @example
   * // Count the number of FeedbackOptions
   * const count = await prisma.feedbackOption.count({
   *   where: {
   *     // ... the filter for the FeedbackOptions we want to count
   *   }
   * })
  **/
  count<T extends FeedbackOptionCountArgs>(
    args?: Prisma.Subset<T, FeedbackOptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FeedbackOptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FeedbackOptionAggregateArgs>(args: Prisma.Subset<T, FeedbackOptionAggregateArgs>): Prisma.PrismaPromise<GetFeedbackOptionAggregateType<T>>

  /**
   * Group by FeedbackOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackOptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FeedbackOptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackOptionGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackOptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FeedbackOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FeedbackOption model
 */
readonly fields: FeedbackOptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackOption.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackOptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  FeedbackQuestion<T extends Prisma.FeedbackQuestionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FeedbackQuestionDefaultArgs<ExtArgs>>): Prisma.Prisma__FeedbackQuestionClient<runtime.Types.Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FeedbackOption model
 */
export interface FeedbackOptionFieldRefs {
  readonly id: Prisma.FieldRef<"FeedbackOption", 'String'>
  readonly questionId: Prisma.FieldRef<"FeedbackOption", 'String'>
  readonly stringAnswer: Prisma.FieldRef<"FeedbackOption", 'String'>
  readonly createdAt: Prisma.FieldRef<"FeedbackOption", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FeedbackOption", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FeedbackOption findUnique
 */
export type FeedbackOptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackOption to fetch.
   */
  where: Prisma.FeedbackOptionWhereUniqueInput
}

/**
 * FeedbackOption findUniqueOrThrow
 */
export type FeedbackOptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackOption to fetch.
   */
  where: Prisma.FeedbackOptionWhereUniqueInput
}

/**
 * FeedbackOption findFirst
 */
export type FeedbackOptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackOption to fetch.
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackOptions to fetch.
   */
  orderBy?: Prisma.FeedbackOptionOrderByWithRelationInput | Prisma.FeedbackOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackOptions.
   */
  cursor?: Prisma.FeedbackOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackOptions.
   */
  distinct?: Prisma.FeedbackOptionScalarFieldEnum | Prisma.FeedbackOptionScalarFieldEnum[]
}

/**
 * FeedbackOption findFirstOrThrow
 */
export type FeedbackOptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackOption to fetch.
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackOptions to fetch.
   */
  orderBy?: Prisma.FeedbackOptionOrderByWithRelationInput | Prisma.FeedbackOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FeedbackOptions.
   */
  cursor?: Prisma.FeedbackOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FeedbackOptions.
   */
  distinct?: Prisma.FeedbackOptionScalarFieldEnum | Prisma.FeedbackOptionScalarFieldEnum[]
}

/**
 * FeedbackOption findMany
 */
export type FeedbackOptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackOptions to fetch.
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FeedbackOptions to fetch.
   */
  orderBy?: Prisma.FeedbackOptionOrderByWithRelationInput | Prisma.FeedbackOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FeedbackOptions.
   */
  cursor?: Prisma.FeedbackOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FeedbackOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FeedbackOptions.
   */
  skip?: number
  distinct?: Prisma.FeedbackOptionScalarFieldEnum | Prisma.FeedbackOptionScalarFieldEnum[]
}

/**
 * FeedbackOption create
 */
export type FeedbackOptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackOption.
   */
  data: Prisma.XOR<Prisma.FeedbackOptionCreateInput, Prisma.FeedbackOptionUncheckedCreateInput>
}

/**
 * FeedbackOption createMany
 */
export type FeedbackOptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FeedbackOptions.
   */
  data: Prisma.FeedbackOptionCreateManyInput | Prisma.FeedbackOptionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackOption createManyAndReturn
 */
export type FeedbackOptionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackOptions.
   */
  data: Prisma.FeedbackOptionCreateManyInput | Prisma.FeedbackOptionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackOption update
 */
export type FeedbackOptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackOption.
   */
  data: Prisma.XOR<Prisma.FeedbackOptionUpdateInput, Prisma.FeedbackOptionUncheckedUpdateInput>
  /**
   * Choose, which FeedbackOption to update.
   */
  where: Prisma.FeedbackOptionWhereUniqueInput
}

/**
 * FeedbackOption updateMany
 */
export type FeedbackOptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FeedbackOptions.
   */
  data: Prisma.XOR<Prisma.FeedbackOptionUpdateManyMutationInput, Prisma.FeedbackOptionUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackOptions to update
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * Limit how many FeedbackOptions to update.
   */
  limit?: number
}

/**
 * FeedbackOption updateManyAndReturn
 */
export type FeedbackOptionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackOptions.
   */
  data: Prisma.XOR<Prisma.FeedbackOptionUpdateManyMutationInput, Prisma.FeedbackOptionUncheckedUpdateManyInput>
  /**
   * Filter which FeedbackOptions to update
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * Limit how many FeedbackOptions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackOption upsert
 */
export type FeedbackOptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackOption to update in case it exists.
   */
  where: Prisma.FeedbackOptionWhereUniqueInput
  /**
   * In case the FeedbackOption found by the `where` argument doesn't exist, create a new FeedbackOption with this data.
   */
  create: Prisma.XOR<Prisma.FeedbackOptionCreateInput, Prisma.FeedbackOptionUncheckedCreateInput>
  /**
   * In case the FeedbackOption was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeedbackOptionUpdateInput, Prisma.FeedbackOptionUncheckedUpdateInput>
}

/**
 * FeedbackOption delete
 */
export type FeedbackOptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
  /**
   * Filter which FeedbackOption to delete.
   */
  where: Prisma.FeedbackOptionWhereUniqueInput
}

/**
 * FeedbackOption deleteMany
 */
export type FeedbackOptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FeedbackOptions to delete
   */
  where?: Prisma.FeedbackOptionWhereInput
  /**
   * Limit how many FeedbackOptions to delete.
   */
  limit?: number
}

/**
 * FeedbackOption without action
 */
export type FeedbackOptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FeedbackOption
   */
  select?: Prisma.FeedbackOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackOption
   */
  omit?: Prisma.FeedbackOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackOptionInclude<ExtArgs> | null
}
