
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Exhibitor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Exhibitor
 * 
 */
export type ExhibitorModel = runtime.Types.Result.DefaultSelection<Prisma.$ExhibitorPayload>

export type AggregateExhibitor = {
  _count: ExhibitorCountAggregateOutputType | null
  _min: ExhibitorMinAggregateOutputType | null
  _max: ExhibitorMaxAggregateOutputType | null
}

export type ExhibitorMinAggregateOutputType = {
  id: string | null
  companyName: string | null
  name: string | null
  email: string | null
  phoneNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExhibitorMaxAggregateOutputType = {
  id: string | null
  companyName: string | null
  name: string | null
  email: string | null
  phoneNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExhibitorCountAggregateOutputType = {
  id: number
  companyName: number
  name: number
  email: number
  phoneNumber: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExhibitorMinAggregateInputType = {
  id?: true
  companyName?: true
  name?: true
  email?: true
  phoneNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type ExhibitorMaxAggregateInputType = {
  id?: true
  companyName?: true
  name?: true
  email?: true
  phoneNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type ExhibitorCountAggregateInputType = {
  id?: true
  companyName?: true
  name?: true
  email?: true
  phoneNumber?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExhibitorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exhibitor to aggregate.
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exhibitors to fetch.
   */
  orderBy?: Prisma.ExhibitorOrderByWithRelationInput | Prisma.ExhibitorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExhibitorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exhibitors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exhibitors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Exhibitors
  **/
  _count?: true | ExhibitorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExhibitorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExhibitorMaxAggregateInputType
}

export type GetExhibitorAggregateType<T extends ExhibitorAggregateArgs> = {
      [P in keyof T & keyof AggregateExhibitor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExhibitor[P]>
    : Prisma.GetScalarType<T[P], AggregateExhibitor[P]>
}




export type ExhibitorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExhibitorWhereInput
  orderBy?: Prisma.ExhibitorOrderByWithAggregationInput | Prisma.ExhibitorOrderByWithAggregationInput[]
  by: Prisma.ExhibitorScalarFieldEnum[] | Prisma.ExhibitorScalarFieldEnum
  having?: Prisma.ExhibitorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExhibitorCountAggregateInputType | true
  _min?: ExhibitorMinAggregateInputType
  _max?: ExhibitorMaxAggregateInputType
}

export type ExhibitorGroupByOutputType = {
  id: string
  companyName: string
  name: string
  email: string
  phoneNumber: string
  createdAt: Date
  updatedAt: Date
  _count: ExhibitorCountAggregateOutputType | null
  _min: ExhibitorMinAggregateOutputType | null
  _max: ExhibitorMaxAggregateOutputType | null
}

type GetExhibitorGroupByPayload<T extends ExhibitorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExhibitorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExhibitorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExhibitorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExhibitorGroupByOutputType[P]>
      }
    >
  > 



export type ExhibitorWhereInput = {
  AND?: Prisma.ExhibitorWhereInput | Prisma.ExhibitorWhereInput[]
  OR?: Prisma.ExhibitorWhereInput[]
  NOT?: Prisma.ExhibitorWhereInput | Prisma.ExhibitorWhereInput[]
  id?: Prisma.StringFilter<"Exhibitor"> | string
  companyName?: Prisma.StringFilter<"Exhibitor"> | string
  name?: Prisma.StringFilter<"Exhibitor"> | string
  email?: Prisma.StringFilter<"Exhibitor"> | string
  phoneNumber?: Prisma.StringFilter<"Exhibitor"> | string
  createdAt?: Prisma.DateTimeFilter<"Exhibitor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Exhibitor"> | Date | string
}

export type ExhibitorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExhibitorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExhibitorWhereInput | Prisma.ExhibitorWhereInput[]
  OR?: Prisma.ExhibitorWhereInput[]
  NOT?: Prisma.ExhibitorWhereInput | Prisma.ExhibitorWhereInput[]
  companyName?: Prisma.StringFilter<"Exhibitor"> | string
  name?: Prisma.StringFilter<"Exhibitor"> | string
  email?: Prisma.StringFilter<"Exhibitor"> | string
  phoneNumber?: Prisma.StringFilter<"Exhibitor"> | string
  createdAt?: Prisma.DateTimeFilter<"Exhibitor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Exhibitor"> | Date | string
}, "id">

export type ExhibitorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExhibitorCountOrderByAggregateInput
  _max?: Prisma.ExhibitorMaxOrderByAggregateInput
  _min?: Prisma.ExhibitorMinOrderByAggregateInput
}

export type ExhibitorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExhibitorScalarWhereWithAggregatesInput | Prisma.ExhibitorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExhibitorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExhibitorScalarWhereWithAggregatesInput | Prisma.ExhibitorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Exhibitor"> | string
  companyName?: Prisma.StringWithAggregatesFilter<"Exhibitor"> | string
  name?: Prisma.StringWithAggregatesFilter<"Exhibitor"> | string
  email?: Prisma.StringWithAggregatesFilter<"Exhibitor"> | string
  phoneNumber?: Prisma.StringWithAggregatesFilter<"Exhibitor"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Exhibitor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Exhibitor"> | Date | string
}

export type ExhibitorCreateInput = {
  id: string
  companyName: string
  name: string
  email: string
  phoneNumber: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ExhibitorUncheckedCreateInput = {
  id: string
  companyName: string
  name: string
  email: string
  phoneNumber: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ExhibitorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExhibitorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExhibitorCreateManyInput = {
  id: string
  companyName: string
  name: string
  email: string
  phoneNumber: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ExhibitorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExhibitorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExhibitorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExhibitorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExhibitorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type ExhibitorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyName?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["exhibitor"]>

export type ExhibitorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyName?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["exhibitor"]>

export type ExhibitorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyName?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["exhibitor"]>

export type ExhibitorSelectScalar = {
  id?: boolean
  companyName?: boolean
  name?: boolean
  email?: boolean
  phoneNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExhibitorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "companyName" | "name" | "email" | "phoneNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["exhibitor"]>

export type $ExhibitorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Exhibitor"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    companyName: string
    name: string
    email: string
    phoneNumber: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["exhibitor"]>
  composites: {}
}

export type ExhibitorGetPayload<S extends boolean | null | undefined | ExhibitorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload, S>

export type ExhibitorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExhibitorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExhibitorCountAggregateInputType | true
  }

export interface ExhibitorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exhibitor'], meta: { name: 'Exhibitor' } }
  /**
   * Find zero or one Exhibitor that matches the filter.
   * @param {ExhibitorFindUniqueArgs} args - Arguments to find a Exhibitor
   * @example
   * // Get one Exhibitor
   * const exhibitor = await prisma.exhibitor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExhibitorFindUniqueArgs>(args: Prisma.SelectSubset<T, ExhibitorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Exhibitor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExhibitorFindUniqueOrThrowArgs} args - Arguments to find a Exhibitor
   * @example
   * // Get one Exhibitor
   * const exhibitor = await prisma.exhibitor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExhibitorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExhibitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exhibitor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorFindFirstArgs} args - Arguments to find a Exhibitor
   * @example
   * // Get one Exhibitor
   * const exhibitor = await prisma.exhibitor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExhibitorFindFirstArgs>(args?: Prisma.SelectSubset<T, ExhibitorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exhibitor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorFindFirstOrThrowArgs} args - Arguments to find a Exhibitor
   * @example
   * // Get one Exhibitor
   * const exhibitor = await prisma.exhibitor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExhibitorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExhibitorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Exhibitors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exhibitors
   * const exhibitors = await prisma.exhibitor.findMany()
   * 
   * // Get first 10 Exhibitors
   * const exhibitors = await prisma.exhibitor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exhibitorWithIdOnly = await prisma.exhibitor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExhibitorFindManyArgs>(args?: Prisma.SelectSubset<T, ExhibitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Exhibitor.
   * @param {ExhibitorCreateArgs} args - Arguments to create a Exhibitor.
   * @example
   * // Create one Exhibitor
   * const Exhibitor = await prisma.exhibitor.create({
   *   data: {
   *     // ... data to create a Exhibitor
   *   }
   * })
   * 
   */
  create<T extends ExhibitorCreateArgs>(args: Prisma.SelectSubset<T, ExhibitorCreateArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Exhibitors.
   * @param {ExhibitorCreateManyArgs} args - Arguments to create many Exhibitors.
   * @example
   * // Create many Exhibitors
   * const exhibitor = await prisma.exhibitor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExhibitorCreateManyArgs>(args?: Prisma.SelectSubset<T, ExhibitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Exhibitors and returns the data saved in the database.
   * @param {ExhibitorCreateManyAndReturnArgs} args - Arguments to create many Exhibitors.
   * @example
   * // Create many Exhibitors
   * const exhibitor = await prisma.exhibitor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Exhibitors and only return the `id`
   * const exhibitorWithIdOnly = await prisma.exhibitor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExhibitorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExhibitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Exhibitor.
   * @param {ExhibitorDeleteArgs} args - Arguments to delete one Exhibitor.
   * @example
   * // Delete one Exhibitor
   * const Exhibitor = await prisma.exhibitor.delete({
   *   where: {
   *     // ... filter to delete one Exhibitor
   *   }
   * })
   * 
   */
  delete<T extends ExhibitorDeleteArgs>(args: Prisma.SelectSubset<T, ExhibitorDeleteArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Exhibitor.
   * @param {ExhibitorUpdateArgs} args - Arguments to update one Exhibitor.
   * @example
   * // Update one Exhibitor
   * const exhibitor = await prisma.exhibitor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExhibitorUpdateArgs>(args: Prisma.SelectSubset<T, ExhibitorUpdateArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Exhibitors.
   * @param {ExhibitorDeleteManyArgs} args - Arguments to filter Exhibitors to delete.
   * @example
   * // Delete a few Exhibitors
   * const { count } = await prisma.exhibitor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExhibitorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExhibitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exhibitors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exhibitors
   * const exhibitor = await prisma.exhibitor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExhibitorUpdateManyArgs>(args: Prisma.SelectSubset<T, ExhibitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exhibitors and returns the data updated in the database.
   * @param {ExhibitorUpdateManyAndReturnArgs} args - Arguments to update many Exhibitors.
   * @example
   * // Update many Exhibitors
   * const exhibitor = await prisma.exhibitor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Exhibitors and only return the `id`
   * const exhibitorWithIdOnly = await prisma.exhibitor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExhibitorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExhibitorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Exhibitor.
   * @param {ExhibitorUpsertArgs} args - Arguments to update or create a Exhibitor.
   * @example
   * // Update or create a Exhibitor
   * const exhibitor = await prisma.exhibitor.upsert({
   *   create: {
   *     // ... data to create a Exhibitor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exhibitor we want to update
   *   }
   * })
   */
  upsert<T extends ExhibitorUpsertArgs>(args: Prisma.SelectSubset<T, ExhibitorUpsertArgs<ExtArgs>>): Prisma.Prisma__ExhibitorClient<runtime.Types.Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Exhibitors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorCountArgs} args - Arguments to filter Exhibitors to count.
   * @example
   * // Count the number of Exhibitors
   * const count = await prisma.exhibitor.count({
   *   where: {
   *     // ... the filter for the Exhibitors we want to count
   *   }
   * })
  **/
  count<T extends ExhibitorCountArgs>(
    args?: Prisma.Subset<T, ExhibitorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExhibitorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Exhibitor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExhibitorAggregateArgs>(args: Prisma.Subset<T, ExhibitorAggregateArgs>): Prisma.PrismaPromise<GetExhibitorAggregateType<T>>

  /**
   * Group by Exhibitor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExhibitorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExhibitorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExhibitorGroupByArgs['orderBy'] }
      : { orderBy?: ExhibitorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExhibitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExhibitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Exhibitor model
 */
readonly fields: ExhibitorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Exhibitor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExhibitorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Exhibitor model
 */
export interface ExhibitorFieldRefs {
  readonly id: Prisma.FieldRef<"Exhibitor", 'String'>
  readonly companyName: Prisma.FieldRef<"Exhibitor", 'String'>
  readonly name: Prisma.FieldRef<"Exhibitor", 'String'>
  readonly email: Prisma.FieldRef<"Exhibitor", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"Exhibitor", 'String'>
  readonly createdAt: Prisma.FieldRef<"Exhibitor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Exhibitor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Exhibitor findUnique
 */
export type ExhibitorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter, which Exhibitor to fetch.
   */
  where: Prisma.ExhibitorWhereUniqueInput
}

/**
 * Exhibitor findUniqueOrThrow
 */
export type ExhibitorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter, which Exhibitor to fetch.
   */
  where: Prisma.ExhibitorWhereUniqueInput
}

/**
 * Exhibitor findFirst
 */
export type ExhibitorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter, which Exhibitor to fetch.
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exhibitors to fetch.
   */
  orderBy?: Prisma.ExhibitorOrderByWithRelationInput | Prisma.ExhibitorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exhibitors.
   */
  cursor?: Prisma.ExhibitorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exhibitors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exhibitors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exhibitors.
   */
  distinct?: Prisma.ExhibitorScalarFieldEnum | Prisma.ExhibitorScalarFieldEnum[]
}

/**
 * Exhibitor findFirstOrThrow
 */
export type ExhibitorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter, which Exhibitor to fetch.
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exhibitors to fetch.
   */
  orderBy?: Prisma.ExhibitorOrderByWithRelationInput | Prisma.ExhibitorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exhibitors.
   */
  cursor?: Prisma.ExhibitorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exhibitors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exhibitors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exhibitors.
   */
  distinct?: Prisma.ExhibitorScalarFieldEnum | Prisma.ExhibitorScalarFieldEnum[]
}

/**
 * Exhibitor findMany
 */
export type ExhibitorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter, which Exhibitors to fetch.
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exhibitors to fetch.
   */
  orderBy?: Prisma.ExhibitorOrderByWithRelationInput | Prisma.ExhibitorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Exhibitors.
   */
  cursor?: Prisma.ExhibitorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exhibitors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exhibitors.
   */
  skip?: number
  distinct?: Prisma.ExhibitorScalarFieldEnum | Prisma.ExhibitorScalarFieldEnum[]
}

/**
 * Exhibitor create
 */
export type ExhibitorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * The data needed to create a Exhibitor.
   */
  data: Prisma.XOR<Prisma.ExhibitorCreateInput, Prisma.ExhibitorUncheckedCreateInput>
}

/**
 * Exhibitor createMany
 */
export type ExhibitorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Exhibitors.
   */
  data: Prisma.ExhibitorCreateManyInput | Prisma.ExhibitorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exhibitor createManyAndReturn
 */
export type ExhibitorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * The data used to create many Exhibitors.
   */
  data: Prisma.ExhibitorCreateManyInput | Prisma.ExhibitorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exhibitor update
 */
export type ExhibitorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * The data needed to update a Exhibitor.
   */
  data: Prisma.XOR<Prisma.ExhibitorUpdateInput, Prisma.ExhibitorUncheckedUpdateInput>
  /**
   * Choose, which Exhibitor to update.
   */
  where: Prisma.ExhibitorWhereUniqueInput
}

/**
 * Exhibitor updateMany
 */
export type ExhibitorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Exhibitors.
   */
  data: Prisma.XOR<Prisma.ExhibitorUpdateManyMutationInput, Prisma.ExhibitorUncheckedUpdateManyInput>
  /**
   * Filter which Exhibitors to update
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * Limit how many Exhibitors to update.
   */
  limit?: number
}

/**
 * Exhibitor updateManyAndReturn
 */
export type ExhibitorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * The data used to update Exhibitors.
   */
  data: Prisma.XOR<Prisma.ExhibitorUpdateManyMutationInput, Prisma.ExhibitorUncheckedUpdateManyInput>
  /**
   * Filter which Exhibitors to update
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * Limit how many Exhibitors to update.
   */
  limit?: number
}

/**
 * Exhibitor upsert
 */
export type ExhibitorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * The filter to search for the Exhibitor to update in case it exists.
   */
  where: Prisma.ExhibitorWhereUniqueInput
  /**
   * In case the Exhibitor found by the `where` argument doesn't exist, create a new Exhibitor with this data.
   */
  create: Prisma.XOR<Prisma.ExhibitorCreateInput, Prisma.ExhibitorUncheckedCreateInput>
  /**
   * In case the Exhibitor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExhibitorUpdateInput, Prisma.ExhibitorUncheckedUpdateInput>
}

/**
 * Exhibitor delete
 */
export type ExhibitorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
  /**
   * Filter which Exhibitor to delete.
   */
  where: Prisma.ExhibitorWhereUniqueInput
}

/**
 * Exhibitor deleteMany
 */
export type ExhibitorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exhibitors to delete
   */
  where?: Prisma.ExhibitorWhereInput
  /**
   * Limit how many Exhibitors to delete.
   */
  limit?: number
}

/**
 * Exhibitor without action
 */
export type ExhibitorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exhibitor
   */
  select?: Prisma.ExhibitorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exhibitor
   */
  omit?: Prisma.ExhibitorOmit<ExtArgs> | null
}
