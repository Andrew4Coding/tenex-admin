
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MiniQuiz` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MiniQuiz
 * 
 */
export type MiniQuizModel = runtime.Types.Result.DefaultSelection<Prisma.$MiniQuizPayload>

export type AggregateMiniQuiz = {
  _count: MiniQuizCountAggregateOutputType | null
  _min: MiniQuizMinAggregateOutputType | null
  _max: MiniQuizMaxAggregateOutputType | null
}

export type MiniQuizMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  quizName: string | null
}

export type MiniQuizMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  quizName: string | null
}

export type MiniQuizCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  quizName: number
  _all: number
}


export type MiniQuizMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  quizName?: true
}

export type MiniQuizMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  quizName?: true
}

export type MiniQuizCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  quizName?: true
  _all?: true
}

export type MiniQuizAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuiz to aggregate.
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizs to fetch.
   */
  orderBy?: Prisma.MiniQuizOrderByWithRelationInput | Prisma.MiniQuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MiniQuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MiniQuizs
  **/
  _count?: true | MiniQuizCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MiniQuizMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MiniQuizMaxAggregateInputType
}

export type GetMiniQuizAggregateType<T extends MiniQuizAggregateArgs> = {
      [P in keyof T & keyof AggregateMiniQuiz]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMiniQuiz[P]>
    : Prisma.GetScalarType<T[P], AggregateMiniQuiz[P]>
}




export type MiniQuizGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MiniQuizWhereInput
  orderBy?: Prisma.MiniQuizOrderByWithAggregationInput | Prisma.MiniQuizOrderByWithAggregationInput[]
  by: Prisma.MiniQuizScalarFieldEnum[] | Prisma.MiniQuizScalarFieldEnum
  having?: Prisma.MiniQuizScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MiniQuizCountAggregateInputType | true
  _min?: MiniQuizMinAggregateInputType
  _max?: MiniQuizMaxAggregateInputType
}

export type MiniQuizGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  quizName: string | null
  _count: MiniQuizCountAggregateOutputType | null
  _min: MiniQuizMinAggregateOutputType | null
  _max: MiniQuizMaxAggregateOutputType | null
}

type GetMiniQuizGroupByPayload<T extends MiniQuizGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MiniQuizGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MiniQuizGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MiniQuizGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MiniQuizGroupByOutputType[P]>
      }
    >
  > 



export type MiniQuizWhereInput = {
  AND?: Prisma.MiniQuizWhereInput | Prisma.MiniQuizWhereInput[]
  OR?: Prisma.MiniQuizWhereInput[]
  NOT?: Prisma.MiniQuizWhereInput | Prisma.MiniQuizWhereInput[]
  id?: Prisma.StringFilter<"MiniQuiz"> | string
  createdAt?: Prisma.DateTimeFilter<"MiniQuiz"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuiz"> | Date | string
  quizName?: Prisma.StringNullableFilter<"MiniQuiz"> | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptListRelationFilter
  MiniQuizQuestion?: Prisma.MiniQuizQuestionListRelationFilter
}

export type MiniQuizOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  quizName?: Prisma.SortOrderInput | Prisma.SortOrder
  MiniQuizAttempt?: Prisma.MiniQuizAttemptOrderByRelationAggregateInput
  MiniQuizQuestion?: Prisma.MiniQuizQuestionOrderByRelationAggregateInput
}

export type MiniQuizWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MiniQuizWhereInput | Prisma.MiniQuizWhereInput[]
  OR?: Prisma.MiniQuizWhereInput[]
  NOT?: Prisma.MiniQuizWhereInput | Prisma.MiniQuizWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"MiniQuiz"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuiz"> | Date | string
  quizName?: Prisma.StringNullableFilter<"MiniQuiz"> | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptListRelationFilter
  MiniQuizQuestion?: Prisma.MiniQuizQuestionListRelationFilter
}, "id">

export type MiniQuizOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  quizName?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.MiniQuizCountOrderByAggregateInput
  _max?: Prisma.MiniQuizMaxOrderByAggregateInput
  _min?: Prisma.MiniQuizMinOrderByAggregateInput
}

export type MiniQuizScalarWhereWithAggregatesInput = {
  AND?: Prisma.MiniQuizScalarWhereWithAggregatesInput | Prisma.MiniQuizScalarWhereWithAggregatesInput[]
  OR?: Prisma.MiniQuizScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MiniQuizScalarWhereWithAggregatesInput | Prisma.MiniQuizScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MiniQuiz"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuiz"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuiz"> | Date | string
  quizName?: Prisma.StringNullableWithAggregatesFilter<"MiniQuiz"> | string | null
}

export type MiniQuizCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptCreateNestedManyWithoutMiniQuizInput
  MiniQuizQuestion?: Prisma.MiniQuizQuestionCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizUncheckedCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUncheckedCreateNestedManyWithoutMiniQuizInput
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUncheckedCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUpdateManyWithoutMiniQuizNestedInput
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUpdateManyWithoutMiniQuizNestedInput
}

export type MiniQuizUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUncheckedUpdateManyWithoutMiniQuizNestedInput
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUncheckedUpdateManyWithoutMiniQuizNestedInput
}

export type MiniQuizCreateManyInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
}

export type MiniQuizUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MiniQuizUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MiniQuizCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  quizName?: Prisma.SortOrder
}

export type MiniQuizMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  quizName?: Prisma.SortOrder
}

export type MiniQuizMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  quizName?: Prisma.SortOrder
}

export type MiniQuizScalarRelationFilter = {
  is?: Prisma.MiniQuizWhereInput
  isNot?: Prisma.MiniQuizWhereInput
}

export type MiniQuizCreateNestedOneWithoutMiniQuizAttemptInput = {
  create?: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizAttemptInput>
  connectOrCreate?: Prisma.MiniQuizCreateOrConnectWithoutMiniQuizAttemptInput
  connect?: Prisma.MiniQuizWhereUniqueInput
}

export type MiniQuizUpdateOneRequiredWithoutMiniQuizAttemptNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizAttemptInput>
  connectOrCreate?: Prisma.MiniQuizCreateOrConnectWithoutMiniQuizAttemptInput
  upsert?: Prisma.MiniQuizUpsertWithoutMiniQuizAttemptInput
  connect?: Prisma.MiniQuizWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MiniQuizUpdateToOneWithWhereWithoutMiniQuizAttemptInput, Prisma.MiniQuizUpdateWithoutMiniQuizAttemptInput>, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizAttemptInput>
}

export type MiniQuizCreateNestedOneWithoutMiniQuizQuestionInput = {
  create?: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizQuestionInput>
  connectOrCreate?: Prisma.MiniQuizCreateOrConnectWithoutMiniQuizQuestionInput
  connect?: Prisma.MiniQuizWhereUniqueInput
}

export type MiniQuizUpdateOneRequiredWithoutMiniQuizQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizQuestionInput>
  connectOrCreate?: Prisma.MiniQuizCreateOrConnectWithoutMiniQuizQuestionInput
  upsert?: Prisma.MiniQuizUpsertWithoutMiniQuizQuestionInput
  connect?: Prisma.MiniQuizWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MiniQuizUpdateToOneWithWhereWithoutMiniQuizQuestionInput, Prisma.MiniQuizUpdateWithoutMiniQuizQuestionInput>, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizQuestionInput>
}

export type MiniQuizCreateWithoutMiniQuizAttemptInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizQuestion?: Prisma.MiniQuizQuestionCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizUncheckedCreateWithoutMiniQuizAttemptInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUncheckedCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizCreateOrConnectWithoutMiniQuizAttemptInput = {
  where: Prisma.MiniQuizWhereUniqueInput
  create: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizAttemptInput>
}

export type MiniQuizUpsertWithoutMiniQuizAttemptInput = {
  update: Prisma.XOR<Prisma.MiniQuizUpdateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizAttemptInput>
  create: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizAttemptInput>
  where?: Prisma.MiniQuizWhereInput
}

export type MiniQuizUpdateToOneWithWhereWithoutMiniQuizAttemptInput = {
  where?: Prisma.MiniQuizWhereInput
  data: Prisma.XOR<Prisma.MiniQuizUpdateWithoutMiniQuizAttemptInput, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizAttemptInput>
}

export type MiniQuizUpdateWithoutMiniQuizAttemptInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUpdateManyWithoutMiniQuizNestedInput
}

export type MiniQuizUncheckedUpdateWithoutMiniQuizAttemptInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizQuestion?: Prisma.MiniQuizQuestionUncheckedUpdateManyWithoutMiniQuizNestedInput
}

export type MiniQuizCreateWithoutMiniQuizQuestionInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizUncheckedCreateWithoutMiniQuizQuestionInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  quizName?: string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUncheckedCreateNestedManyWithoutMiniQuizInput
}

export type MiniQuizCreateOrConnectWithoutMiniQuizQuestionInput = {
  where: Prisma.MiniQuizWhereUniqueInput
  create: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizQuestionInput>
}

export type MiniQuizUpsertWithoutMiniQuizQuestionInput = {
  update: Prisma.XOR<Prisma.MiniQuizUpdateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizQuestionInput>
  create: Prisma.XOR<Prisma.MiniQuizCreateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedCreateWithoutMiniQuizQuestionInput>
  where?: Prisma.MiniQuizWhereInput
}

export type MiniQuizUpdateToOneWithWhereWithoutMiniQuizQuestionInput = {
  where?: Prisma.MiniQuizWhereInput
  data: Prisma.XOR<Prisma.MiniQuizUpdateWithoutMiniQuizQuestionInput, Prisma.MiniQuizUncheckedUpdateWithoutMiniQuizQuestionInput>
}

export type MiniQuizUpdateWithoutMiniQuizQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUpdateManyWithoutMiniQuizNestedInput
}

export type MiniQuizUncheckedUpdateWithoutMiniQuizQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  MiniQuizAttempt?: Prisma.MiniQuizAttemptUncheckedUpdateManyWithoutMiniQuizNestedInput
}


/**
 * Count Type MiniQuizCountOutputType
 */

export type MiniQuizCountOutputType = {
  MiniQuizAttempt: number
  MiniQuizQuestion: number
}

export type MiniQuizCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuizAttempt?: boolean | MiniQuizCountOutputTypeCountMiniQuizAttemptArgs
  MiniQuizQuestion?: boolean | MiniQuizCountOutputTypeCountMiniQuizQuestionArgs
}

/**
 * MiniQuizCountOutputType without action
 */
export type MiniQuizCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizCountOutputType
   */
  select?: Prisma.MiniQuizCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MiniQuizCountOutputType without action
 */
export type MiniQuizCountOutputTypeCountMiniQuizAttemptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MiniQuizAttemptWhereInput
}

/**
 * MiniQuizCountOutputType without action
 */
export type MiniQuizCountOutputTypeCountMiniQuizQuestionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MiniQuizQuestionWhereInput
}


export type MiniQuizSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  quizName?: boolean
  MiniQuizAttempt?: boolean | Prisma.MiniQuiz$MiniQuizAttemptArgs<ExtArgs>
  MiniQuizQuestion?: boolean | Prisma.MiniQuiz$MiniQuizQuestionArgs<ExtArgs>
  _count?: boolean | Prisma.MiniQuizCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuiz"]>

export type MiniQuizSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  quizName?: boolean
}, ExtArgs["result"]["miniQuiz"]>

export type MiniQuizSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  quizName?: boolean
}, ExtArgs["result"]["miniQuiz"]>

export type MiniQuizSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  quizName?: boolean
}

export type MiniQuizOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "quizName", ExtArgs["result"]["miniQuiz"]>
export type MiniQuizInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuizAttempt?: boolean | Prisma.MiniQuiz$MiniQuizAttemptArgs<ExtArgs>
  MiniQuizQuestion?: boolean | Prisma.MiniQuiz$MiniQuizQuestionArgs<ExtArgs>
  _count?: boolean | Prisma.MiniQuizCountOutputTypeDefaultArgs<ExtArgs>
}
export type MiniQuizIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MiniQuizIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MiniQuizPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MiniQuiz"
  objects: {
    MiniQuizAttempt: Prisma.$MiniQuizAttemptPayload<ExtArgs>[]
    MiniQuizQuestion: Prisma.$MiniQuizQuestionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    quizName: string | null
  }, ExtArgs["result"]["miniQuiz"]>
  composites: {}
}

export type MiniQuizGetPayload<S extends boolean | null | undefined | MiniQuizDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload, S>

export type MiniQuizCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MiniQuizFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MiniQuizCountAggregateInputType | true
  }

export interface MiniQuizDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MiniQuiz'], meta: { name: 'MiniQuiz' } }
  /**
   * Find zero or one MiniQuiz that matches the filter.
   * @param {MiniQuizFindUniqueArgs} args - Arguments to find a MiniQuiz
   * @example
   * // Get one MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MiniQuizFindUniqueArgs>(args: Prisma.SelectSubset<T, MiniQuizFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MiniQuiz that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MiniQuizFindUniqueOrThrowArgs} args - Arguments to find a MiniQuiz
   * @example
   * // Get one MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MiniQuizFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MiniQuizFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuiz that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizFindFirstArgs} args - Arguments to find a MiniQuiz
   * @example
   * // Get one MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MiniQuizFindFirstArgs>(args?: Prisma.SelectSubset<T, MiniQuizFindFirstArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuiz that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizFindFirstOrThrowArgs} args - Arguments to find a MiniQuiz
   * @example
   * // Get one MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MiniQuizFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MiniQuizFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MiniQuizs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MiniQuizs
   * const miniQuizs = await prisma.miniQuiz.findMany()
   * 
   * // Get first 10 MiniQuizs
   * const miniQuizs = await prisma.miniQuiz.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const miniQuizWithIdOnly = await prisma.miniQuiz.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MiniQuizFindManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MiniQuiz.
   * @param {MiniQuizCreateArgs} args - Arguments to create a MiniQuiz.
   * @example
   * // Create one MiniQuiz
   * const MiniQuiz = await prisma.miniQuiz.create({
   *   data: {
   *     // ... data to create a MiniQuiz
   *   }
   * })
   * 
   */
  create<T extends MiniQuizCreateArgs>(args: Prisma.SelectSubset<T, MiniQuizCreateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MiniQuizs.
   * @param {MiniQuizCreateManyArgs} args - Arguments to create many MiniQuizs.
   * @example
   * // Create many MiniQuizs
   * const miniQuiz = await prisma.miniQuiz.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MiniQuizCreateManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MiniQuizs and returns the data saved in the database.
   * @param {MiniQuizCreateManyAndReturnArgs} args - Arguments to create many MiniQuizs.
   * @example
   * // Create many MiniQuizs
   * const miniQuiz = await prisma.miniQuiz.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MiniQuizs and only return the `id`
   * const miniQuizWithIdOnly = await prisma.miniQuiz.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MiniQuizCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MiniQuizCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MiniQuiz.
   * @param {MiniQuizDeleteArgs} args - Arguments to delete one MiniQuiz.
   * @example
   * // Delete one MiniQuiz
   * const MiniQuiz = await prisma.miniQuiz.delete({
   *   where: {
   *     // ... filter to delete one MiniQuiz
   *   }
   * })
   * 
   */
  delete<T extends MiniQuizDeleteArgs>(args: Prisma.SelectSubset<T, MiniQuizDeleteArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MiniQuiz.
   * @param {MiniQuizUpdateArgs} args - Arguments to update one MiniQuiz.
   * @example
   * // Update one MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MiniQuizUpdateArgs>(args: Prisma.SelectSubset<T, MiniQuizUpdateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MiniQuizs.
   * @param {MiniQuizDeleteManyArgs} args - Arguments to filter MiniQuizs to delete.
   * @example
   * // Delete a few MiniQuizs
   * const { count } = await prisma.miniQuiz.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MiniQuizDeleteManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MiniQuizs
   * const miniQuiz = await prisma.miniQuiz.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MiniQuizUpdateManyArgs>(args: Prisma.SelectSubset<T, MiniQuizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizs and returns the data updated in the database.
   * @param {MiniQuizUpdateManyAndReturnArgs} args - Arguments to update many MiniQuizs.
   * @example
   * // Update many MiniQuizs
   * const miniQuiz = await prisma.miniQuiz.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MiniQuizs and only return the `id`
   * const miniQuizWithIdOnly = await prisma.miniQuiz.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MiniQuizUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MiniQuizUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MiniQuiz.
   * @param {MiniQuizUpsertArgs} args - Arguments to update or create a MiniQuiz.
   * @example
   * // Update or create a MiniQuiz
   * const miniQuiz = await prisma.miniQuiz.upsert({
   *   create: {
   *     // ... data to create a MiniQuiz
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MiniQuiz we want to update
   *   }
   * })
   */
  upsert<T extends MiniQuizUpsertArgs>(args: Prisma.SelectSubset<T, MiniQuizUpsertArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MiniQuizs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizCountArgs} args - Arguments to filter MiniQuizs to count.
   * @example
   * // Count the number of MiniQuizs
   * const count = await prisma.miniQuiz.count({
   *   where: {
   *     // ... the filter for the MiniQuizs we want to count
   *   }
   * })
  **/
  count<T extends MiniQuizCountArgs>(
    args?: Prisma.Subset<T, MiniQuizCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MiniQuizCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MiniQuiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MiniQuizAggregateArgs>(args: Prisma.Subset<T, MiniQuizAggregateArgs>): Prisma.PrismaPromise<GetMiniQuizAggregateType<T>>

  /**
   * Group by MiniQuiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MiniQuizGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MiniQuizGroupByArgs['orderBy'] }
      : { orderBy?: MiniQuizGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MiniQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMiniQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MiniQuiz model
 */
readonly fields: MiniQuizFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MiniQuiz.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MiniQuizClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  MiniQuizAttempt<T extends Prisma.MiniQuiz$MiniQuizAttemptArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MiniQuiz$MiniQuizAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  MiniQuizQuestion<T extends Prisma.MiniQuiz$MiniQuizQuestionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MiniQuiz$MiniQuizQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MiniQuiz model
 */
export interface MiniQuizFieldRefs {
  readonly id: Prisma.FieldRef<"MiniQuiz", 'String'>
  readonly createdAt: Prisma.FieldRef<"MiniQuiz", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MiniQuiz", 'DateTime'>
  readonly quizName: Prisma.FieldRef<"MiniQuiz", 'String'>
}
    

// Custom InputTypes
/**
 * MiniQuiz findUnique
 */
export type MiniQuizFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuiz to fetch.
   */
  where: Prisma.MiniQuizWhereUniqueInput
}

/**
 * MiniQuiz findUniqueOrThrow
 */
export type MiniQuizFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuiz to fetch.
   */
  where: Prisma.MiniQuizWhereUniqueInput
}

/**
 * MiniQuiz findFirst
 */
export type MiniQuizFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuiz to fetch.
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizs to fetch.
   */
  orderBy?: Prisma.MiniQuizOrderByWithRelationInput | Prisma.MiniQuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizs.
   */
  cursor?: Prisma.MiniQuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizs.
   */
  distinct?: Prisma.MiniQuizScalarFieldEnum | Prisma.MiniQuizScalarFieldEnum[]
}

/**
 * MiniQuiz findFirstOrThrow
 */
export type MiniQuizFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuiz to fetch.
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizs to fetch.
   */
  orderBy?: Prisma.MiniQuizOrderByWithRelationInput | Prisma.MiniQuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizs.
   */
  cursor?: Prisma.MiniQuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizs.
   */
  distinct?: Prisma.MiniQuizScalarFieldEnum | Prisma.MiniQuizScalarFieldEnum[]
}

/**
 * MiniQuiz findMany
 */
export type MiniQuizFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizs to fetch.
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizs to fetch.
   */
  orderBy?: Prisma.MiniQuizOrderByWithRelationInput | Prisma.MiniQuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MiniQuizs.
   */
  cursor?: Prisma.MiniQuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizs.
   */
  skip?: number
  distinct?: Prisma.MiniQuizScalarFieldEnum | Prisma.MiniQuizScalarFieldEnum[]
}

/**
 * MiniQuiz create
 */
export type MiniQuizCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * The data needed to create a MiniQuiz.
   */
  data: Prisma.XOR<Prisma.MiniQuizCreateInput, Prisma.MiniQuizUncheckedCreateInput>
}

/**
 * MiniQuiz createMany
 */
export type MiniQuizCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MiniQuizs.
   */
  data: Prisma.MiniQuizCreateManyInput | Prisma.MiniQuizCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MiniQuiz createManyAndReturn
 */
export type MiniQuizCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * The data used to create many MiniQuizs.
   */
  data: Prisma.MiniQuizCreateManyInput | Prisma.MiniQuizCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MiniQuiz update
 */
export type MiniQuizUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * The data needed to update a MiniQuiz.
   */
  data: Prisma.XOR<Prisma.MiniQuizUpdateInput, Prisma.MiniQuizUncheckedUpdateInput>
  /**
   * Choose, which MiniQuiz to update.
   */
  where: Prisma.MiniQuizWhereUniqueInput
}

/**
 * MiniQuiz updateMany
 */
export type MiniQuizUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MiniQuizs.
   */
  data: Prisma.XOR<Prisma.MiniQuizUpdateManyMutationInput, Prisma.MiniQuizUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizs to update
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * Limit how many MiniQuizs to update.
   */
  limit?: number
}

/**
 * MiniQuiz updateManyAndReturn
 */
export type MiniQuizUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * The data used to update MiniQuizs.
   */
  data: Prisma.XOR<Prisma.MiniQuizUpdateManyMutationInput, Prisma.MiniQuizUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizs to update
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * Limit how many MiniQuizs to update.
   */
  limit?: number
}

/**
 * MiniQuiz upsert
 */
export type MiniQuizUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * The filter to search for the MiniQuiz to update in case it exists.
   */
  where: Prisma.MiniQuizWhereUniqueInput
  /**
   * In case the MiniQuiz found by the `where` argument doesn't exist, create a new MiniQuiz with this data.
   */
  create: Prisma.XOR<Prisma.MiniQuizCreateInput, Prisma.MiniQuizUncheckedCreateInput>
  /**
   * In case the MiniQuiz was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MiniQuizUpdateInput, Prisma.MiniQuizUncheckedUpdateInput>
}

/**
 * MiniQuiz delete
 */
export type MiniQuizDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
  /**
   * Filter which MiniQuiz to delete.
   */
  where: Prisma.MiniQuizWhereUniqueInput
}

/**
 * MiniQuiz deleteMany
 */
export type MiniQuizDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuizs to delete
   */
  where?: Prisma.MiniQuizWhereInput
  /**
   * Limit how many MiniQuizs to delete.
   */
  limit?: number
}

/**
 * MiniQuiz.MiniQuizAttempt
 */
export type MiniQuiz$MiniQuizAttemptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizAttempt
   */
  select?: Prisma.MiniQuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizAttempt
   */
  omit?: Prisma.MiniQuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizAttemptInclude<ExtArgs> | null
  where?: Prisma.MiniQuizAttemptWhereInput
  orderBy?: Prisma.MiniQuizAttemptOrderByWithRelationInput | Prisma.MiniQuizAttemptOrderByWithRelationInput[]
  cursor?: Prisma.MiniQuizAttemptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MiniQuizAttemptScalarFieldEnum | Prisma.MiniQuizAttemptScalarFieldEnum[]
}

/**
 * MiniQuiz.MiniQuizQuestion
 */
export type MiniQuiz$MiniQuizQuestionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  where?: Prisma.MiniQuizQuestionWhereInput
  orderBy?: Prisma.MiniQuizQuestionOrderByWithRelationInput | Prisma.MiniQuizQuestionOrderByWithRelationInput[]
  cursor?: Prisma.MiniQuizQuestionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MiniQuizQuestionScalarFieldEnum | Prisma.MiniQuizQuestionScalarFieldEnum[]
}

/**
 * MiniQuiz without action
 */
export type MiniQuizDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuiz
   */
  select?: Prisma.MiniQuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuiz
   */
  omit?: Prisma.MiniQuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizInclude<ExtArgs> | null
}
