
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DashboardNotificationUserRead` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DashboardNotificationUserRead
 * 
 */
export type DashboardNotificationUserReadModel = runtime.Types.Result.DefaultSelection<Prisma.$DashboardNotificationUserReadPayload>

export type AggregateDashboardNotificationUserRead = {
  _count: DashboardNotificationUserReadCountAggregateOutputType | null
  _min: DashboardNotificationUserReadMinAggregateOutputType | null
  _max: DashboardNotificationUserReadMaxAggregateOutputType | null
}

export type DashboardNotificationUserReadMinAggregateOutputType = {
  id: string | null
  isOpened: boolean | null
  userId: string | null
  notificationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DashboardNotificationUserReadMaxAggregateOutputType = {
  id: string | null
  isOpened: boolean | null
  userId: string | null
  notificationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DashboardNotificationUserReadCountAggregateOutputType = {
  id: number
  isOpened: number
  userId: number
  notificationId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DashboardNotificationUserReadMinAggregateInputType = {
  id?: true
  isOpened?: true
  userId?: true
  notificationId?: true
  createdAt?: true
  updatedAt?: true
}

export type DashboardNotificationUserReadMaxAggregateInputType = {
  id?: true
  isOpened?: true
  userId?: true
  notificationId?: true
  createdAt?: true
  updatedAt?: true
}

export type DashboardNotificationUserReadCountAggregateInputType = {
  id?: true
  isOpened?: true
  userId?: true
  notificationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DashboardNotificationUserReadAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardNotificationUserRead to aggregate.
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotificationUserReads to fetch.
   */
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithRelationInput | Prisma.DashboardNotificationUserReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DashboardNotificationUserReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotificationUserReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotificationUserReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DashboardNotificationUserReads
  **/
  _count?: true | DashboardNotificationUserReadCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DashboardNotificationUserReadMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DashboardNotificationUserReadMaxAggregateInputType
}

export type GetDashboardNotificationUserReadAggregateType<T extends DashboardNotificationUserReadAggregateArgs> = {
      [P in keyof T & keyof AggregateDashboardNotificationUserRead]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDashboardNotificationUserRead[P]>
    : Prisma.GetScalarType<T[P], AggregateDashboardNotificationUserRead[P]>
}




export type DashboardNotificationUserReadGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DashboardNotificationUserReadWhereInput
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithAggregationInput | Prisma.DashboardNotificationUserReadOrderByWithAggregationInput[]
  by: Prisma.DashboardNotificationUserReadScalarFieldEnum[] | Prisma.DashboardNotificationUserReadScalarFieldEnum
  having?: Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DashboardNotificationUserReadCountAggregateInputType | true
  _min?: DashboardNotificationUserReadMinAggregateInputType
  _max?: DashboardNotificationUserReadMaxAggregateInputType
}

export type DashboardNotificationUserReadGroupByOutputType = {
  id: string
  isOpened: boolean
  userId: string
  notificationId: string
  createdAt: Date
  updatedAt: Date
  _count: DashboardNotificationUserReadCountAggregateOutputType | null
  _min: DashboardNotificationUserReadMinAggregateOutputType | null
  _max: DashboardNotificationUserReadMaxAggregateOutputType | null
}

type GetDashboardNotificationUserReadGroupByPayload<T extends DashboardNotificationUserReadGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DashboardNotificationUserReadGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DashboardNotificationUserReadGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DashboardNotificationUserReadGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DashboardNotificationUserReadGroupByOutputType[P]>
      }
    >
  > 



export type DashboardNotificationUserReadWhereInput = {
  AND?: Prisma.DashboardNotificationUserReadWhereInput | Prisma.DashboardNotificationUserReadWhereInput[]
  OR?: Prisma.DashboardNotificationUserReadWhereInput[]
  NOT?: Prisma.DashboardNotificationUserReadWhereInput | Prisma.DashboardNotificationUserReadWhereInput[]
  id?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  isOpened?: Prisma.BoolFilter<"DashboardNotificationUserRead"> | boolean
  userId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  notificationId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
  DashboardNotification?: Prisma.XOR<Prisma.DashboardNotificationScalarRelationFilter, Prisma.DashboardNotificationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}

export type DashboardNotificationUserReadOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  isOpened?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  DashboardNotification?: Prisma.DashboardNotificationOrderByWithRelationInput
  user?: Prisma.userOrderByWithRelationInput
}

export type DashboardNotificationUserReadWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_notificationId?: Prisma.DashboardNotificationUserReadUserIdNotificationIdCompoundUniqueInput
  AND?: Prisma.DashboardNotificationUserReadWhereInput | Prisma.DashboardNotificationUserReadWhereInput[]
  OR?: Prisma.DashboardNotificationUserReadWhereInput[]
  NOT?: Prisma.DashboardNotificationUserReadWhereInput | Prisma.DashboardNotificationUserReadWhereInput[]
  isOpened?: Prisma.BoolFilter<"DashboardNotificationUserRead"> | boolean
  userId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  notificationId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
  DashboardNotification?: Prisma.XOR<Prisma.DashboardNotificationScalarRelationFilter, Prisma.DashboardNotificationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}, "id" | "userId_notificationId">

export type DashboardNotificationUserReadOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  isOpened?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DashboardNotificationUserReadCountOrderByAggregateInput
  _max?: Prisma.DashboardNotificationUserReadMaxOrderByAggregateInput
  _min?: Prisma.DashboardNotificationUserReadMinOrderByAggregateInput
}

export type DashboardNotificationUserReadScalarWhereWithAggregatesInput = {
  AND?: Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput | Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput[]
  OR?: Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput | Prisma.DashboardNotificationUserReadScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DashboardNotificationUserRead"> | string
  isOpened?: Prisma.BoolWithAggregatesFilter<"DashboardNotificationUserRead"> | boolean
  userId?: Prisma.StringWithAggregatesFilter<"DashboardNotificationUserRead"> | string
  notificationId?: Prisma.StringWithAggregatesFilter<"DashboardNotificationUserRead"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DashboardNotificationUserRead"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DashboardNotificationUserRead"> | Date | string
}

export type DashboardNotificationUserReadCreateInput = {
  id: string
  isOpened: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  DashboardNotification: Prisma.DashboardNotificationCreateNestedOneWithoutDashboardNotificationUserReadInput
  user: Prisma.userCreateNestedOneWithoutDashboardNotificationUserReadInput
}

export type DashboardNotificationUserReadUncheckedCreateInput = {
  id: string
  isOpened: boolean
  userId: string
  notificationId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  DashboardNotification?: Prisma.DashboardNotificationUpdateOneRequiredWithoutDashboardNotificationUserReadNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutDashboardNotificationUserReadNestedInput
}

export type DashboardNotificationUserReadUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadCreateManyInput = {
  id: string
  isOpened: boolean
  userId: string
  notificationId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadListRelationFilter = {
  every?: Prisma.DashboardNotificationUserReadWhereInput
  some?: Prisma.DashboardNotificationUserReadWhereInput
  none?: Prisma.DashboardNotificationUserReadWhereInput
}

export type DashboardNotificationUserReadOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DashboardNotificationUserReadUserIdNotificationIdCompoundUniqueInput = {
  userId: string
  notificationId: string
}

export type DashboardNotificationUserReadCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isOpened?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardNotificationUserReadMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isOpened?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardNotificationUserReadMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isOpened?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DashboardNotificationUserReadCreateNestedManyWithoutDashboardNotificationInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput> | Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInputEnvelope
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
}

export type DashboardNotificationUserReadUncheckedCreateNestedManyWithoutDashboardNotificationInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput> | Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInputEnvelope
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
}

export type DashboardNotificationUserReadUpdateManyWithoutDashboardNotificationNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput> | Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput[]
  upsert?: Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutDashboardNotificationInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInputEnvelope
  set?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutDashboardNotificationInput[]
  updateMany?: Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutDashboardNotificationInput[]
  deleteMany?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
}

export type DashboardNotificationUserReadUncheckedUpdateManyWithoutDashboardNotificationNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput> | Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput[]
  upsert?: Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutDashboardNotificationInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInputEnvelope
  set?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutDashboardNotificationInput[]
  updateMany?: Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutDashboardNotificationInput | Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutDashboardNotificationInput[]
  deleteMany?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
}

export type DashboardNotificationUserReadCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationUserReadCreateWithoutUserInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyUserInputEnvelope
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
}

export type DashboardNotificationUserReadUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationUserReadCreateWithoutUserInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyUserInputEnvelope
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
}

export type DashboardNotificationUserReadUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationUserReadCreateWithoutUserInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyUserInputEnvelope
  set?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutUserInput | Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
}

export type DashboardNotificationUserReadUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationUserReadCreateWithoutUserInput[] | Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationUserReadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUserReadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DashboardNotificationUserReadCreateManyUserInputEnvelope
  set?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationUserReadWhereUniqueInput | Prisma.DashboardNotificationUserReadWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUserReadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutUserInput | Prisma.DashboardNotificationUserReadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
}

export type DashboardNotificationUserReadCreateWithoutDashboardNotificationInput = {
  id: string
  isOpened: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  user: Prisma.userCreateNestedOneWithoutDashboardNotificationUserReadInput
}

export type DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput = {
  id: string
  isOpened: boolean
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadCreateOrConnectWithoutDashboardNotificationInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  create: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput>
}

export type DashboardNotificationUserReadCreateManyDashboardNotificationInputEnvelope = {
  data: Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInput | Prisma.DashboardNotificationUserReadCreateManyDashboardNotificationInput[]
  skipDuplicates?: boolean
}

export type DashboardNotificationUserReadUpsertWithWhereUniqueWithoutDashboardNotificationInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  update: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateWithoutDashboardNotificationInput>
  create: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutDashboardNotificationInput>
}

export type DashboardNotificationUserReadUpdateWithWhereUniqueWithoutDashboardNotificationInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateWithoutDashboardNotificationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateWithoutDashboardNotificationInput>
}

export type DashboardNotificationUserReadUpdateManyWithWhereWithoutDashboardNotificationInput = {
  where: Prisma.DashboardNotificationUserReadScalarWhereInput
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateManyMutationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateManyWithoutDashboardNotificationInput>
}

export type DashboardNotificationUserReadScalarWhereInput = {
  AND?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
  OR?: Prisma.DashboardNotificationUserReadScalarWhereInput[]
  NOT?: Prisma.DashboardNotificationUserReadScalarWhereInput | Prisma.DashboardNotificationUserReadScalarWhereInput[]
  id?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  isOpened?: Prisma.BoolFilter<"DashboardNotificationUserRead"> | boolean
  userId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  notificationId?: Prisma.StringFilter<"DashboardNotificationUserRead"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotificationUserRead"> | Date | string
}

export type DashboardNotificationUserReadCreateWithoutUserInput = {
  id: string
  isOpened: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  DashboardNotification: Prisma.DashboardNotificationCreateNestedOneWithoutDashboardNotificationUserReadInput
}

export type DashboardNotificationUserReadUncheckedCreateWithoutUserInput = {
  id: string
  isOpened: boolean
  notificationId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadCreateOrConnectWithoutUserInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  create: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput>
}

export type DashboardNotificationUserReadCreateManyUserInputEnvelope = {
  data: Prisma.DashboardNotificationUserReadCreateManyUserInput | Prisma.DashboardNotificationUserReadCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type DashboardNotificationUserReadUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  update: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedCreateWithoutUserInput>
}

export type DashboardNotificationUserReadUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateWithoutUserInput, Prisma.DashboardNotificationUserReadUncheckedUpdateWithoutUserInput>
}

export type DashboardNotificationUserReadUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DashboardNotificationUserReadScalarWhereInput
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateManyMutationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateManyWithoutUserInput>
}

export type DashboardNotificationUserReadCreateManyDashboardNotificationInput = {
  id: string
  isOpened: boolean
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadUpdateWithoutDashboardNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.userUpdateOneRequiredWithoutDashboardNotificationUserReadNestedInput
}

export type DashboardNotificationUserReadUncheckedUpdateWithoutDashboardNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadUncheckedUpdateManyWithoutDashboardNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadCreateManyUserInput = {
  id: string
  isOpened: boolean
  notificationId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DashboardNotificationUserReadUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  DashboardNotification?: Prisma.DashboardNotificationUpdateOneRequiredWithoutDashboardNotificationUserReadNestedInput
}

export type DashboardNotificationUserReadUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DashboardNotificationUserReadUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isOpened?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DashboardNotificationUserReadSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isOpened?: boolean
  userId?: boolean
  notificationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardNotificationUserRead"]>

export type DashboardNotificationUserReadSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isOpened?: boolean
  userId?: boolean
  notificationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardNotificationUserRead"]>

export type DashboardNotificationUserReadSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isOpened?: boolean
  userId?: boolean
  notificationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardNotificationUserRead"]>

export type DashboardNotificationUserReadSelectScalar = {
  id?: boolean
  isOpened?: boolean
  userId?: boolean
  notificationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DashboardNotificationUserReadOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "isOpened" | "userId" | "notificationId" | "createdAt" | "updatedAt", ExtArgs["result"]["dashboardNotificationUserRead"]>
export type DashboardNotificationUserReadInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type DashboardNotificationUserReadIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type DashboardNotificationUserReadIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DashboardNotification?: boolean | Prisma.DashboardNotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}

export type $DashboardNotificationUserReadPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DashboardNotificationUserRead"
  objects: {
    DashboardNotification: Prisma.$DashboardNotificationPayload<ExtArgs>
    user: Prisma.$userPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    isOpened: boolean
    userId: string
    notificationId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dashboardNotificationUserRead"]>
  composites: {}
}

export type DashboardNotificationUserReadGetPayload<S extends boolean | null | undefined | DashboardNotificationUserReadDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload, S>

export type DashboardNotificationUserReadCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DashboardNotificationUserReadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DashboardNotificationUserReadCountAggregateInputType | true
  }

export interface DashboardNotificationUserReadDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DashboardNotificationUserRead'], meta: { name: 'DashboardNotificationUserRead' } }
  /**
   * Find zero or one DashboardNotificationUserRead that matches the filter.
   * @param {DashboardNotificationUserReadFindUniqueArgs} args - Arguments to find a DashboardNotificationUserRead
   * @example
   * // Get one DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DashboardNotificationUserReadFindUniqueArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DashboardNotificationUserRead that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DashboardNotificationUserReadFindUniqueOrThrowArgs} args - Arguments to find a DashboardNotificationUserRead
   * @example
   * // Get one DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DashboardNotificationUserReadFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardNotificationUserRead that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadFindFirstArgs} args - Arguments to find a DashboardNotificationUserRead
   * @example
   * // Get one DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DashboardNotificationUserReadFindFirstArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadFindFirstArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardNotificationUserRead that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadFindFirstOrThrowArgs} args - Arguments to find a DashboardNotificationUserRead
   * @example
   * // Get one DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DashboardNotificationUserReadFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DashboardNotificationUserReads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DashboardNotificationUserReads
   * const dashboardNotificationUserReads = await prisma.dashboardNotificationUserRead.findMany()
   * 
   * // Get first 10 DashboardNotificationUserReads
   * const dashboardNotificationUserReads = await prisma.dashboardNotificationUserRead.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dashboardNotificationUserReadWithIdOnly = await prisma.dashboardNotificationUserRead.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DashboardNotificationUserReadFindManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DashboardNotificationUserRead.
   * @param {DashboardNotificationUserReadCreateArgs} args - Arguments to create a DashboardNotificationUserRead.
   * @example
   * // Create one DashboardNotificationUserRead
   * const DashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.create({
   *   data: {
   *     // ... data to create a DashboardNotificationUserRead
   *   }
   * })
   * 
   */
  create<T extends DashboardNotificationUserReadCreateArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadCreateArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DashboardNotificationUserReads.
   * @param {DashboardNotificationUserReadCreateManyArgs} args - Arguments to create many DashboardNotificationUserReads.
   * @example
   * // Create many DashboardNotificationUserReads
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DashboardNotificationUserReadCreateManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DashboardNotificationUserReads and returns the data saved in the database.
   * @param {DashboardNotificationUserReadCreateManyAndReturnArgs} args - Arguments to create many DashboardNotificationUserReads.
   * @example
   * // Create many DashboardNotificationUserReads
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DashboardNotificationUserReads and only return the `id`
   * const dashboardNotificationUserReadWithIdOnly = await prisma.dashboardNotificationUserRead.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DashboardNotificationUserReadCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DashboardNotificationUserRead.
   * @param {DashboardNotificationUserReadDeleteArgs} args - Arguments to delete one DashboardNotificationUserRead.
   * @example
   * // Delete one DashboardNotificationUserRead
   * const DashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.delete({
   *   where: {
   *     // ... filter to delete one DashboardNotificationUserRead
   *   }
   * })
   * 
   */
  delete<T extends DashboardNotificationUserReadDeleteArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadDeleteArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DashboardNotificationUserRead.
   * @param {DashboardNotificationUserReadUpdateArgs} args - Arguments to update one DashboardNotificationUserRead.
   * @example
   * // Update one DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DashboardNotificationUserReadUpdateArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadUpdateArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DashboardNotificationUserReads.
   * @param {DashboardNotificationUserReadDeleteManyArgs} args - Arguments to filter DashboardNotificationUserReads to delete.
   * @example
   * // Delete a few DashboardNotificationUserReads
   * const { count } = await prisma.dashboardNotificationUserRead.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DashboardNotificationUserReadDeleteManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationUserReadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardNotificationUserReads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DashboardNotificationUserReads
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DashboardNotificationUserReadUpdateManyArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardNotificationUserReads and returns the data updated in the database.
   * @param {DashboardNotificationUserReadUpdateManyAndReturnArgs} args - Arguments to update many DashboardNotificationUserReads.
   * @example
   * // Update many DashboardNotificationUserReads
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DashboardNotificationUserReads and only return the `id`
   * const dashboardNotificationUserReadWithIdOnly = await prisma.dashboardNotificationUserRead.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DashboardNotificationUserReadUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DashboardNotificationUserRead.
   * @param {DashboardNotificationUserReadUpsertArgs} args - Arguments to update or create a DashboardNotificationUserRead.
   * @example
   * // Update or create a DashboardNotificationUserRead
   * const dashboardNotificationUserRead = await prisma.dashboardNotificationUserRead.upsert({
   *   create: {
   *     // ... data to create a DashboardNotificationUserRead
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DashboardNotificationUserRead we want to update
   *   }
   * })
   */
  upsert<T extends DashboardNotificationUserReadUpsertArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUserReadUpsertArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationUserReadClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DashboardNotificationUserReads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadCountArgs} args - Arguments to filter DashboardNotificationUserReads to count.
   * @example
   * // Count the number of DashboardNotificationUserReads
   * const count = await prisma.dashboardNotificationUserRead.count({
   *   where: {
   *     // ... the filter for the DashboardNotificationUserReads we want to count
   *   }
   * })
  **/
  count<T extends DashboardNotificationUserReadCountArgs>(
    args?: Prisma.Subset<T, DashboardNotificationUserReadCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DashboardNotificationUserReadCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DashboardNotificationUserRead.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DashboardNotificationUserReadAggregateArgs>(args: Prisma.Subset<T, DashboardNotificationUserReadAggregateArgs>): Prisma.PrismaPromise<GetDashboardNotificationUserReadAggregateType<T>>

  /**
   * Group by DashboardNotificationUserRead.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUserReadGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DashboardNotificationUserReadGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DashboardNotificationUserReadGroupByArgs['orderBy'] }
      : { orderBy?: DashboardNotificationUserReadGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DashboardNotificationUserReadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardNotificationUserReadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DashboardNotificationUserRead model
 */
readonly fields: DashboardNotificationUserReadFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DashboardNotificationUserRead.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DashboardNotificationUserReadClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  DashboardNotification<T extends Prisma.DashboardNotificationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DashboardNotificationDefaultArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.userDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.userDefaultArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DashboardNotificationUserRead model
 */
export interface DashboardNotificationUserReadFieldRefs {
  readonly id: Prisma.FieldRef<"DashboardNotificationUserRead", 'String'>
  readonly isOpened: Prisma.FieldRef<"DashboardNotificationUserRead", 'Boolean'>
  readonly userId: Prisma.FieldRef<"DashboardNotificationUserRead", 'String'>
  readonly notificationId: Prisma.FieldRef<"DashboardNotificationUserRead", 'String'>
  readonly createdAt: Prisma.FieldRef<"DashboardNotificationUserRead", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DashboardNotificationUserRead", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DashboardNotificationUserRead findUnique
 */
export type DashboardNotificationUserReadFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotificationUserRead to fetch.
   */
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
}

/**
 * DashboardNotificationUserRead findUniqueOrThrow
 */
export type DashboardNotificationUserReadFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotificationUserRead to fetch.
   */
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
}

/**
 * DashboardNotificationUserRead findFirst
 */
export type DashboardNotificationUserReadFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotificationUserRead to fetch.
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotificationUserReads to fetch.
   */
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithRelationInput | Prisma.DashboardNotificationUserReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardNotificationUserReads.
   */
  cursor?: Prisma.DashboardNotificationUserReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotificationUserReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotificationUserReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardNotificationUserReads.
   */
  distinct?: Prisma.DashboardNotificationUserReadScalarFieldEnum | Prisma.DashboardNotificationUserReadScalarFieldEnum[]
}

/**
 * DashboardNotificationUserRead findFirstOrThrow
 */
export type DashboardNotificationUserReadFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotificationUserRead to fetch.
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotificationUserReads to fetch.
   */
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithRelationInput | Prisma.DashboardNotificationUserReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardNotificationUserReads.
   */
  cursor?: Prisma.DashboardNotificationUserReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotificationUserReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotificationUserReads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardNotificationUserReads.
   */
  distinct?: Prisma.DashboardNotificationUserReadScalarFieldEnum | Prisma.DashboardNotificationUserReadScalarFieldEnum[]
}

/**
 * DashboardNotificationUserRead findMany
 */
export type DashboardNotificationUserReadFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotificationUserReads to fetch.
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotificationUserReads to fetch.
   */
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithRelationInput | Prisma.DashboardNotificationUserReadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DashboardNotificationUserReads.
   */
  cursor?: Prisma.DashboardNotificationUserReadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotificationUserReads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotificationUserReads.
   */
  skip?: number
  distinct?: Prisma.DashboardNotificationUserReadScalarFieldEnum | Prisma.DashboardNotificationUserReadScalarFieldEnum[]
}

/**
 * DashboardNotificationUserRead create
 */
export type DashboardNotificationUserReadCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * The data needed to create a DashboardNotificationUserRead.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateInput, Prisma.DashboardNotificationUserReadUncheckedCreateInput>
}

/**
 * DashboardNotificationUserRead createMany
 */
export type DashboardNotificationUserReadCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DashboardNotificationUserReads.
   */
  data: Prisma.DashboardNotificationUserReadCreateManyInput | Prisma.DashboardNotificationUserReadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DashboardNotificationUserRead createManyAndReturn
 */
export type DashboardNotificationUserReadCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * The data used to create many DashboardNotificationUserReads.
   */
  data: Prisma.DashboardNotificationUserReadCreateManyInput | Prisma.DashboardNotificationUserReadCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DashboardNotificationUserRead update
 */
export type DashboardNotificationUserReadUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * The data needed to update a DashboardNotificationUserRead.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateInput, Prisma.DashboardNotificationUserReadUncheckedUpdateInput>
  /**
   * Choose, which DashboardNotificationUserRead to update.
   */
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
}

/**
 * DashboardNotificationUserRead updateMany
 */
export type DashboardNotificationUserReadUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DashboardNotificationUserReads.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateManyMutationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateManyInput>
  /**
   * Filter which DashboardNotificationUserReads to update
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * Limit how many DashboardNotificationUserReads to update.
   */
  limit?: number
}

/**
 * DashboardNotificationUserRead updateManyAndReturn
 */
export type DashboardNotificationUserReadUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * The data used to update DashboardNotificationUserReads.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateManyMutationInput, Prisma.DashboardNotificationUserReadUncheckedUpdateManyInput>
  /**
   * Filter which DashboardNotificationUserReads to update
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * Limit how many DashboardNotificationUserReads to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DashboardNotificationUserRead upsert
 */
export type DashboardNotificationUserReadUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * The filter to search for the DashboardNotificationUserRead to update in case it exists.
   */
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
  /**
   * In case the DashboardNotificationUserRead found by the `where` argument doesn't exist, create a new DashboardNotificationUserRead with this data.
   */
  create: Prisma.XOR<Prisma.DashboardNotificationUserReadCreateInput, Prisma.DashboardNotificationUserReadUncheckedCreateInput>
  /**
   * In case the DashboardNotificationUserRead was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DashboardNotificationUserReadUpdateInput, Prisma.DashboardNotificationUserReadUncheckedUpdateInput>
}

/**
 * DashboardNotificationUserRead delete
 */
export type DashboardNotificationUserReadDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  /**
   * Filter which DashboardNotificationUserRead to delete.
   */
  where: Prisma.DashboardNotificationUserReadWhereUniqueInput
}

/**
 * DashboardNotificationUserRead deleteMany
 */
export type DashboardNotificationUserReadDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardNotificationUserReads to delete
   */
  where?: Prisma.DashboardNotificationUserReadWhereInput
  /**
   * Limit how many DashboardNotificationUserReads to delete.
   */
  limit?: number
}

/**
 * DashboardNotificationUserRead without action
 */
export type DashboardNotificationUserReadDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
}
