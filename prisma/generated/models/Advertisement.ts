
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Advertisement` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Advertisement
 * 
 */
export type AdvertisementModel = runtime.Types.Result.DefaultSelection<Prisma.$AdvertisementPayload>

export type AggregateAdvertisement = {
  _count: AdvertisementCountAggregateOutputType | null
  _avg: AdvertisementAvgAggregateOutputType | null
  _sum: AdvertisementSumAggregateOutputType | null
  _min: AdvertisementMinAggregateOutputType | null
  _max: AdvertisementMaxAggregateOutputType | null
}

export type AdvertisementAvgAggregateOutputType = {
  contentLength: number | null
}

export type AdvertisementSumAggregateOutputType = {
  contentLength: number | null
}

export type AdvertisementMinAggregateOutputType = {
  id: string | null
  contentUrl: string | null
  isVideo: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  contentLength: number | null
}

export type AdvertisementMaxAggregateOutputType = {
  id: string | null
  contentUrl: string | null
  isVideo: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  contentLength: number | null
}

export type AdvertisementCountAggregateOutputType = {
  id: number
  contentUrl: number
  isVideo: number
  createdAt: number
  updatedAt: number
  contentLength: number
  _all: number
}


export type AdvertisementAvgAggregateInputType = {
  contentLength?: true
}

export type AdvertisementSumAggregateInputType = {
  contentLength?: true
}

export type AdvertisementMinAggregateInputType = {
  id?: true
  contentUrl?: true
  isVideo?: true
  createdAt?: true
  updatedAt?: true
  contentLength?: true
}

export type AdvertisementMaxAggregateInputType = {
  id?: true
  contentUrl?: true
  isVideo?: true
  createdAt?: true
  updatedAt?: true
  contentLength?: true
}

export type AdvertisementCountAggregateInputType = {
  id?: true
  contentUrl?: true
  isVideo?: true
  createdAt?: true
  updatedAt?: true
  contentLength?: true
  _all?: true
}

export type AdvertisementAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Advertisement to aggregate.
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Advertisements to fetch.
   */
  orderBy?: Prisma.AdvertisementOrderByWithRelationInput | Prisma.AdvertisementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdvertisementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Advertisements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Advertisements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Advertisements
  **/
  _count?: true | AdvertisementCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AdvertisementAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AdvertisementSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdvertisementMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdvertisementMaxAggregateInputType
}

export type GetAdvertisementAggregateType<T extends AdvertisementAggregateArgs> = {
      [P in keyof T & keyof AggregateAdvertisement]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdvertisement[P]>
    : Prisma.GetScalarType<T[P], AggregateAdvertisement[P]>
}




export type AdvertisementGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdvertisementWhereInput
  orderBy?: Prisma.AdvertisementOrderByWithAggregationInput | Prisma.AdvertisementOrderByWithAggregationInput[]
  by: Prisma.AdvertisementScalarFieldEnum[] | Prisma.AdvertisementScalarFieldEnum
  having?: Prisma.AdvertisementScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdvertisementCountAggregateInputType | true
  _avg?: AdvertisementAvgAggregateInputType
  _sum?: AdvertisementSumAggregateInputType
  _min?: AdvertisementMinAggregateInputType
  _max?: AdvertisementMaxAggregateInputType
}

export type AdvertisementGroupByOutputType = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt: Date
  updatedAt: Date
  contentLength: number
  _count: AdvertisementCountAggregateOutputType | null
  _avg: AdvertisementAvgAggregateOutputType | null
  _sum: AdvertisementSumAggregateOutputType | null
  _min: AdvertisementMinAggregateOutputType | null
  _max: AdvertisementMaxAggregateOutputType | null
}

type GetAdvertisementGroupByPayload<T extends AdvertisementGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdvertisementGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdvertisementGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdvertisementGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdvertisementGroupByOutputType[P]>
      }
    >
  > 



export type AdvertisementWhereInput = {
  AND?: Prisma.AdvertisementWhereInput | Prisma.AdvertisementWhereInput[]
  OR?: Prisma.AdvertisementWhereInput[]
  NOT?: Prisma.AdvertisementWhereInput | Prisma.AdvertisementWhereInput[]
  id?: Prisma.StringFilter<"Advertisement"> | string
  contentUrl?: Prisma.StringFilter<"Advertisement"> | string
  isVideo?: Prisma.BoolFilter<"Advertisement"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Advertisement"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Advertisement"> | Date | string
  contentLength?: Prisma.IntFilter<"Advertisement"> | number
  AdWatchHistory?: Prisma.AdWatchHistoryListRelationFilter
  AdWatchSession?: Prisma.AdWatchSessionListRelationFilter
}

export type AdvertisementOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  contentUrl?: Prisma.SortOrder
  isVideo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contentLength?: Prisma.SortOrder
  AdWatchHistory?: Prisma.AdWatchHistoryOrderByRelationAggregateInput
  AdWatchSession?: Prisma.AdWatchSessionOrderByRelationAggregateInput
}

export type AdvertisementWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AdvertisementWhereInput | Prisma.AdvertisementWhereInput[]
  OR?: Prisma.AdvertisementWhereInput[]
  NOT?: Prisma.AdvertisementWhereInput | Prisma.AdvertisementWhereInput[]
  contentUrl?: Prisma.StringFilter<"Advertisement"> | string
  isVideo?: Prisma.BoolFilter<"Advertisement"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Advertisement"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Advertisement"> | Date | string
  contentLength?: Prisma.IntFilter<"Advertisement"> | number
  AdWatchHistory?: Prisma.AdWatchHistoryListRelationFilter
  AdWatchSession?: Prisma.AdWatchSessionListRelationFilter
}, "id">

export type AdvertisementOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  contentUrl?: Prisma.SortOrder
  isVideo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contentLength?: Prisma.SortOrder
  _count?: Prisma.AdvertisementCountOrderByAggregateInput
  _avg?: Prisma.AdvertisementAvgOrderByAggregateInput
  _max?: Prisma.AdvertisementMaxOrderByAggregateInput
  _min?: Prisma.AdvertisementMinOrderByAggregateInput
  _sum?: Prisma.AdvertisementSumOrderByAggregateInput
}

export type AdvertisementScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdvertisementScalarWhereWithAggregatesInput | Prisma.AdvertisementScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdvertisementScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdvertisementScalarWhereWithAggregatesInput | Prisma.AdvertisementScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Advertisement"> | string
  contentUrl?: Prisma.StringWithAggregatesFilter<"Advertisement"> | string
  isVideo?: Prisma.BoolWithAggregatesFilter<"Advertisement"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Advertisement"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Advertisement"> | Date | string
  contentLength?: Prisma.IntWithAggregatesFilter<"Advertisement"> | number
}

export type AdvertisementCreateInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutAdvertisementInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementUncheckedCreateInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutAdvertisementInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutAdvertisementNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutAdvertisementNestedInput
}

export type AdvertisementUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutAdvertisementNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutAdvertisementNestedInput
}

export type AdvertisementCreateManyInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
}

export type AdvertisementUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AdvertisementUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AdvertisementScalarRelationFilter = {
  is?: Prisma.AdvertisementWhereInput
  isNot?: Prisma.AdvertisementWhereInput
}

export type AdvertisementCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contentUrl?: Prisma.SortOrder
  isVideo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contentLength?: Prisma.SortOrder
}

export type AdvertisementAvgOrderByAggregateInput = {
  contentLength?: Prisma.SortOrder
}

export type AdvertisementMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contentUrl?: Prisma.SortOrder
  isVideo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contentLength?: Prisma.SortOrder
}

export type AdvertisementMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contentUrl?: Prisma.SortOrder
  isVideo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contentLength?: Prisma.SortOrder
}

export type AdvertisementSumOrderByAggregateInput = {
  contentLength?: Prisma.SortOrder
}

export type AdvertisementCreateNestedOneWithoutAdWatchHistoryInput = {
  create?: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchHistoryInput>
  connectOrCreate?: Prisma.AdvertisementCreateOrConnectWithoutAdWatchHistoryInput
  connect?: Prisma.AdvertisementWhereUniqueInput
}

export type AdvertisementUpdateOneRequiredWithoutAdWatchHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchHistoryInput>
  connectOrCreate?: Prisma.AdvertisementCreateOrConnectWithoutAdWatchHistoryInput
  upsert?: Prisma.AdvertisementUpsertWithoutAdWatchHistoryInput
  connect?: Prisma.AdvertisementWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdvertisementUpdateToOneWithWhereWithoutAdWatchHistoryInput, Prisma.AdvertisementUpdateWithoutAdWatchHistoryInput>, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchHistoryInput>
}

export type AdvertisementCreateNestedOneWithoutAdWatchSessionInput = {
  create?: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchSessionInput>
  connectOrCreate?: Prisma.AdvertisementCreateOrConnectWithoutAdWatchSessionInput
  connect?: Prisma.AdvertisementWhereUniqueInput
}

export type AdvertisementUpdateOneRequiredWithoutAdWatchSessionNestedInput = {
  create?: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchSessionInput>
  connectOrCreate?: Prisma.AdvertisementCreateOrConnectWithoutAdWatchSessionInput
  upsert?: Prisma.AdvertisementUpsertWithoutAdWatchSessionInput
  connect?: Prisma.AdvertisementWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AdvertisementUpdateToOneWithWhereWithoutAdWatchSessionInput, Prisma.AdvertisementUpdateWithoutAdWatchSessionInput>, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchSessionInput>
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type AdvertisementCreateWithoutAdWatchHistoryInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementUncheckedCreateWithoutAdWatchHistoryInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementCreateOrConnectWithoutAdWatchHistoryInput = {
  where: Prisma.AdvertisementWhereUniqueInput
  create: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchHistoryInput>
}

export type AdvertisementUpsertWithoutAdWatchHistoryInput = {
  update: Prisma.XOR<Prisma.AdvertisementUpdateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchHistoryInput>
  create: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchHistoryInput>
  where?: Prisma.AdvertisementWhereInput
}

export type AdvertisementUpdateToOneWithWhereWithoutAdWatchHistoryInput = {
  where?: Prisma.AdvertisementWhereInput
  data: Prisma.XOR<Prisma.AdvertisementUpdateWithoutAdWatchHistoryInput, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchHistoryInput>
}

export type AdvertisementUpdateWithoutAdWatchHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutAdvertisementNestedInput
}

export type AdvertisementUncheckedUpdateWithoutAdWatchHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutAdvertisementNestedInput
}

export type AdvertisementCreateWithoutAdWatchSessionInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementUncheckedCreateWithoutAdWatchSessionInput = {
  id: string
  contentUrl: string
  isVideo: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  contentLength: number
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutAdvertisementInput
}

export type AdvertisementCreateOrConnectWithoutAdWatchSessionInput = {
  where: Prisma.AdvertisementWhereUniqueInput
  create: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchSessionInput>
}

export type AdvertisementUpsertWithoutAdWatchSessionInput = {
  update: Prisma.XOR<Prisma.AdvertisementUpdateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchSessionInput>
  create: Prisma.XOR<Prisma.AdvertisementCreateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedCreateWithoutAdWatchSessionInput>
  where?: Prisma.AdvertisementWhereInput
}

export type AdvertisementUpdateToOneWithWhereWithoutAdWatchSessionInput = {
  where?: Prisma.AdvertisementWhereInput
  data: Prisma.XOR<Prisma.AdvertisementUpdateWithoutAdWatchSessionInput, Prisma.AdvertisementUncheckedUpdateWithoutAdWatchSessionInput>
}

export type AdvertisementUpdateWithoutAdWatchSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutAdvertisementNestedInput
}

export type AdvertisementUncheckedUpdateWithoutAdWatchSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isVideo?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contentLength?: Prisma.IntFieldUpdateOperationsInput | number
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutAdvertisementNestedInput
}


/**
 * Count Type AdvertisementCountOutputType
 */

export type AdvertisementCountOutputType = {
  AdWatchHistory: number
  AdWatchSession: number
}

export type AdvertisementCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  AdWatchHistory?: boolean | AdvertisementCountOutputTypeCountAdWatchHistoryArgs
  AdWatchSession?: boolean | AdvertisementCountOutputTypeCountAdWatchSessionArgs
}

/**
 * AdvertisementCountOutputType without action
 */
export type AdvertisementCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdvertisementCountOutputType
   */
  select?: Prisma.AdvertisementCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AdvertisementCountOutputType without action
 */
export type AdvertisementCountOutputTypeCountAdWatchHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchHistoryWhereInput
}

/**
 * AdvertisementCountOutputType without action
 */
export type AdvertisementCountOutputTypeCountAdWatchSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchSessionWhereInput
}


export type AdvertisementSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contentUrl?: boolean
  isVideo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contentLength?: boolean
  AdWatchHistory?: boolean | Prisma.Advertisement$AdWatchHistoryArgs<ExtArgs>
  AdWatchSession?: boolean | Prisma.Advertisement$AdWatchSessionArgs<ExtArgs>
  _count?: boolean | Prisma.AdvertisementCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["advertisement"]>

export type AdvertisementSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contentUrl?: boolean
  isVideo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contentLength?: boolean
}, ExtArgs["result"]["advertisement"]>

export type AdvertisementSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contentUrl?: boolean
  isVideo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contentLength?: boolean
}, ExtArgs["result"]["advertisement"]>

export type AdvertisementSelectScalar = {
  id?: boolean
  contentUrl?: boolean
  isVideo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contentLength?: boolean
}

export type AdvertisementOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "contentUrl" | "isVideo" | "createdAt" | "updatedAt" | "contentLength", ExtArgs["result"]["advertisement"]>
export type AdvertisementInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  AdWatchHistory?: boolean | Prisma.Advertisement$AdWatchHistoryArgs<ExtArgs>
  AdWatchSession?: boolean | Prisma.Advertisement$AdWatchSessionArgs<ExtArgs>
  _count?: boolean | Prisma.AdvertisementCountOutputTypeDefaultArgs<ExtArgs>
}
export type AdvertisementIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AdvertisementIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AdvertisementPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Advertisement"
  objects: {
    AdWatchHistory: Prisma.$AdWatchHistoryPayload<ExtArgs>[]
    AdWatchSession: Prisma.$AdWatchSessionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    contentUrl: string
    isVideo: boolean
    createdAt: Date
    updatedAt: Date
    contentLength: number
  }, ExtArgs["result"]["advertisement"]>
  composites: {}
}

export type AdvertisementGetPayload<S extends boolean | null | undefined | AdvertisementDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload, S>

export type AdvertisementCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdvertisementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdvertisementCountAggregateInputType | true
  }

export interface AdvertisementDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Advertisement'], meta: { name: 'Advertisement' } }
  /**
   * Find zero or one Advertisement that matches the filter.
   * @param {AdvertisementFindUniqueArgs} args - Arguments to find a Advertisement
   * @example
   * // Get one Advertisement
   * const advertisement = await prisma.advertisement.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdvertisementFindUniqueArgs>(args: Prisma.SelectSubset<T, AdvertisementFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Advertisement that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdvertisementFindUniqueOrThrowArgs} args - Arguments to find a Advertisement
   * @example
   * // Get one Advertisement
   * const advertisement = await prisma.advertisement.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdvertisementFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdvertisementFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Advertisement that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementFindFirstArgs} args - Arguments to find a Advertisement
   * @example
   * // Get one Advertisement
   * const advertisement = await prisma.advertisement.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdvertisementFindFirstArgs>(args?: Prisma.SelectSubset<T, AdvertisementFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Advertisement that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementFindFirstOrThrowArgs} args - Arguments to find a Advertisement
   * @example
   * // Get one Advertisement
   * const advertisement = await prisma.advertisement.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdvertisementFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdvertisementFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Advertisements that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Advertisements
   * const advertisements = await prisma.advertisement.findMany()
   * 
   * // Get first 10 Advertisements
   * const advertisements = await prisma.advertisement.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const advertisementWithIdOnly = await prisma.advertisement.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdvertisementFindManyArgs>(args?: Prisma.SelectSubset<T, AdvertisementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Advertisement.
   * @param {AdvertisementCreateArgs} args - Arguments to create a Advertisement.
   * @example
   * // Create one Advertisement
   * const Advertisement = await prisma.advertisement.create({
   *   data: {
   *     // ... data to create a Advertisement
   *   }
   * })
   * 
   */
  create<T extends AdvertisementCreateArgs>(args: Prisma.SelectSubset<T, AdvertisementCreateArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Advertisements.
   * @param {AdvertisementCreateManyArgs} args - Arguments to create many Advertisements.
   * @example
   * // Create many Advertisements
   * const advertisement = await prisma.advertisement.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdvertisementCreateManyArgs>(args?: Prisma.SelectSubset<T, AdvertisementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Advertisements and returns the data saved in the database.
   * @param {AdvertisementCreateManyAndReturnArgs} args - Arguments to create many Advertisements.
   * @example
   * // Create many Advertisements
   * const advertisement = await prisma.advertisement.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Advertisements and only return the `id`
   * const advertisementWithIdOnly = await prisma.advertisement.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdvertisementCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdvertisementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Advertisement.
   * @param {AdvertisementDeleteArgs} args - Arguments to delete one Advertisement.
   * @example
   * // Delete one Advertisement
   * const Advertisement = await prisma.advertisement.delete({
   *   where: {
   *     // ... filter to delete one Advertisement
   *   }
   * })
   * 
   */
  delete<T extends AdvertisementDeleteArgs>(args: Prisma.SelectSubset<T, AdvertisementDeleteArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Advertisement.
   * @param {AdvertisementUpdateArgs} args - Arguments to update one Advertisement.
   * @example
   * // Update one Advertisement
   * const advertisement = await prisma.advertisement.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdvertisementUpdateArgs>(args: Prisma.SelectSubset<T, AdvertisementUpdateArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Advertisements.
   * @param {AdvertisementDeleteManyArgs} args - Arguments to filter Advertisements to delete.
   * @example
   * // Delete a few Advertisements
   * const { count } = await prisma.advertisement.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdvertisementDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdvertisementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Advertisements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Advertisements
   * const advertisement = await prisma.advertisement.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdvertisementUpdateManyArgs>(args: Prisma.SelectSubset<T, AdvertisementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Advertisements and returns the data updated in the database.
   * @param {AdvertisementUpdateManyAndReturnArgs} args - Arguments to update many Advertisements.
   * @example
   * // Update many Advertisements
   * const advertisement = await prisma.advertisement.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Advertisements and only return the `id`
   * const advertisementWithIdOnly = await prisma.advertisement.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdvertisementUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdvertisementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Advertisement.
   * @param {AdvertisementUpsertArgs} args - Arguments to update or create a Advertisement.
   * @example
   * // Update or create a Advertisement
   * const advertisement = await prisma.advertisement.upsert({
   *   create: {
   *     // ... data to create a Advertisement
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Advertisement we want to update
   *   }
   * })
   */
  upsert<T extends AdvertisementUpsertArgs>(args: Prisma.SelectSubset<T, AdvertisementUpsertArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Advertisements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementCountArgs} args - Arguments to filter Advertisements to count.
   * @example
   * // Count the number of Advertisements
   * const count = await prisma.advertisement.count({
   *   where: {
   *     // ... the filter for the Advertisements we want to count
   *   }
   * })
  **/
  count<T extends AdvertisementCountArgs>(
    args?: Prisma.Subset<T, AdvertisementCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdvertisementCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Advertisement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdvertisementAggregateArgs>(args: Prisma.Subset<T, AdvertisementAggregateArgs>): Prisma.PrismaPromise<GetAdvertisementAggregateType<T>>

  /**
   * Group by Advertisement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdvertisementGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdvertisementGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdvertisementGroupByArgs['orderBy'] }
      : { orderBy?: AdvertisementGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdvertisementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdvertisementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Advertisement model
 */
readonly fields: AdvertisementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Advertisement.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdvertisementClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  AdWatchHistory<T extends Prisma.Advertisement$AdWatchHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Advertisement$AdWatchHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  AdWatchSession<T extends Prisma.Advertisement$AdWatchSessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Advertisement$AdWatchSessionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Advertisement model
 */
export interface AdvertisementFieldRefs {
  readonly id: Prisma.FieldRef<"Advertisement", 'String'>
  readonly contentUrl: Prisma.FieldRef<"Advertisement", 'String'>
  readonly isVideo: Prisma.FieldRef<"Advertisement", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Advertisement", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Advertisement", 'DateTime'>
  readonly contentLength: Prisma.FieldRef<"Advertisement", 'Int'>
}
    

// Custom InputTypes
/**
 * Advertisement findUnique
 */
export type AdvertisementFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter, which Advertisement to fetch.
   */
  where: Prisma.AdvertisementWhereUniqueInput
}

/**
 * Advertisement findUniqueOrThrow
 */
export type AdvertisementFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter, which Advertisement to fetch.
   */
  where: Prisma.AdvertisementWhereUniqueInput
}

/**
 * Advertisement findFirst
 */
export type AdvertisementFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter, which Advertisement to fetch.
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Advertisements to fetch.
   */
  orderBy?: Prisma.AdvertisementOrderByWithRelationInput | Prisma.AdvertisementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Advertisements.
   */
  cursor?: Prisma.AdvertisementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Advertisements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Advertisements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Advertisements.
   */
  distinct?: Prisma.AdvertisementScalarFieldEnum | Prisma.AdvertisementScalarFieldEnum[]
}

/**
 * Advertisement findFirstOrThrow
 */
export type AdvertisementFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter, which Advertisement to fetch.
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Advertisements to fetch.
   */
  orderBy?: Prisma.AdvertisementOrderByWithRelationInput | Prisma.AdvertisementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Advertisements.
   */
  cursor?: Prisma.AdvertisementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Advertisements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Advertisements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Advertisements.
   */
  distinct?: Prisma.AdvertisementScalarFieldEnum | Prisma.AdvertisementScalarFieldEnum[]
}

/**
 * Advertisement findMany
 */
export type AdvertisementFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter, which Advertisements to fetch.
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Advertisements to fetch.
   */
  orderBy?: Prisma.AdvertisementOrderByWithRelationInput | Prisma.AdvertisementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Advertisements.
   */
  cursor?: Prisma.AdvertisementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Advertisements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Advertisements.
   */
  skip?: number
  distinct?: Prisma.AdvertisementScalarFieldEnum | Prisma.AdvertisementScalarFieldEnum[]
}

/**
 * Advertisement create
 */
export type AdvertisementCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * The data needed to create a Advertisement.
   */
  data: Prisma.XOR<Prisma.AdvertisementCreateInput, Prisma.AdvertisementUncheckedCreateInput>
}

/**
 * Advertisement createMany
 */
export type AdvertisementCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Advertisements.
   */
  data: Prisma.AdvertisementCreateManyInput | Prisma.AdvertisementCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Advertisement createManyAndReturn
 */
export type AdvertisementCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * The data used to create many Advertisements.
   */
  data: Prisma.AdvertisementCreateManyInput | Prisma.AdvertisementCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Advertisement update
 */
export type AdvertisementUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * The data needed to update a Advertisement.
   */
  data: Prisma.XOR<Prisma.AdvertisementUpdateInput, Prisma.AdvertisementUncheckedUpdateInput>
  /**
   * Choose, which Advertisement to update.
   */
  where: Prisma.AdvertisementWhereUniqueInput
}

/**
 * Advertisement updateMany
 */
export type AdvertisementUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Advertisements.
   */
  data: Prisma.XOR<Prisma.AdvertisementUpdateManyMutationInput, Prisma.AdvertisementUncheckedUpdateManyInput>
  /**
   * Filter which Advertisements to update
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * Limit how many Advertisements to update.
   */
  limit?: number
}

/**
 * Advertisement updateManyAndReturn
 */
export type AdvertisementUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * The data used to update Advertisements.
   */
  data: Prisma.XOR<Prisma.AdvertisementUpdateManyMutationInput, Prisma.AdvertisementUncheckedUpdateManyInput>
  /**
   * Filter which Advertisements to update
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * Limit how many Advertisements to update.
   */
  limit?: number
}

/**
 * Advertisement upsert
 */
export type AdvertisementUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * The filter to search for the Advertisement to update in case it exists.
   */
  where: Prisma.AdvertisementWhereUniqueInput
  /**
   * In case the Advertisement found by the `where` argument doesn't exist, create a new Advertisement with this data.
   */
  create: Prisma.XOR<Prisma.AdvertisementCreateInput, Prisma.AdvertisementUncheckedCreateInput>
  /**
   * In case the Advertisement was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdvertisementUpdateInput, Prisma.AdvertisementUncheckedUpdateInput>
}

/**
 * Advertisement delete
 */
export type AdvertisementDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
  /**
   * Filter which Advertisement to delete.
   */
  where: Prisma.AdvertisementWhereUniqueInput
}

/**
 * Advertisement deleteMany
 */
export type AdvertisementDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Advertisements to delete
   */
  where?: Prisma.AdvertisementWhereInput
  /**
   * Limit how many Advertisements to delete.
   */
  limit?: number
}

/**
 * Advertisement.AdWatchHistory
 */
export type Advertisement$AdWatchHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  where?: Prisma.AdWatchHistoryWhereInput
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AdWatchHistoryScalarFieldEnum | Prisma.AdWatchHistoryScalarFieldEnum[]
}

/**
 * Advertisement.AdWatchSession
 */
export type Advertisement$AdWatchSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  where?: Prisma.AdWatchSessionWhereInput
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AdWatchSessionScalarFieldEnum | Prisma.AdWatchSessionScalarFieldEnum[]
}

/**
 * Advertisement without action
 */
export type AdvertisementDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Advertisement
   */
  select?: Prisma.AdvertisementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Advertisement
   */
  omit?: Prisma.AdvertisementOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdvertisementInclude<ExtArgs> | null
}
