
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AdWatchSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AdWatchSession
 * 
 */
export type AdWatchSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$AdWatchSessionPayload>

export type AggregateAdWatchSession = {
  _count: AdWatchSessionCountAggregateOutputType | null
  _avg: AdWatchSessionAvgAggregateOutputType | null
  _sum: AdWatchSessionSumAggregateOutputType | null
  _min: AdWatchSessionMinAggregateOutputType | null
  _max: AdWatchSessionMaxAggregateOutputType | null
}

export type AdWatchSessionAvgAggregateOutputType = {
  adLength: number | null
  startTimeUnix: number | null
  lockUntil: number | null
}

export type AdWatchSessionSumAggregateOutputType = {
  adLength: number | null
  startTimeUnix: number | null
  lockUntil: number | null
}

export type AdWatchSessionMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  adId: string | null
  adLength: number | null
  startTimeUnix: number | null
  lockUntil: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdWatchSessionMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  adId: string | null
  adLength: number | null
  startTimeUnix: number | null
  lockUntil: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdWatchSessionCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  adId: number
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AdWatchSessionAvgAggregateInputType = {
  adLength?: true
  startTimeUnix?: true
  lockUntil?: true
}

export type AdWatchSessionSumAggregateInputType = {
  adLength?: true
  startTimeUnix?: true
  lockUntil?: true
}

export type AdWatchSessionMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  adLength?: true
  startTimeUnix?: true
  lockUntil?: true
  createdAt?: true
  updatedAt?: true
}

export type AdWatchSessionMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  adLength?: true
  startTimeUnix?: true
  lockUntil?: true
  createdAt?: true
  updatedAt?: true
}

export type AdWatchSessionCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  adId?: true
  adLength?: true
  startTimeUnix?: true
  lockUntil?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AdWatchSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdWatchSession to aggregate.
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchSessions to fetch.
   */
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AdWatchSessions
  **/
  _count?: true | AdWatchSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AdWatchSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AdWatchSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdWatchSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdWatchSessionMaxAggregateInputType
}

export type GetAdWatchSessionAggregateType<T extends AdWatchSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateAdWatchSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdWatchSession[P]>
    : Prisma.GetScalarType<T[P], AggregateAdWatchSession[P]>
}




export type AdWatchSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchSessionWhereInput
  orderBy?: Prisma.AdWatchSessionOrderByWithAggregationInput | Prisma.AdWatchSessionOrderByWithAggregationInput[]
  by: Prisma.AdWatchSessionScalarFieldEnum[] | Prisma.AdWatchSessionScalarFieldEnum
  having?: Prisma.AdWatchSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdWatchSessionCountAggregateInputType | true
  _avg?: AdWatchSessionAvgAggregateInputType
  _sum?: AdWatchSessionSumAggregateInputType
  _min?: AdWatchSessionMinAggregateInputType
  _max?: AdWatchSessionMaxAggregateInputType
}

export type AdWatchSessionGroupByOutputType = {
  id: string
  userPlaygroundId: string
  adId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt: Date
  updatedAt: Date
  _count: AdWatchSessionCountAggregateOutputType | null
  _avg: AdWatchSessionAvgAggregateOutputType | null
  _sum: AdWatchSessionSumAggregateOutputType | null
  _min: AdWatchSessionMinAggregateOutputType | null
  _max: AdWatchSessionMaxAggregateOutputType | null
}

type GetAdWatchSessionGroupByPayload<T extends AdWatchSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdWatchSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdWatchSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdWatchSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdWatchSessionGroupByOutputType[P]>
      }
    >
  > 



export type AdWatchSessionWhereInput = {
  AND?: Prisma.AdWatchSessionWhereInput | Prisma.AdWatchSessionWhereInput[]
  OR?: Prisma.AdWatchSessionWhereInput[]
  NOT?: Prisma.AdWatchSessionWhereInput | Prisma.AdWatchSessionWhereInput[]
  id?: Prisma.StringFilter<"AdWatchSession"> | string
  userPlaygroundId?: Prisma.StringFilter<"AdWatchSession"> | string
  adId?: Prisma.StringFilter<"AdWatchSession"> | string
  adLength?: Prisma.IntFilter<"AdWatchSession"> | number
  startTimeUnix?: Prisma.IntFilter<"AdWatchSession"> | number
  lockUntil?: Prisma.IntFilter<"AdWatchSession"> | number
  createdAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
  Advertisement?: Prisma.XOR<Prisma.AdvertisementScalarRelationFilter, Prisma.AdvertisementWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type AdWatchSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Advertisement?: Prisma.AdvertisementOrderByWithRelationInput
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type AdWatchSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AdWatchSessionWhereInput | Prisma.AdWatchSessionWhereInput[]
  OR?: Prisma.AdWatchSessionWhereInput[]
  NOT?: Prisma.AdWatchSessionWhereInput | Prisma.AdWatchSessionWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"AdWatchSession"> | string
  adId?: Prisma.StringFilter<"AdWatchSession"> | string
  adLength?: Prisma.IntFilter<"AdWatchSession"> | number
  startTimeUnix?: Prisma.IntFilter<"AdWatchSession"> | number
  lockUntil?: Prisma.IntFilter<"AdWatchSession"> | number
  createdAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
  Advertisement?: Prisma.XOR<Prisma.AdvertisementScalarRelationFilter, Prisma.AdvertisementWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id">

export type AdWatchSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AdWatchSessionCountOrderByAggregateInput
  _avg?: Prisma.AdWatchSessionAvgOrderByAggregateInput
  _max?: Prisma.AdWatchSessionMaxOrderByAggregateInput
  _min?: Prisma.AdWatchSessionMinOrderByAggregateInput
  _sum?: Prisma.AdWatchSessionSumOrderByAggregateInput
}

export type AdWatchSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdWatchSessionScalarWhereWithAggregatesInput | Prisma.AdWatchSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdWatchSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdWatchSessionScalarWhereWithAggregatesInput | Prisma.AdWatchSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AdWatchSession"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"AdWatchSession"> | string
  adId?: Prisma.StringWithAggregatesFilter<"AdWatchSession"> | string
  adLength?: Prisma.IntWithAggregatesFilter<"AdWatchSession"> | number
  startTimeUnix?: Prisma.IntWithAggregatesFilter<"AdWatchSession"> | number
  lockUntil?: Prisma.IntWithAggregatesFilter<"AdWatchSession"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AdWatchSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AdWatchSession"> | Date | string
}

export type AdWatchSessionCreateInput = {
  id: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
  Advertisement: Prisma.AdvertisementCreateNestedOneWithoutAdWatchSessionInput
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutAdWatchSessionInput
}

export type AdWatchSessionUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  adId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Advertisement?: Prisma.AdvertisementUpdateOneRequiredWithoutAdWatchSessionNestedInput
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutAdWatchSessionNestedInput
}

export type AdWatchSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionCreateManyInput = {
  id: string
  userPlaygroundId: string
  adId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchSessionAvgOrderByAggregateInput = {
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
}

export type AdWatchSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  adId?: Prisma.SortOrder
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWatchSessionSumOrderByAggregateInput = {
  adLength?: Prisma.SortOrder
  startTimeUnix?: Prisma.SortOrder
  lockUntil?: Prisma.SortOrder
}

export type AdWatchSessionListRelationFilter = {
  every?: Prisma.AdWatchSessionWhereInput
  some?: Prisma.AdWatchSessionWhereInput
  none?: Prisma.AdWatchSessionWhereInput
}

export type AdWatchSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AdWatchSessionCreateNestedManyWithoutAdvertisementInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchSessionCreateWithoutAdvertisementInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchSessionCreateManyAdvertisementInputEnvelope
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
}

export type AdWatchSessionUncheckedCreateNestedManyWithoutAdvertisementInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchSessionCreateWithoutAdvertisementInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchSessionCreateManyAdvertisementInputEnvelope
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
}

export type AdWatchSessionUpdateManyWithoutAdvertisementNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchSessionCreateWithoutAdvertisementInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput[]
  upsert?: Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchSessionCreateManyAdvertisementInputEnvelope
  set?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  disconnect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  delete?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  update?: Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutAdvertisementInput[]
  updateMany?: Prisma.AdWatchSessionUpdateManyWithWhereWithoutAdvertisementInput | Prisma.AdWatchSessionUpdateManyWithWhereWithoutAdvertisementInput[]
  deleteMany?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
}

export type AdWatchSessionUncheckedUpdateManyWithoutAdvertisementNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput> | Prisma.AdWatchSessionCreateWithoutAdvertisementInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput | Prisma.AdWatchSessionCreateOrConnectWithoutAdvertisementInput[]
  upsert?: Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutAdvertisementInput[]
  createMany?: Prisma.AdWatchSessionCreateManyAdvertisementInputEnvelope
  set?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  disconnect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  delete?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  update?: Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutAdvertisementInput | Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutAdvertisementInput[]
  updateMany?: Prisma.AdWatchSessionUpdateManyWithWhereWithoutAdvertisementInput | Prisma.AdWatchSessionUpdateManyWithWhereWithoutAdvertisementInput[]
  deleteMany?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
}

export type AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchSessionCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
}

export type AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchSessionCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
}

export type AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchSessionCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  disconnect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  delete?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  update?: Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.AdWatchSessionUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
}

export type AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput> | Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput[] | Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput | Prisma.AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.AdWatchSessionCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  disconnect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  delete?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  connect?: Prisma.AdWatchSessionWhereUniqueInput | Prisma.AdWatchSessionWhereUniqueInput[]
  update?: Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.AdWatchSessionUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.AdWatchSessionUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
}

export type AdWatchSessionCreateWithoutAdvertisementInput = {
  id: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutAdWatchSessionInput
}

export type AdWatchSessionUncheckedCreateWithoutAdvertisementInput = {
  id: string
  userPlaygroundId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionCreateOrConnectWithoutAdvertisementInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput>
}

export type AdWatchSessionCreateManyAdvertisementInputEnvelope = {
  data: Prisma.AdWatchSessionCreateManyAdvertisementInput | Prisma.AdWatchSessionCreateManyAdvertisementInput[]
  skipDuplicates?: boolean
}

export type AdWatchSessionUpsertWithWhereUniqueWithoutAdvertisementInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.AdWatchSessionUpdateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedUpdateWithoutAdvertisementInput>
  create: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedCreateWithoutAdvertisementInput>
}

export type AdWatchSessionUpdateWithWhereUniqueWithoutAdvertisementInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateWithoutAdvertisementInput, Prisma.AdWatchSessionUncheckedUpdateWithoutAdvertisementInput>
}

export type AdWatchSessionUpdateManyWithWhereWithoutAdvertisementInput = {
  where: Prisma.AdWatchSessionScalarWhereInput
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateManyMutationInput, Prisma.AdWatchSessionUncheckedUpdateManyWithoutAdvertisementInput>
}

export type AdWatchSessionScalarWhereInput = {
  AND?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
  OR?: Prisma.AdWatchSessionScalarWhereInput[]
  NOT?: Prisma.AdWatchSessionScalarWhereInput | Prisma.AdWatchSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"AdWatchSession"> | string
  userPlaygroundId?: Prisma.StringFilter<"AdWatchSession"> | string
  adId?: Prisma.StringFilter<"AdWatchSession"> | string
  adLength?: Prisma.IntFilter<"AdWatchSession"> | number
  startTimeUnix?: Prisma.IntFilter<"AdWatchSession"> | number
  lockUntil?: Prisma.IntFilter<"AdWatchSession"> | number
  createdAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdWatchSession"> | Date | string
}

export type AdWatchSessionCreateWithoutUserPlaygroundInput = {
  id: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
  Advertisement: Prisma.AdvertisementCreateNestedOneWithoutAdWatchSessionInput
}

export type AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  adId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput>
}

export type AdWatchSessionCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.AdWatchSessionCreateManyUserPlaygroundInput | Prisma.AdWatchSessionCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type AdWatchSessionUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.AdWatchSessionUpdateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.AdWatchSessionCreateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedCreateWithoutUserPlaygroundInput>
}

export type AdWatchSessionUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateWithoutUserPlaygroundInput, Prisma.AdWatchSessionUncheckedUpdateWithoutUserPlaygroundInput>
}

export type AdWatchSessionUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.AdWatchSessionScalarWhereInput
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateManyMutationInput, Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type AdWatchSessionCreateManyAdvertisementInput = {
  id: string
  userPlaygroundId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionUpdateWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutAdWatchSessionNestedInput
}

export type AdWatchSessionUncheckedUpdateWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionUncheckedUpdateManyWithoutAdvertisementInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionCreateManyUserPlaygroundInput = {
  id: string
  adId: string
  adLength: number
  startTimeUnix: number
  lockUntil: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type AdWatchSessionUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Advertisement?: Prisma.AdvertisementUpdateOneRequiredWithoutAdWatchSessionNestedInput
}

export type AdWatchSessionUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adId?: Prisma.StringFieldUpdateOperationsInput | string
  adLength?: Prisma.IntFieldUpdateOperationsInput | number
  startTimeUnix?: Prisma.IntFieldUpdateOperationsInput | number
  lockUntil?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AdWatchSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  adLength?: boolean
  startTimeUnix?: boolean
  lockUntil?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchSession"]>

export type AdWatchSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  adLength?: boolean
  startTimeUnix?: boolean
  lockUntil?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchSession"]>

export type AdWatchSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  adLength?: boolean
  startTimeUnix?: boolean
  lockUntil?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adWatchSession"]>

export type AdWatchSessionSelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  adId?: boolean
  adLength?: boolean
  startTimeUnix?: boolean
  lockUntil?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AdWatchSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "adId" | "adLength" | "startTimeUnix" | "lockUntil" | "createdAt" | "updatedAt", ExtArgs["result"]["adWatchSession"]>
export type AdWatchSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type AdWatchSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type AdWatchSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Advertisement?: boolean | Prisma.AdvertisementDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $AdWatchSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AdWatchSession"
  objects: {
    Advertisement: Prisma.$AdvertisementPayload<ExtArgs>
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    adId: string
    adLength: number
    startTimeUnix: number
    lockUntil: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["adWatchSession"]>
  composites: {}
}

export type AdWatchSessionGetPayload<S extends boolean | null | undefined | AdWatchSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload, S>

export type AdWatchSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdWatchSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdWatchSessionCountAggregateInputType | true
  }

export interface AdWatchSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdWatchSession'], meta: { name: 'AdWatchSession' } }
  /**
   * Find zero or one AdWatchSession that matches the filter.
   * @param {AdWatchSessionFindUniqueArgs} args - Arguments to find a AdWatchSession
   * @example
   * // Get one AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdWatchSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, AdWatchSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AdWatchSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdWatchSessionFindUniqueOrThrowArgs} args - Arguments to find a AdWatchSession
   * @example
   * // Get one AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdWatchSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdWatchSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdWatchSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionFindFirstArgs} args - Arguments to find a AdWatchSession
   * @example
   * // Get one AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdWatchSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdWatchSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionFindFirstOrThrowArgs} args - Arguments to find a AdWatchSession
   * @example
   * // Get one AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdWatchSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AdWatchSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdWatchSessions
   * const adWatchSessions = await prisma.adWatchSession.findMany()
   * 
   * // Get first 10 AdWatchSessions
   * const adWatchSessions = await prisma.adWatchSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adWatchSessionWithIdOnly = await prisma.adWatchSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdWatchSessionFindManyArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AdWatchSession.
   * @param {AdWatchSessionCreateArgs} args - Arguments to create a AdWatchSession.
   * @example
   * // Create one AdWatchSession
   * const AdWatchSession = await prisma.adWatchSession.create({
   *   data: {
   *     // ... data to create a AdWatchSession
   *   }
   * })
   * 
   */
  create<T extends AdWatchSessionCreateArgs>(args: Prisma.SelectSubset<T, AdWatchSessionCreateArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AdWatchSessions.
   * @param {AdWatchSessionCreateManyArgs} args - Arguments to create many AdWatchSessions.
   * @example
   * // Create many AdWatchSessions
   * const adWatchSession = await prisma.adWatchSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdWatchSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AdWatchSessions and returns the data saved in the database.
   * @param {AdWatchSessionCreateManyAndReturnArgs} args - Arguments to create many AdWatchSessions.
   * @example
   * // Create many AdWatchSessions
   * const adWatchSession = await prisma.adWatchSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AdWatchSessions and only return the `id`
   * const adWatchSessionWithIdOnly = await prisma.adWatchSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdWatchSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AdWatchSession.
   * @param {AdWatchSessionDeleteArgs} args - Arguments to delete one AdWatchSession.
   * @example
   * // Delete one AdWatchSession
   * const AdWatchSession = await prisma.adWatchSession.delete({
   *   where: {
   *     // ... filter to delete one AdWatchSession
   *   }
   * })
   * 
   */
  delete<T extends AdWatchSessionDeleteArgs>(args: Prisma.SelectSubset<T, AdWatchSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AdWatchSession.
   * @param {AdWatchSessionUpdateArgs} args - Arguments to update one AdWatchSession.
   * @example
   * // Update one AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdWatchSessionUpdateArgs>(args: Prisma.SelectSubset<T, AdWatchSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AdWatchSessions.
   * @param {AdWatchSessionDeleteManyArgs} args - Arguments to filter AdWatchSessions to delete.
   * @example
   * // Delete a few AdWatchSessions
   * const { count } = await prisma.adWatchSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdWatchSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdWatchSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdWatchSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdWatchSessions
   * const adWatchSession = await prisma.adWatchSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdWatchSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, AdWatchSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdWatchSessions and returns the data updated in the database.
   * @param {AdWatchSessionUpdateManyAndReturnArgs} args - Arguments to update many AdWatchSessions.
   * @example
   * // Update many AdWatchSessions
   * const adWatchSession = await prisma.adWatchSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AdWatchSessions and only return the `id`
   * const adWatchSessionWithIdOnly = await prisma.adWatchSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdWatchSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdWatchSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AdWatchSession.
   * @param {AdWatchSessionUpsertArgs} args - Arguments to update or create a AdWatchSession.
   * @example
   * // Update or create a AdWatchSession
   * const adWatchSession = await prisma.adWatchSession.upsert({
   *   create: {
   *     // ... data to create a AdWatchSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdWatchSession we want to update
   *   }
   * })
   */
  upsert<T extends AdWatchSessionUpsertArgs>(args: Prisma.SelectSubset<T, AdWatchSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__AdWatchSessionClient<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AdWatchSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionCountArgs} args - Arguments to filter AdWatchSessions to count.
   * @example
   * // Count the number of AdWatchSessions
   * const count = await prisma.adWatchSession.count({
   *   where: {
   *     // ... the filter for the AdWatchSessions we want to count
   *   }
   * })
  **/
  count<T extends AdWatchSessionCountArgs>(
    args?: Prisma.Subset<T, AdWatchSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdWatchSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AdWatchSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdWatchSessionAggregateArgs>(args: Prisma.Subset<T, AdWatchSessionAggregateArgs>): Prisma.PrismaPromise<GetAdWatchSessionAggregateType<T>>

  /**
   * Group by AdWatchSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdWatchSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdWatchSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdWatchSessionGroupByArgs['orderBy'] }
      : { orderBy?: AdWatchSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdWatchSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdWatchSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AdWatchSession model
 */
readonly fields: AdWatchSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdWatchSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdWatchSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Advertisement<T extends Prisma.AdvertisementDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AdvertisementDefaultArgs<ExtArgs>>): Prisma.Prisma__AdvertisementClient<runtime.Types.Result.GetResult<Prisma.$AdvertisementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AdWatchSession model
 */
export interface AdWatchSessionFieldRefs {
  readonly id: Prisma.FieldRef<"AdWatchSession", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"AdWatchSession", 'String'>
  readonly adId: Prisma.FieldRef<"AdWatchSession", 'String'>
  readonly adLength: Prisma.FieldRef<"AdWatchSession", 'Int'>
  readonly startTimeUnix: Prisma.FieldRef<"AdWatchSession", 'Int'>
  readonly lockUntil: Prisma.FieldRef<"AdWatchSession", 'Int'>
  readonly createdAt: Prisma.FieldRef<"AdWatchSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AdWatchSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AdWatchSession findUnique
 */
export type AdWatchSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchSession to fetch.
   */
  where: Prisma.AdWatchSessionWhereUniqueInput
}

/**
 * AdWatchSession findUniqueOrThrow
 */
export type AdWatchSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchSession to fetch.
   */
  where: Prisma.AdWatchSessionWhereUniqueInput
}

/**
 * AdWatchSession findFirst
 */
export type AdWatchSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchSession to fetch.
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchSessions to fetch.
   */
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdWatchSessions.
   */
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdWatchSessions.
   */
  distinct?: Prisma.AdWatchSessionScalarFieldEnum | Prisma.AdWatchSessionScalarFieldEnum[]
}

/**
 * AdWatchSession findFirstOrThrow
 */
export type AdWatchSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchSession to fetch.
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchSessions to fetch.
   */
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdWatchSessions.
   */
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdWatchSessions.
   */
  distinct?: Prisma.AdWatchSessionScalarFieldEnum | Prisma.AdWatchSessionScalarFieldEnum[]
}

/**
 * AdWatchSession findMany
 */
export type AdWatchSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter, which AdWatchSessions to fetch.
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdWatchSessions to fetch.
   */
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AdWatchSessions.
   */
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdWatchSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdWatchSessions.
   */
  skip?: number
  distinct?: Prisma.AdWatchSessionScalarFieldEnum | Prisma.AdWatchSessionScalarFieldEnum[]
}

/**
 * AdWatchSession create
 */
export type AdWatchSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a AdWatchSession.
   */
  data: Prisma.XOR<Prisma.AdWatchSessionCreateInput, Prisma.AdWatchSessionUncheckedCreateInput>
}

/**
 * AdWatchSession createMany
 */
export type AdWatchSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AdWatchSessions.
   */
  data: Prisma.AdWatchSessionCreateManyInput | Prisma.AdWatchSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdWatchSession createManyAndReturn
 */
export type AdWatchSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * The data used to create many AdWatchSessions.
   */
  data: Prisma.AdWatchSessionCreateManyInput | Prisma.AdWatchSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AdWatchSession update
 */
export type AdWatchSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a AdWatchSession.
   */
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateInput, Prisma.AdWatchSessionUncheckedUpdateInput>
  /**
   * Choose, which AdWatchSession to update.
   */
  where: Prisma.AdWatchSessionWhereUniqueInput
}

/**
 * AdWatchSession updateMany
 */
export type AdWatchSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AdWatchSessions.
   */
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateManyMutationInput, Prisma.AdWatchSessionUncheckedUpdateManyInput>
  /**
   * Filter which AdWatchSessions to update
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * Limit how many AdWatchSessions to update.
   */
  limit?: number
}

/**
 * AdWatchSession updateManyAndReturn
 */
export type AdWatchSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * The data used to update AdWatchSessions.
   */
  data: Prisma.XOR<Prisma.AdWatchSessionUpdateManyMutationInput, Prisma.AdWatchSessionUncheckedUpdateManyInput>
  /**
   * Filter which AdWatchSessions to update
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * Limit how many AdWatchSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AdWatchSession upsert
 */
export type AdWatchSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the AdWatchSession to update in case it exists.
   */
  where: Prisma.AdWatchSessionWhereUniqueInput
  /**
   * In case the AdWatchSession found by the `where` argument doesn't exist, create a new AdWatchSession with this data.
   */
  create: Prisma.XOR<Prisma.AdWatchSessionCreateInput, Prisma.AdWatchSessionUncheckedCreateInput>
  /**
   * In case the AdWatchSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdWatchSessionUpdateInput, Prisma.AdWatchSessionUncheckedUpdateInput>
}

/**
 * AdWatchSession delete
 */
export type AdWatchSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  /**
   * Filter which AdWatchSession to delete.
   */
  where: Prisma.AdWatchSessionWhereUniqueInput
}

/**
 * AdWatchSession deleteMany
 */
export type AdWatchSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdWatchSessions to delete
   */
  where?: Prisma.AdWatchSessionWhereInput
  /**
   * Limit how many AdWatchSessions to delete.
   */
  limit?: number
}

/**
 * AdWatchSession without action
 */
export type AdWatchSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
}
