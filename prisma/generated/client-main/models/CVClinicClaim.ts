
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CVClinicClaim` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CVClinicClaim
 * 
 */
export type CVClinicClaimModel = runtime.Types.Result.DefaultSelection<Prisma.$CVClinicClaimPayload>

export type AggregateCVClinicClaim = {
  _count: CVClinicClaimCountAggregateOutputType | null
  _min: CVClinicClaimMinAggregateOutputType | null
  _max: CVClinicClaimMaxAggregateOutputType | null
}

export type CVClinicClaimMinAggregateOutputType = {
  id: string | null
  userId: string | null
  status: $Enums.CV_STATUS | null
  usedVoucherCode: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CVClinicClaimMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  status: $Enums.CV_STATUS | null
  usedVoucherCode: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CVClinicClaimCountAggregateOutputType = {
  id: number
  userId: number
  status: number
  usedVoucherCode: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CVClinicClaimMinAggregateInputType = {
  id?: true
  userId?: true
  status?: true
  usedVoucherCode?: true
  createdAt?: true
  updatedAt?: true
}

export type CVClinicClaimMaxAggregateInputType = {
  id?: true
  userId?: true
  status?: true
  usedVoucherCode?: true
  createdAt?: true
  updatedAt?: true
}

export type CVClinicClaimCountAggregateInputType = {
  id?: true
  userId?: true
  status?: true
  usedVoucherCode?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CVClinicClaimAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CVClinicClaim to aggregate.
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicClaims to fetch.
   */
  orderBy?: Prisma.CVClinicClaimOrderByWithRelationInput | Prisma.CVClinicClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CVClinicClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CVClinicClaims
  **/
  _count?: true | CVClinicClaimCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CVClinicClaimMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CVClinicClaimMaxAggregateInputType
}

export type GetCVClinicClaimAggregateType<T extends CVClinicClaimAggregateArgs> = {
      [P in keyof T & keyof AggregateCVClinicClaim]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCVClinicClaim[P]>
    : Prisma.GetScalarType<T[P], AggregateCVClinicClaim[P]>
}




export type CVClinicClaimGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CVClinicClaimWhereInput
  orderBy?: Prisma.CVClinicClaimOrderByWithAggregationInput | Prisma.CVClinicClaimOrderByWithAggregationInput[]
  by: Prisma.CVClinicClaimScalarFieldEnum[] | Prisma.CVClinicClaimScalarFieldEnum
  having?: Prisma.CVClinicClaimScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CVClinicClaimCountAggregateInputType | true
  _min?: CVClinicClaimMinAggregateInputType
  _max?: CVClinicClaimMaxAggregateInputType
}

export type CVClinicClaimGroupByOutputType = {
  id: string
  userId: string
  status: $Enums.CV_STATUS
  usedVoucherCode: string
  createdAt: Date
  updatedAt: Date
  _count: CVClinicClaimCountAggregateOutputType | null
  _min: CVClinicClaimMinAggregateOutputType | null
  _max: CVClinicClaimMaxAggregateOutputType | null
}

type GetCVClinicClaimGroupByPayload<T extends CVClinicClaimGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CVClinicClaimGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CVClinicClaimGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CVClinicClaimGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CVClinicClaimGroupByOutputType[P]>
      }
    >
  > 



export type CVClinicClaimWhereInput = {
  AND?: Prisma.CVClinicClaimWhereInput | Prisma.CVClinicClaimWhereInput[]
  OR?: Prisma.CVClinicClaimWhereInput[]
  NOT?: Prisma.CVClinicClaimWhereInput | Prisma.CVClinicClaimWhereInput[]
  id?: Prisma.StringFilter<"CVClinicClaim"> | string
  userId?: Prisma.StringFilter<"CVClinicClaim"> | string
  status?: Prisma.EnumCV_STATUSFilter<"CVClinicClaim"> | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFilter<"CVClinicClaim"> | string
  createdAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
  CVClinicVouchers?: Prisma.XOR<Prisma.CVClinicVouchersScalarRelationFilter, Prisma.CVClinicVouchersWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}

export type CVClinicClaimOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  usedVoucherCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  CVClinicVouchers?: Prisma.CVClinicVouchersOrderByWithRelationInput
  user?: Prisma.userOrderByWithRelationInput
}

export type CVClinicClaimWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.CVClinicClaimWhereInput | Prisma.CVClinicClaimWhereInput[]
  OR?: Prisma.CVClinicClaimWhereInput[]
  NOT?: Prisma.CVClinicClaimWhereInput | Prisma.CVClinicClaimWhereInput[]
  status?: Prisma.EnumCV_STATUSFilter<"CVClinicClaim"> | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFilter<"CVClinicClaim"> | string
  createdAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
  CVClinicVouchers?: Prisma.XOR<Prisma.CVClinicVouchersScalarRelationFilter, Prisma.CVClinicVouchersWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}, "id" | "userId">

export type CVClinicClaimOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  usedVoucherCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CVClinicClaimCountOrderByAggregateInput
  _max?: Prisma.CVClinicClaimMaxOrderByAggregateInput
  _min?: Prisma.CVClinicClaimMinOrderByAggregateInput
}

export type CVClinicClaimScalarWhereWithAggregatesInput = {
  AND?: Prisma.CVClinicClaimScalarWhereWithAggregatesInput | Prisma.CVClinicClaimScalarWhereWithAggregatesInput[]
  OR?: Prisma.CVClinicClaimScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CVClinicClaimScalarWhereWithAggregatesInput | Prisma.CVClinicClaimScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CVClinicClaim"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CVClinicClaim"> | string
  status?: Prisma.EnumCV_STATUSWithAggregatesFilter<"CVClinicClaim"> | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringWithAggregatesFilter<"CVClinicClaim"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CVClinicClaim"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CVClinicClaim"> | Date | string
}

export type CVClinicClaimCreateInput = {
  id: string
  status?: $Enums.CV_STATUS
  createdAt?: Date | string
  updatedAt: Date | string
  CVClinicVouchers: Prisma.CVClinicVouchersCreateNestedOneWithoutCVClinicClaimInput
  user: Prisma.userCreateNestedOneWithoutCVClinicClaimInput
}

export type CVClinicClaimUncheckedCreateInput = {
  id: string
  userId: string
  status?: $Enums.CV_STATUS
  usedVoucherCode: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type CVClinicClaimUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  CVClinicVouchers?: Prisma.CVClinicVouchersUpdateOneRequiredWithoutCVClinicClaimNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutCVClinicClaimNestedInput
}

export type CVClinicClaimUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CVClinicClaimCreateManyInput = {
  id: string
  userId: string
  status?: $Enums.CV_STATUS
  usedVoucherCode: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type CVClinicClaimUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CVClinicClaimUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CVClinicClaimCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  usedVoucherCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CVClinicClaimMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  usedVoucherCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CVClinicClaimMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  usedVoucherCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CVClinicClaimListRelationFilter = {
  every?: Prisma.CVClinicClaimWhereInput
  some?: Prisma.CVClinicClaimWhereInput
  none?: Prisma.CVClinicClaimWhereInput
}

export type CVClinicClaimOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CVClinicClaimNullableScalarRelationFilter = {
  is?: Prisma.CVClinicClaimWhereInput | null
  isNot?: Prisma.CVClinicClaimWhereInput | null
}

export type EnumCV_STATUSFieldUpdateOperationsInput = {
  set?: $Enums.CV_STATUS
}

export type CVClinicClaimCreateNestedManyWithoutCVClinicVouchersInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput> | Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput[] | Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput[]
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput | Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput[]
  createMany?: Prisma.CVClinicClaimCreateManyCVClinicVouchersInputEnvelope
  connect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
}

export type CVClinicClaimUncheckedCreateNestedManyWithoutCVClinicVouchersInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput> | Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput[] | Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput[]
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput | Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput[]
  createMany?: Prisma.CVClinicClaimCreateManyCVClinicVouchersInputEnvelope
  connect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
}

export type CVClinicClaimUpdateManyWithoutCVClinicVouchersNestedInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput> | Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput[] | Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput[]
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput | Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput[]
  upsert?: Prisma.CVClinicClaimUpsertWithWhereUniqueWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpsertWithWhereUniqueWithoutCVClinicVouchersInput[]
  createMany?: Prisma.CVClinicClaimCreateManyCVClinicVouchersInputEnvelope
  set?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  disconnect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  delete?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  connect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  update?: Prisma.CVClinicClaimUpdateWithWhereUniqueWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpdateWithWhereUniqueWithoutCVClinicVouchersInput[]
  updateMany?: Prisma.CVClinicClaimUpdateManyWithWhereWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpdateManyWithWhereWithoutCVClinicVouchersInput[]
  deleteMany?: Prisma.CVClinicClaimScalarWhereInput | Prisma.CVClinicClaimScalarWhereInput[]
}

export type CVClinicClaimUncheckedUpdateManyWithoutCVClinicVouchersNestedInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput> | Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput[] | Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput[]
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput | Prisma.CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput[]
  upsert?: Prisma.CVClinicClaimUpsertWithWhereUniqueWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpsertWithWhereUniqueWithoutCVClinicVouchersInput[]
  createMany?: Prisma.CVClinicClaimCreateManyCVClinicVouchersInputEnvelope
  set?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  disconnect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  delete?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  connect?: Prisma.CVClinicClaimWhereUniqueInput | Prisma.CVClinicClaimWhereUniqueInput[]
  update?: Prisma.CVClinicClaimUpdateWithWhereUniqueWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpdateWithWhereUniqueWithoutCVClinicVouchersInput[]
  updateMany?: Prisma.CVClinicClaimUpdateManyWithWhereWithoutCVClinicVouchersInput | Prisma.CVClinicClaimUpdateManyWithWhereWithoutCVClinicVouchersInput[]
  deleteMany?: Prisma.CVClinicClaimScalarWhereInput | Prisma.CVClinicClaimScalarWhereInput[]
}

export type CVClinicClaimCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutUserInput
  connect?: Prisma.CVClinicClaimWhereUniqueInput
}

export type CVClinicClaimUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutUserInput
  connect?: Prisma.CVClinicClaimWhereUniqueInput
}

export type CVClinicClaimUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutUserInput
  upsert?: Prisma.CVClinicClaimUpsertWithoutUserInput
  disconnect?: Prisma.CVClinicClaimWhereInput | boolean
  delete?: Prisma.CVClinicClaimWhereInput | boolean
  connect?: Prisma.CVClinicClaimWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CVClinicClaimUpdateToOneWithWhereWithoutUserInput, Prisma.CVClinicClaimUpdateWithoutUserInput>, Prisma.CVClinicClaimUncheckedUpdateWithoutUserInput>
}

export type CVClinicClaimUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.CVClinicClaimCreateOrConnectWithoutUserInput
  upsert?: Prisma.CVClinicClaimUpsertWithoutUserInput
  disconnect?: Prisma.CVClinicClaimWhereInput | boolean
  delete?: Prisma.CVClinicClaimWhereInput | boolean
  connect?: Prisma.CVClinicClaimWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CVClinicClaimUpdateToOneWithWhereWithoutUserInput, Prisma.CVClinicClaimUpdateWithoutUserInput>, Prisma.CVClinicClaimUncheckedUpdateWithoutUserInput>
}

export type CVClinicClaimCreateWithoutCVClinicVouchersInput = {
  id: string
  status?: $Enums.CV_STATUS
  createdAt?: Date | string
  updatedAt: Date | string
  user: Prisma.userCreateNestedOneWithoutCVClinicClaimInput
}

export type CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput = {
  id: string
  userId: string
  status?: $Enums.CV_STATUS
  createdAt?: Date | string
  updatedAt: Date | string
}

export type CVClinicClaimCreateOrConnectWithoutCVClinicVouchersInput = {
  where: Prisma.CVClinicClaimWhereUniqueInput
  create: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput>
}

export type CVClinicClaimCreateManyCVClinicVouchersInputEnvelope = {
  data: Prisma.CVClinicClaimCreateManyCVClinicVouchersInput | Prisma.CVClinicClaimCreateManyCVClinicVouchersInput[]
  skipDuplicates?: boolean
}

export type CVClinicClaimUpsertWithWhereUniqueWithoutCVClinicVouchersInput = {
  where: Prisma.CVClinicClaimWhereUniqueInput
  update: Prisma.XOR<Prisma.CVClinicClaimUpdateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedUpdateWithoutCVClinicVouchersInput>
  create: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedCreateWithoutCVClinicVouchersInput>
}

export type CVClinicClaimUpdateWithWhereUniqueWithoutCVClinicVouchersInput = {
  where: Prisma.CVClinicClaimWhereUniqueInput
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateWithoutCVClinicVouchersInput, Prisma.CVClinicClaimUncheckedUpdateWithoutCVClinicVouchersInput>
}

export type CVClinicClaimUpdateManyWithWhereWithoutCVClinicVouchersInput = {
  where: Prisma.CVClinicClaimScalarWhereInput
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateManyMutationInput, Prisma.CVClinicClaimUncheckedUpdateManyWithoutCVClinicVouchersInput>
}

export type CVClinicClaimScalarWhereInput = {
  AND?: Prisma.CVClinicClaimScalarWhereInput | Prisma.CVClinicClaimScalarWhereInput[]
  OR?: Prisma.CVClinicClaimScalarWhereInput[]
  NOT?: Prisma.CVClinicClaimScalarWhereInput | Prisma.CVClinicClaimScalarWhereInput[]
  id?: Prisma.StringFilter<"CVClinicClaim"> | string
  userId?: Prisma.StringFilter<"CVClinicClaim"> | string
  status?: Prisma.EnumCV_STATUSFilter<"CVClinicClaim"> | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFilter<"CVClinicClaim"> | string
  createdAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CVClinicClaim"> | Date | string
}

export type CVClinicClaimCreateWithoutUserInput = {
  id: string
  status?: $Enums.CV_STATUS
  createdAt?: Date | string
  updatedAt: Date | string
  CVClinicVouchers: Prisma.CVClinicVouchersCreateNestedOneWithoutCVClinicClaimInput
}

export type CVClinicClaimUncheckedCreateWithoutUserInput = {
  id: string
  status?: $Enums.CV_STATUS
  usedVoucherCode: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type CVClinicClaimCreateOrConnectWithoutUserInput = {
  where: Prisma.CVClinicClaimWhereUniqueInput
  create: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
}

export type CVClinicClaimUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.CVClinicClaimUpdateWithoutUserInput, Prisma.CVClinicClaimUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CVClinicClaimCreateWithoutUserInput, Prisma.CVClinicClaimUncheckedCreateWithoutUserInput>
  where?: Prisma.CVClinicClaimWhereInput
}

export type CVClinicClaimUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.CVClinicClaimWhereInput
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateWithoutUserInput, Prisma.CVClinicClaimUncheckedUpdateWithoutUserInput>
}

export type CVClinicClaimUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  CVClinicVouchers?: Prisma.CVClinicVouchersUpdateOneRequiredWithoutCVClinicClaimNestedInput
}

export type CVClinicClaimUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  usedVoucherCode?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CVClinicClaimCreateManyCVClinicVouchersInput = {
  id: string
  userId: string
  status?: $Enums.CV_STATUS
  createdAt?: Date | string
  updatedAt: Date | string
}

export type CVClinicClaimUpdateWithoutCVClinicVouchersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.userUpdateOneRequiredWithoutCVClinicClaimNestedInput
}

export type CVClinicClaimUncheckedUpdateWithoutCVClinicVouchersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CVClinicClaimUncheckedUpdateManyWithoutCVClinicVouchersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCV_STATUSFieldUpdateOperationsInput | $Enums.CV_STATUS
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CVClinicClaimSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  status?: boolean
  usedVoucherCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cVClinicClaim"]>

export type CVClinicClaimSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  status?: boolean
  usedVoucherCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cVClinicClaim"]>

export type CVClinicClaimSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  status?: boolean
  usedVoucherCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cVClinicClaim"]>

export type CVClinicClaimSelectScalar = {
  id?: boolean
  userId?: boolean
  status?: boolean
  usedVoucherCode?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CVClinicClaimOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "status" | "usedVoucherCode" | "createdAt" | "updatedAt", ExtArgs["result"]["cVClinicClaim"]>
export type CVClinicClaimInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type CVClinicClaimIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type CVClinicClaimIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CVClinicVouchers?: boolean | Prisma.CVClinicVouchersDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}

export type $CVClinicClaimPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CVClinicClaim"
  objects: {
    CVClinicVouchers: Prisma.$CVClinicVouchersPayload<ExtArgs>
    user: Prisma.$userPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    status: $Enums.CV_STATUS
    usedVoucherCode: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["cVClinicClaim"]>
  composites: {}
}

export type CVClinicClaimGetPayload<S extends boolean | null | undefined | CVClinicClaimDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload, S>

export type CVClinicClaimCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CVClinicClaimFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CVClinicClaimCountAggregateInputType | true
  }

export interface CVClinicClaimDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CVClinicClaim'], meta: { name: 'CVClinicClaim' } }
  /**
   * Find zero or one CVClinicClaim that matches the filter.
   * @param {CVClinicClaimFindUniqueArgs} args - Arguments to find a CVClinicClaim
   * @example
   * // Get one CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CVClinicClaimFindUniqueArgs>(args: Prisma.SelectSubset<T, CVClinicClaimFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CVClinicClaim that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CVClinicClaimFindUniqueOrThrowArgs} args - Arguments to find a CVClinicClaim
   * @example
   * // Get one CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CVClinicClaimFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CVClinicClaimFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CVClinicClaim that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimFindFirstArgs} args - Arguments to find a CVClinicClaim
   * @example
   * // Get one CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CVClinicClaimFindFirstArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimFindFirstArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CVClinicClaim that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimFindFirstOrThrowArgs} args - Arguments to find a CVClinicClaim
   * @example
   * // Get one CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CVClinicClaimFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CVClinicClaims that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CVClinicClaims
   * const cVClinicClaims = await prisma.cVClinicClaim.findMany()
   * 
   * // Get first 10 CVClinicClaims
   * const cVClinicClaims = await prisma.cVClinicClaim.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cVClinicClaimWithIdOnly = await prisma.cVClinicClaim.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CVClinicClaimFindManyArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CVClinicClaim.
   * @param {CVClinicClaimCreateArgs} args - Arguments to create a CVClinicClaim.
   * @example
   * // Create one CVClinicClaim
   * const CVClinicClaim = await prisma.cVClinicClaim.create({
   *   data: {
   *     // ... data to create a CVClinicClaim
   *   }
   * })
   * 
   */
  create<T extends CVClinicClaimCreateArgs>(args: Prisma.SelectSubset<T, CVClinicClaimCreateArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CVClinicClaims.
   * @param {CVClinicClaimCreateManyArgs} args - Arguments to create many CVClinicClaims.
   * @example
   * // Create many CVClinicClaims
   * const cVClinicClaim = await prisma.cVClinicClaim.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CVClinicClaimCreateManyArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CVClinicClaims and returns the data saved in the database.
   * @param {CVClinicClaimCreateManyAndReturnArgs} args - Arguments to create many CVClinicClaims.
   * @example
   * // Create many CVClinicClaims
   * const cVClinicClaim = await prisma.cVClinicClaim.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CVClinicClaims and only return the `id`
   * const cVClinicClaimWithIdOnly = await prisma.cVClinicClaim.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CVClinicClaimCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CVClinicClaim.
   * @param {CVClinicClaimDeleteArgs} args - Arguments to delete one CVClinicClaim.
   * @example
   * // Delete one CVClinicClaim
   * const CVClinicClaim = await prisma.cVClinicClaim.delete({
   *   where: {
   *     // ... filter to delete one CVClinicClaim
   *   }
   * })
   * 
   */
  delete<T extends CVClinicClaimDeleteArgs>(args: Prisma.SelectSubset<T, CVClinicClaimDeleteArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CVClinicClaim.
   * @param {CVClinicClaimUpdateArgs} args - Arguments to update one CVClinicClaim.
   * @example
   * // Update one CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CVClinicClaimUpdateArgs>(args: Prisma.SelectSubset<T, CVClinicClaimUpdateArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CVClinicClaims.
   * @param {CVClinicClaimDeleteManyArgs} args - Arguments to filter CVClinicClaims to delete.
   * @example
   * // Delete a few CVClinicClaims
   * const { count } = await prisma.cVClinicClaim.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CVClinicClaimDeleteManyArgs>(args?: Prisma.SelectSubset<T, CVClinicClaimDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CVClinicClaims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CVClinicClaims
   * const cVClinicClaim = await prisma.cVClinicClaim.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CVClinicClaimUpdateManyArgs>(args: Prisma.SelectSubset<T, CVClinicClaimUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CVClinicClaims and returns the data updated in the database.
   * @param {CVClinicClaimUpdateManyAndReturnArgs} args - Arguments to update many CVClinicClaims.
   * @example
   * // Update many CVClinicClaims
   * const cVClinicClaim = await prisma.cVClinicClaim.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CVClinicClaims and only return the `id`
   * const cVClinicClaimWithIdOnly = await prisma.cVClinicClaim.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CVClinicClaimUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CVClinicClaimUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CVClinicClaim.
   * @param {CVClinicClaimUpsertArgs} args - Arguments to update or create a CVClinicClaim.
   * @example
   * // Update or create a CVClinicClaim
   * const cVClinicClaim = await prisma.cVClinicClaim.upsert({
   *   create: {
   *     // ... data to create a CVClinicClaim
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CVClinicClaim we want to update
   *   }
   * })
   */
  upsert<T extends CVClinicClaimUpsertArgs>(args: Prisma.SelectSubset<T, CVClinicClaimUpsertArgs<ExtArgs>>): Prisma.Prisma__CVClinicClaimClient<runtime.Types.Result.GetResult<Prisma.$CVClinicClaimPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CVClinicClaims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimCountArgs} args - Arguments to filter CVClinicClaims to count.
   * @example
   * // Count the number of CVClinicClaims
   * const count = await prisma.cVClinicClaim.count({
   *   where: {
   *     // ... the filter for the CVClinicClaims we want to count
   *   }
   * })
  **/
  count<T extends CVClinicClaimCountArgs>(
    args?: Prisma.Subset<T, CVClinicClaimCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CVClinicClaimCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CVClinicClaim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CVClinicClaimAggregateArgs>(args: Prisma.Subset<T, CVClinicClaimAggregateArgs>): Prisma.PrismaPromise<GetCVClinicClaimAggregateType<T>>

  /**
   * Group by CVClinicClaim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CVClinicClaimGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CVClinicClaimGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CVClinicClaimGroupByArgs['orderBy'] }
      : { orderBy?: CVClinicClaimGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CVClinicClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCVClinicClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CVClinicClaim model
 */
readonly fields: CVClinicClaimFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CVClinicClaim.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CVClinicClaimClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  CVClinicVouchers<T extends Prisma.CVClinicVouchersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CVClinicVouchersDefaultArgs<ExtArgs>>): Prisma.Prisma__CVClinicVouchersClient<runtime.Types.Result.GetResult<Prisma.$CVClinicVouchersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.userDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.userDefaultArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CVClinicClaim model
 */
export interface CVClinicClaimFieldRefs {
  readonly id: Prisma.FieldRef<"CVClinicClaim", 'String'>
  readonly userId: Prisma.FieldRef<"CVClinicClaim", 'String'>
  readonly status: Prisma.FieldRef<"CVClinicClaim", 'CV_STATUS'>
  readonly usedVoucherCode: Prisma.FieldRef<"CVClinicClaim", 'String'>
  readonly createdAt: Prisma.FieldRef<"CVClinicClaim", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CVClinicClaim", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CVClinicClaim findUnique
 */
export type CVClinicClaimFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicClaim to fetch.
   */
  where: Prisma.CVClinicClaimWhereUniqueInput
}

/**
 * CVClinicClaim findUniqueOrThrow
 */
export type CVClinicClaimFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicClaim to fetch.
   */
  where: Prisma.CVClinicClaimWhereUniqueInput
}

/**
 * CVClinicClaim findFirst
 */
export type CVClinicClaimFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicClaim to fetch.
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicClaims to fetch.
   */
  orderBy?: Prisma.CVClinicClaimOrderByWithRelationInput | Prisma.CVClinicClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CVClinicClaims.
   */
  cursor?: Prisma.CVClinicClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CVClinicClaims.
   */
  distinct?: Prisma.CVClinicClaimScalarFieldEnum | Prisma.CVClinicClaimScalarFieldEnum[]
}

/**
 * CVClinicClaim findFirstOrThrow
 */
export type CVClinicClaimFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicClaim to fetch.
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicClaims to fetch.
   */
  orderBy?: Prisma.CVClinicClaimOrderByWithRelationInput | Prisma.CVClinicClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CVClinicClaims.
   */
  cursor?: Prisma.CVClinicClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CVClinicClaims.
   */
  distinct?: Prisma.CVClinicClaimScalarFieldEnum | Prisma.CVClinicClaimScalarFieldEnum[]
}

/**
 * CVClinicClaim findMany
 */
export type CVClinicClaimFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter, which CVClinicClaims to fetch.
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CVClinicClaims to fetch.
   */
  orderBy?: Prisma.CVClinicClaimOrderByWithRelationInput | Prisma.CVClinicClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CVClinicClaims.
   */
  cursor?: Prisma.CVClinicClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CVClinicClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CVClinicClaims.
   */
  skip?: number
  distinct?: Prisma.CVClinicClaimScalarFieldEnum | Prisma.CVClinicClaimScalarFieldEnum[]
}

/**
 * CVClinicClaim create
 */
export type CVClinicClaimCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * The data needed to create a CVClinicClaim.
   */
  data: Prisma.XOR<Prisma.CVClinicClaimCreateInput, Prisma.CVClinicClaimUncheckedCreateInput>
}

/**
 * CVClinicClaim createMany
 */
export type CVClinicClaimCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CVClinicClaims.
   */
  data: Prisma.CVClinicClaimCreateManyInput | Prisma.CVClinicClaimCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CVClinicClaim createManyAndReturn
 */
export type CVClinicClaimCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * The data used to create many CVClinicClaims.
   */
  data: Prisma.CVClinicClaimCreateManyInput | Prisma.CVClinicClaimCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CVClinicClaim update
 */
export type CVClinicClaimUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * The data needed to update a CVClinicClaim.
   */
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateInput, Prisma.CVClinicClaimUncheckedUpdateInput>
  /**
   * Choose, which CVClinicClaim to update.
   */
  where: Prisma.CVClinicClaimWhereUniqueInput
}

/**
 * CVClinicClaim updateMany
 */
export type CVClinicClaimUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CVClinicClaims.
   */
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateManyMutationInput, Prisma.CVClinicClaimUncheckedUpdateManyInput>
  /**
   * Filter which CVClinicClaims to update
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * Limit how many CVClinicClaims to update.
   */
  limit?: number
}

/**
 * CVClinicClaim updateManyAndReturn
 */
export type CVClinicClaimUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * The data used to update CVClinicClaims.
   */
  data: Prisma.XOR<Prisma.CVClinicClaimUpdateManyMutationInput, Prisma.CVClinicClaimUncheckedUpdateManyInput>
  /**
   * Filter which CVClinicClaims to update
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * Limit how many CVClinicClaims to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CVClinicClaim upsert
 */
export type CVClinicClaimUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * The filter to search for the CVClinicClaim to update in case it exists.
   */
  where: Prisma.CVClinicClaimWhereUniqueInput
  /**
   * In case the CVClinicClaim found by the `where` argument doesn't exist, create a new CVClinicClaim with this data.
   */
  create: Prisma.XOR<Prisma.CVClinicClaimCreateInput, Prisma.CVClinicClaimUncheckedCreateInput>
  /**
   * In case the CVClinicClaim was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CVClinicClaimUpdateInput, Prisma.CVClinicClaimUncheckedUpdateInput>
}

/**
 * CVClinicClaim delete
 */
export type CVClinicClaimDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
  /**
   * Filter which CVClinicClaim to delete.
   */
  where: Prisma.CVClinicClaimWhereUniqueInput
}

/**
 * CVClinicClaim deleteMany
 */
export type CVClinicClaimDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CVClinicClaims to delete
   */
  where?: Prisma.CVClinicClaimWhereInput
  /**
   * Limit how many CVClinicClaims to delete.
   */
  limit?: number
}

/**
 * CVClinicClaim without action
 */
export type CVClinicClaimDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CVClinicClaim
   */
  select?: Prisma.CVClinicClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CVClinicClaim
   */
  omit?: Prisma.CVClinicClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CVClinicClaimInclude<ExtArgs> | null
}
