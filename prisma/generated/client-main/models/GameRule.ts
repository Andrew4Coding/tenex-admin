
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GameRule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameRule
 * 
 */
export type GameRuleModel = runtime.Types.Result.DefaultSelection<Prisma.$GameRulePayload>

export type AggregateGameRule = {
  _count: GameRuleCountAggregateOutputType | null
  _min: GameRuleMinAggregateOutputType | null
  _max: GameRuleMaxAggregateOutputType | null
}

export type GameRuleMinAggregateOutputType = {
  id: string | null
  gameId: string | null
  title: string | null
  rule: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameRuleMaxAggregateOutputType = {
  id: string | null
  gameId: string | null
  title: string | null
  rule: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameRuleCountAggregateOutputType = {
  id: number
  gameId: number
  title: number
  rule: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type GameRuleMinAggregateInputType = {
  id?: true
  gameId?: true
  title?: true
  rule?: true
  createdAt?: true
  updatedAt?: true
}

export type GameRuleMaxAggregateInputType = {
  id?: true
  gameId?: true
  title?: true
  rule?: true
  createdAt?: true
  updatedAt?: true
}

export type GameRuleCountAggregateInputType = {
  id?: true
  gameId?: true
  title?: true
  rule?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type GameRuleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameRule to aggregate.
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameRules to fetch.
   */
  orderBy?: Prisma.GameRuleOrderByWithRelationInput | Prisma.GameRuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameRuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameRules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameRules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameRules
  **/
  _count?: true | GameRuleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameRuleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameRuleMaxAggregateInputType
}

export type GetGameRuleAggregateType<T extends GameRuleAggregateArgs> = {
      [P in keyof T & keyof AggregateGameRule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameRule[P]>
    : Prisma.GetScalarType<T[P], AggregateGameRule[P]>
}




export type GameRuleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameRuleWhereInput
  orderBy?: Prisma.GameRuleOrderByWithAggregationInput | Prisma.GameRuleOrderByWithAggregationInput[]
  by: Prisma.GameRuleScalarFieldEnum[] | Prisma.GameRuleScalarFieldEnum
  having?: Prisma.GameRuleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameRuleCountAggregateInputType | true
  _min?: GameRuleMinAggregateInputType
  _max?: GameRuleMaxAggregateInputType
}

export type GameRuleGroupByOutputType = {
  id: string
  gameId: string
  title: string | null
  rule: string
  createdAt: Date
  updatedAt: Date
  _count: GameRuleCountAggregateOutputType | null
  _min: GameRuleMinAggregateOutputType | null
  _max: GameRuleMaxAggregateOutputType | null
}

type GetGameRuleGroupByPayload<T extends GameRuleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameRuleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameRuleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameRuleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameRuleGroupByOutputType[P]>
      }
    >
  > 



export type GameRuleWhereInput = {
  AND?: Prisma.GameRuleWhereInput | Prisma.GameRuleWhereInput[]
  OR?: Prisma.GameRuleWhereInput[]
  NOT?: Prisma.GameRuleWhereInput | Prisma.GameRuleWhereInput[]
  id?: Prisma.StringFilter<"GameRule"> | string
  gameId?: Prisma.StringFilter<"GameRule"> | string
  title?: Prisma.StringNullableFilter<"GameRule"> | string | null
  rule?: Prisma.StringFilter<"GameRule"> | string
  createdAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
  Game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
}

export type GameRuleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  rule?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Game?: Prisma.GameOrderByWithRelationInput
}

export type GameRuleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GameRuleWhereInput | Prisma.GameRuleWhereInput[]
  OR?: Prisma.GameRuleWhereInput[]
  NOT?: Prisma.GameRuleWhereInput | Prisma.GameRuleWhereInput[]
  gameId?: Prisma.StringFilter<"GameRule"> | string
  title?: Prisma.StringNullableFilter<"GameRule"> | string | null
  rule?: Prisma.StringFilter<"GameRule"> | string
  createdAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
  Game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
}, "id">

export type GameRuleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  rule?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.GameRuleCountOrderByAggregateInput
  _max?: Prisma.GameRuleMaxOrderByAggregateInput
  _min?: Prisma.GameRuleMinOrderByAggregateInput
}

export type GameRuleScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameRuleScalarWhereWithAggregatesInput | Prisma.GameRuleScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameRuleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameRuleScalarWhereWithAggregatesInput | Prisma.GameRuleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GameRule"> | string
  gameId?: Prisma.StringWithAggregatesFilter<"GameRule"> | string
  title?: Prisma.StringNullableWithAggregatesFilter<"GameRule"> | string | null
  rule?: Prisma.StringWithAggregatesFilter<"GameRule"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameRule"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GameRule"> | Date | string
}

export type GameRuleCreateInput = {
  id: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
  Game: Prisma.GameCreateNestedOneWithoutGameRuleInput
}

export type GameRuleUncheckedCreateInput = {
  id: string
  gameId: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type GameRuleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Game?: Prisma.GameUpdateOneRequiredWithoutGameRuleNestedInput
}

export type GameRuleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameRuleCreateManyInput = {
  id: string
  gameId: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type GameRuleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameRuleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameRuleListRelationFilter = {
  every?: Prisma.GameRuleWhereInput
  some?: Prisma.GameRuleWhereInput
  none?: Prisma.GameRuleWhereInput
}

export type GameRuleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameRuleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rule?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameRuleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rule?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameRuleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  rule?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameRuleCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput> | Prisma.GameRuleCreateWithoutGameInput[] | Prisma.GameRuleUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameRuleCreateOrConnectWithoutGameInput | Prisma.GameRuleCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameRuleCreateManyGameInputEnvelope
  connect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
}

export type GameRuleUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput> | Prisma.GameRuleCreateWithoutGameInput[] | Prisma.GameRuleUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameRuleCreateOrConnectWithoutGameInput | Prisma.GameRuleCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameRuleCreateManyGameInputEnvelope
  connect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
}

export type GameRuleUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput> | Prisma.GameRuleCreateWithoutGameInput[] | Prisma.GameRuleUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameRuleCreateOrConnectWithoutGameInput | Prisma.GameRuleCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameRuleUpsertWithWhereUniqueWithoutGameInput | Prisma.GameRuleUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameRuleCreateManyGameInputEnvelope
  set?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  disconnect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  delete?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  connect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  update?: Prisma.GameRuleUpdateWithWhereUniqueWithoutGameInput | Prisma.GameRuleUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameRuleUpdateManyWithWhereWithoutGameInput | Prisma.GameRuleUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameRuleScalarWhereInput | Prisma.GameRuleScalarWhereInput[]
}

export type GameRuleUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput> | Prisma.GameRuleCreateWithoutGameInput[] | Prisma.GameRuleUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameRuleCreateOrConnectWithoutGameInput | Prisma.GameRuleCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameRuleUpsertWithWhereUniqueWithoutGameInput | Prisma.GameRuleUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameRuleCreateManyGameInputEnvelope
  set?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  disconnect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  delete?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  connect?: Prisma.GameRuleWhereUniqueInput | Prisma.GameRuleWhereUniqueInput[]
  update?: Prisma.GameRuleUpdateWithWhereUniqueWithoutGameInput | Prisma.GameRuleUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameRuleUpdateManyWithWhereWithoutGameInput | Prisma.GameRuleUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameRuleScalarWhereInput | Prisma.GameRuleScalarWhereInput[]
}

export type GameRuleCreateWithoutGameInput = {
  id: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type GameRuleUncheckedCreateWithoutGameInput = {
  id: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type GameRuleCreateOrConnectWithoutGameInput = {
  where: Prisma.GameRuleWhereUniqueInput
  create: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput>
}

export type GameRuleCreateManyGameInputEnvelope = {
  data: Prisma.GameRuleCreateManyGameInput | Prisma.GameRuleCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type GameRuleUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameRuleWhereUniqueInput
  update: Prisma.XOR<Prisma.GameRuleUpdateWithoutGameInput, Prisma.GameRuleUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.GameRuleCreateWithoutGameInput, Prisma.GameRuleUncheckedCreateWithoutGameInput>
}

export type GameRuleUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameRuleWhereUniqueInput
  data: Prisma.XOR<Prisma.GameRuleUpdateWithoutGameInput, Prisma.GameRuleUncheckedUpdateWithoutGameInput>
}

export type GameRuleUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.GameRuleScalarWhereInput
  data: Prisma.XOR<Prisma.GameRuleUpdateManyMutationInput, Prisma.GameRuleUncheckedUpdateManyWithoutGameInput>
}

export type GameRuleScalarWhereInput = {
  AND?: Prisma.GameRuleScalarWhereInput | Prisma.GameRuleScalarWhereInput[]
  OR?: Prisma.GameRuleScalarWhereInput[]
  NOT?: Prisma.GameRuleScalarWhereInput | Prisma.GameRuleScalarWhereInput[]
  id?: Prisma.StringFilter<"GameRule"> | string
  gameId?: Prisma.StringFilter<"GameRule"> | string
  title?: Prisma.StringNullableFilter<"GameRule"> | string | null
  rule?: Prisma.StringFilter<"GameRule"> | string
  createdAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameRule"> | Date | string
}

export type GameRuleCreateManyGameInput = {
  id: string
  title?: string | null
  rule: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type GameRuleUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameRuleUncheckedUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameRuleUncheckedUpdateManyWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rule?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type GameRuleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  gameId?: boolean
  title?: boolean
  rule?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameRule"]>

export type GameRuleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  gameId?: boolean
  title?: boolean
  rule?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameRule"]>

export type GameRuleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  gameId?: boolean
  title?: boolean
  rule?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameRule"]>

export type GameRuleSelectScalar = {
  id?: boolean
  gameId?: boolean
  title?: boolean
  rule?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type GameRuleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "gameId" | "title" | "rule" | "createdAt" | "updatedAt", ExtArgs["result"]["gameRule"]>
export type GameRuleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type GameRuleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type GameRuleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}

export type $GameRulePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameRule"
  objects: {
    Game: Prisma.$GamePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    gameId: string
    title: string | null
    rule: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["gameRule"]>
  composites: {}
}

export type GameRuleGetPayload<S extends boolean | null | undefined | GameRuleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameRulePayload, S>

export type GameRuleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameRuleCountAggregateInputType | true
  }

export interface GameRuleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameRule'], meta: { name: 'GameRule' } }
  /**
   * Find zero or one GameRule that matches the filter.
   * @param {GameRuleFindUniqueArgs} args - Arguments to find a GameRule
   * @example
   * // Get one GameRule
   * const gameRule = await prisma.gameRule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameRuleFindUniqueArgs>(args: Prisma.SelectSubset<T, GameRuleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameRule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameRuleFindUniqueOrThrowArgs} args - Arguments to find a GameRule
   * @example
   * // Get one GameRule
   * const gameRule = await prisma.gameRule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameRuleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameRule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleFindFirstArgs} args - Arguments to find a GameRule
   * @example
   * // Get one GameRule
   * const gameRule = await prisma.gameRule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameRuleFindFirstArgs>(args?: Prisma.SelectSubset<T, GameRuleFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameRule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleFindFirstOrThrowArgs} args - Arguments to find a GameRule
   * @example
   * // Get one GameRule
   * const gameRule = await prisma.gameRule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameRuleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameRules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameRules
   * const gameRules = await prisma.gameRule.findMany()
   * 
   * // Get first 10 GameRules
   * const gameRules = await prisma.gameRule.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameRuleWithIdOnly = await prisma.gameRule.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameRuleFindManyArgs>(args?: Prisma.SelectSubset<T, GameRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameRule.
   * @param {GameRuleCreateArgs} args - Arguments to create a GameRule.
   * @example
   * // Create one GameRule
   * const GameRule = await prisma.gameRule.create({
   *   data: {
   *     // ... data to create a GameRule
   *   }
   * })
   * 
   */
  create<T extends GameRuleCreateArgs>(args: Prisma.SelectSubset<T, GameRuleCreateArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameRules.
   * @param {GameRuleCreateManyArgs} args - Arguments to create many GameRules.
   * @example
   * // Create many GameRules
   * const gameRule = await prisma.gameRule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameRuleCreateManyArgs>(args?: Prisma.SelectSubset<T, GameRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameRules and returns the data saved in the database.
   * @param {GameRuleCreateManyAndReturnArgs} args - Arguments to create many GameRules.
   * @example
   * // Create many GameRules
   * const gameRule = await prisma.gameRule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameRules and only return the `id`
   * const gameRuleWithIdOnly = await prisma.gameRule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameRuleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameRule.
   * @param {GameRuleDeleteArgs} args - Arguments to delete one GameRule.
   * @example
   * // Delete one GameRule
   * const GameRule = await prisma.gameRule.delete({
   *   where: {
   *     // ... filter to delete one GameRule
   *   }
   * })
   * 
   */
  delete<T extends GameRuleDeleteArgs>(args: Prisma.SelectSubset<T, GameRuleDeleteArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameRule.
   * @param {GameRuleUpdateArgs} args - Arguments to update one GameRule.
   * @example
   * // Update one GameRule
   * const gameRule = await prisma.gameRule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameRuleUpdateArgs>(args: Prisma.SelectSubset<T, GameRuleUpdateArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameRules.
   * @param {GameRuleDeleteManyArgs} args - Arguments to filter GameRules to delete.
   * @example
   * // Delete a few GameRules
   * const { count } = await prisma.gameRule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameRuleDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameRules
   * const gameRule = await prisma.gameRule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameRuleUpdateManyArgs>(args: Prisma.SelectSubset<T, GameRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameRules and returns the data updated in the database.
   * @param {GameRuleUpdateManyAndReturnArgs} args - Arguments to update many GameRules.
   * @example
   * // Update many GameRules
   * const gameRule = await prisma.gameRule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameRules and only return the `id`
   * const gameRuleWithIdOnly = await prisma.gameRule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameRuleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameRuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameRule.
   * @param {GameRuleUpsertArgs} args - Arguments to update or create a GameRule.
   * @example
   * // Update or create a GameRule
   * const gameRule = await prisma.gameRule.upsert({
   *   create: {
   *     // ... data to create a GameRule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameRule we want to update
   *   }
   * })
   */
  upsert<T extends GameRuleUpsertArgs>(args: Prisma.SelectSubset<T, GameRuleUpsertArgs<ExtArgs>>): Prisma.Prisma__GameRuleClient<runtime.Types.Result.GetResult<Prisma.$GameRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleCountArgs} args - Arguments to filter GameRules to count.
   * @example
   * // Count the number of GameRules
   * const count = await prisma.gameRule.count({
   *   where: {
   *     // ... the filter for the GameRules we want to count
   *   }
   * })
  **/
  count<T extends GameRuleCountArgs>(
    args?: Prisma.Subset<T, GameRuleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameRuleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameRuleAggregateArgs>(args: Prisma.Subset<T, GameRuleAggregateArgs>): Prisma.PrismaPromise<GetGameRuleAggregateType<T>>

  /**
   * Group by GameRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameRuleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameRuleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameRuleGroupByArgs['orderBy'] }
      : { orderBy?: GameRuleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameRule model
 */
readonly fields: GameRuleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameRule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameRuleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameRule model
 */
export interface GameRuleFieldRefs {
  readonly id: Prisma.FieldRef<"GameRule", 'String'>
  readonly gameId: Prisma.FieldRef<"GameRule", 'String'>
  readonly title: Prisma.FieldRef<"GameRule", 'String'>
  readonly rule: Prisma.FieldRef<"GameRule", 'String'>
  readonly createdAt: Prisma.FieldRef<"GameRule", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GameRule", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GameRule findUnique
 */
export type GameRuleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter, which GameRule to fetch.
   */
  where: Prisma.GameRuleWhereUniqueInput
}

/**
 * GameRule findUniqueOrThrow
 */
export type GameRuleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter, which GameRule to fetch.
   */
  where: Prisma.GameRuleWhereUniqueInput
}

/**
 * GameRule findFirst
 */
export type GameRuleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter, which GameRule to fetch.
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameRules to fetch.
   */
  orderBy?: Prisma.GameRuleOrderByWithRelationInput | Prisma.GameRuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameRules.
   */
  cursor?: Prisma.GameRuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameRules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameRules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameRules.
   */
  distinct?: Prisma.GameRuleScalarFieldEnum | Prisma.GameRuleScalarFieldEnum[]
}

/**
 * GameRule findFirstOrThrow
 */
export type GameRuleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter, which GameRule to fetch.
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameRules to fetch.
   */
  orderBy?: Prisma.GameRuleOrderByWithRelationInput | Prisma.GameRuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameRules.
   */
  cursor?: Prisma.GameRuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameRules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameRules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameRules.
   */
  distinct?: Prisma.GameRuleScalarFieldEnum | Prisma.GameRuleScalarFieldEnum[]
}

/**
 * GameRule findMany
 */
export type GameRuleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter, which GameRules to fetch.
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameRules to fetch.
   */
  orderBy?: Prisma.GameRuleOrderByWithRelationInput | Prisma.GameRuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameRules.
   */
  cursor?: Prisma.GameRuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameRules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameRules.
   */
  skip?: number
  distinct?: Prisma.GameRuleScalarFieldEnum | Prisma.GameRuleScalarFieldEnum[]
}

/**
 * GameRule create
 */
export type GameRuleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * The data needed to create a GameRule.
   */
  data: Prisma.XOR<Prisma.GameRuleCreateInput, Prisma.GameRuleUncheckedCreateInput>
}

/**
 * GameRule createMany
 */
export type GameRuleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameRules.
   */
  data: Prisma.GameRuleCreateManyInput | Prisma.GameRuleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameRule createManyAndReturn
 */
export type GameRuleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * The data used to create many GameRules.
   */
  data: Prisma.GameRuleCreateManyInput | Prisma.GameRuleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameRule update
 */
export type GameRuleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * The data needed to update a GameRule.
   */
  data: Prisma.XOR<Prisma.GameRuleUpdateInput, Prisma.GameRuleUncheckedUpdateInput>
  /**
   * Choose, which GameRule to update.
   */
  where: Prisma.GameRuleWhereUniqueInput
}

/**
 * GameRule updateMany
 */
export type GameRuleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameRules.
   */
  data: Prisma.XOR<Prisma.GameRuleUpdateManyMutationInput, Prisma.GameRuleUncheckedUpdateManyInput>
  /**
   * Filter which GameRules to update
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * Limit how many GameRules to update.
   */
  limit?: number
}

/**
 * GameRule updateManyAndReturn
 */
export type GameRuleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * The data used to update GameRules.
   */
  data: Prisma.XOR<Prisma.GameRuleUpdateManyMutationInput, Prisma.GameRuleUncheckedUpdateManyInput>
  /**
   * Filter which GameRules to update
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * Limit how many GameRules to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameRule upsert
 */
export type GameRuleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * The filter to search for the GameRule to update in case it exists.
   */
  where: Prisma.GameRuleWhereUniqueInput
  /**
   * In case the GameRule found by the `where` argument doesn't exist, create a new GameRule with this data.
   */
  create: Prisma.XOR<Prisma.GameRuleCreateInput, Prisma.GameRuleUncheckedCreateInput>
  /**
   * In case the GameRule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameRuleUpdateInput, Prisma.GameRuleUncheckedUpdateInput>
}

/**
 * GameRule delete
 */
export type GameRuleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
  /**
   * Filter which GameRule to delete.
   */
  where: Prisma.GameRuleWhereUniqueInput
}

/**
 * GameRule deleteMany
 */
export type GameRuleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameRules to delete
   */
  where?: Prisma.GameRuleWhereInput
  /**
   * Limit how many GameRules to delete.
   */
  limit?: number
}

/**
 * GameRule without action
 */
export type GameRuleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameRule
   */
  select?: Prisma.GameRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameRule
   */
  omit?: Prisma.GameRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameRuleInclude<ExtArgs> | null
}
