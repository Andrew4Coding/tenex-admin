
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProgramRegistration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProgramRegistration
 * 
 */
export type ProgramRegistrationModel = runtime.Types.Result.DefaultSelection<Prisma.$ProgramRegistrationPayload>

export type AggregateProgramRegistration = {
  _count: ProgramRegistrationCountAggregateOutputType | null
  _min: ProgramRegistrationMinAggregateOutputType | null
  _max: ProgramRegistrationMaxAggregateOutputType | null
}

export type ProgramRegistrationMinAggregateOutputType = {
  id: string | null
  programId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProgramRegistrationMaxAggregateOutputType = {
  id: string | null
  programId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProgramRegistrationCountAggregateOutputType = {
  id: number
  programId: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProgramRegistrationMinAggregateInputType = {
  id?: true
  programId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProgramRegistrationMaxAggregateInputType = {
  id?: true
  programId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProgramRegistrationCountAggregateInputType = {
  id?: true
  programId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProgramRegistrationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProgramRegistration to aggregate.
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProgramRegistrations to fetch.
   */
  orderBy?: Prisma.ProgramRegistrationOrderByWithRelationInput | Prisma.ProgramRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProgramRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProgramRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProgramRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProgramRegistrations
  **/
  _count?: true | ProgramRegistrationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProgramRegistrationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProgramRegistrationMaxAggregateInputType
}

export type GetProgramRegistrationAggregateType<T extends ProgramRegistrationAggregateArgs> = {
      [P in keyof T & keyof AggregateProgramRegistration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProgramRegistration[P]>
    : Prisma.GetScalarType<T[P], AggregateProgramRegistration[P]>
}




export type ProgramRegistrationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProgramRegistrationWhereInput
  orderBy?: Prisma.ProgramRegistrationOrderByWithAggregationInput | Prisma.ProgramRegistrationOrderByWithAggregationInput[]
  by: Prisma.ProgramRegistrationScalarFieldEnum[] | Prisma.ProgramRegistrationScalarFieldEnum
  having?: Prisma.ProgramRegistrationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProgramRegistrationCountAggregateInputType | true
  _min?: ProgramRegistrationMinAggregateInputType
  _max?: ProgramRegistrationMaxAggregateInputType
}

export type ProgramRegistrationGroupByOutputType = {
  id: string
  programId: string
  userId: string
  createdAt: Date
  updatedAt: Date
  _count: ProgramRegistrationCountAggregateOutputType | null
  _min: ProgramRegistrationMinAggregateOutputType | null
  _max: ProgramRegistrationMaxAggregateOutputType | null
}

type GetProgramRegistrationGroupByPayload<T extends ProgramRegistrationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProgramRegistrationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProgramRegistrationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProgramRegistrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProgramRegistrationGroupByOutputType[P]>
      }
    >
  > 



export type ProgramRegistrationWhereInput = {
  AND?: Prisma.ProgramRegistrationWhereInput | Prisma.ProgramRegistrationWhereInput[]
  OR?: Prisma.ProgramRegistrationWhereInput[]
  NOT?: Prisma.ProgramRegistrationWhereInput | Prisma.ProgramRegistrationWhereInput[]
  id?: Prisma.StringFilter<"ProgramRegistration"> | string
  programId?: Prisma.StringFilter<"ProgramRegistration"> | string
  userId?: Prisma.StringFilter<"ProgramRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
  Program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}

export type ProgramRegistrationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Program?: Prisma.ProgramOrderByWithRelationInput
  user?: Prisma.userOrderByWithRelationInput
}

export type ProgramRegistrationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProgramRegistrationWhereInput | Prisma.ProgramRegistrationWhereInput[]
  OR?: Prisma.ProgramRegistrationWhereInput[]
  NOT?: Prisma.ProgramRegistrationWhereInput | Prisma.ProgramRegistrationWhereInput[]
  programId?: Prisma.StringFilter<"ProgramRegistration"> | string
  userId?: Prisma.StringFilter<"ProgramRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
  Program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}, "id">

export type ProgramRegistrationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProgramRegistrationCountOrderByAggregateInput
  _max?: Prisma.ProgramRegistrationMaxOrderByAggregateInput
  _min?: Prisma.ProgramRegistrationMinOrderByAggregateInput
}

export type ProgramRegistrationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProgramRegistrationScalarWhereWithAggregatesInput | Prisma.ProgramRegistrationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProgramRegistrationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProgramRegistrationScalarWhereWithAggregatesInput | Prisma.ProgramRegistrationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProgramRegistration"> | string
  programId?: Prisma.StringWithAggregatesFilter<"ProgramRegistration"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ProgramRegistration"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProgramRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProgramRegistration"> | Date | string
}

export type ProgramRegistrationCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  Program: Prisma.ProgramCreateNestedOneWithoutProgramRegistrationInput
  user: Prisma.userCreateNestedOneWithoutProgramRegistrationInput
}

export type ProgramRegistrationUncheckedCreateInput = {
  id: string
  programId: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Program?: Prisma.ProgramUpdateOneRequiredWithoutProgramRegistrationNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutProgramRegistrationNestedInput
}

export type ProgramRegistrationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationCreateManyInput = {
  id: string
  programId: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationListRelationFilter = {
  every?: Prisma.ProgramRegistrationWhereInput
  some?: Prisma.ProgramRegistrationWhereInput
  none?: Prisma.ProgramRegistrationWhereInput
}

export type ProgramRegistrationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProgramRegistrationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProgramRegistrationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProgramRegistrationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProgramRegistrationCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput> | Prisma.ProgramRegistrationCreateWithoutProgramInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput | Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyProgramInputEnvelope
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
}

export type ProgramRegistrationUncheckedCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput> | Prisma.ProgramRegistrationCreateWithoutProgramInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput | Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyProgramInputEnvelope
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
}

export type ProgramRegistrationUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput> | Prisma.ProgramRegistrationCreateWithoutProgramInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput | Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutProgramInput | Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyProgramInputEnvelope
  set?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  disconnect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  delete?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  update?: Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutProgramInput | Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.ProgramRegistrationUpdateManyWithWhereWithoutProgramInput | Prisma.ProgramRegistrationUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
}

export type ProgramRegistrationUncheckedUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput> | Prisma.ProgramRegistrationCreateWithoutProgramInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput | Prisma.ProgramRegistrationCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutProgramInput | Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyProgramInputEnvelope
  set?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  disconnect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  delete?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  update?: Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutProgramInput | Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.ProgramRegistrationUpdateManyWithWhereWithoutProgramInput | Prisma.ProgramRegistrationUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
}

export type ProgramRegistrationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput> | Prisma.ProgramRegistrationCreateWithoutUserInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput | Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyUserInputEnvelope
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
}

export type ProgramRegistrationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput> | Prisma.ProgramRegistrationCreateWithoutUserInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput | Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyUserInputEnvelope
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
}

export type ProgramRegistrationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput> | Prisma.ProgramRegistrationCreateWithoutUserInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput | Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutUserInput | Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyUserInputEnvelope
  set?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  disconnect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  delete?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  update?: Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutUserInput | Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProgramRegistrationUpdateManyWithWhereWithoutUserInput | Prisma.ProgramRegistrationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
}

export type ProgramRegistrationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput> | Prisma.ProgramRegistrationCreateWithoutUserInput[] | Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput | Prisma.ProgramRegistrationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutUserInput | Prisma.ProgramRegistrationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProgramRegistrationCreateManyUserInputEnvelope
  set?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  disconnect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  delete?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  connect?: Prisma.ProgramRegistrationWhereUniqueInput | Prisma.ProgramRegistrationWhereUniqueInput[]
  update?: Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutUserInput | Prisma.ProgramRegistrationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProgramRegistrationUpdateManyWithWhereWithoutUserInput | Prisma.ProgramRegistrationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
}

export type ProgramRegistrationCreateWithoutProgramInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  user: Prisma.userCreateNestedOneWithoutProgramRegistrationInput
}

export type ProgramRegistrationUncheckedCreateWithoutProgramInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationCreateOrConnectWithoutProgramInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  create: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput>
}

export type ProgramRegistrationCreateManyProgramInputEnvelope = {
  data: Prisma.ProgramRegistrationCreateManyProgramInput | Prisma.ProgramRegistrationCreateManyProgramInput[]
  skipDuplicates?: boolean
}

export type ProgramRegistrationUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  update: Prisma.XOR<Prisma.ProgramRegistrationUpdateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedUpdateWithoutProgramInput>
  create: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedCreateWithoutProgramInput>
}

export type ProgramRegistrationUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateWithoutProgramInput, Prisma.ProgramRegistrationUncheckedUpdateWithoutProgramInput>
}

export type ProgramRegistrationUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.ProgramRegistrationScalarWhereInput
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateManyMutationInput, Prisma.ProgramRegistrationUncheckedUpdateManyWithoutProgramInput>
}

export type ProgramRegistrationScalarWhereInput = {
  AND?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
  OR?: Prisma.ProgramRegistrationScalarWhereInput[]
  NOT?: Prisma.ProgramRegistrationScalarWhereInput | Prisma.ProgramRegistrationScalarWhereInput[]
  id?: Prisma.StringFilter<"ProgramRegistration"> | string
  programId?: Prisma.StringFilter<"ProgramRegistration"> | string
  userId?: Prisma.StringFilter<"ProgramRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProgramRegistration"> | Date | string
}

export type ProgramRegistrationCreateWithoutUserInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  Program: Prisma.ProgramCreateNestedOneWithoutProgramRegistrationInput
}

export type ProgramRegistrationUncheckedCreateWithoutUserInput = {
  id: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationCreateOrConnectWithoutUserInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  create: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput>
}

export type ProgramRegistrationCreateManyUserInputEnvelope = {
  data: Prisma.ProgramRegistrationCreateManyUserInput | Prisma.ProgramRegistrationCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProgramRegistrationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  update: Prisma.XOR<Prisma.ProgramRegistrationUpdateWithoutUserInput, Prisma.ProgramRegistrationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProgramRegistrationCreateWithoutUserInput, Prisma.ProgramRegistrationUncheckedCreateWithoutUserInput>
}

export type ProgramRegistrationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProgramRegistrationWhereUniqueInput
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateWithoutUserInput, Prisma.ProgramRegistrationUncheckedUpdateWithoutUserInput>
}

export type ProgramRegistrationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProgramRegistrationScalarWhereInput
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateManyMutationInput, Prisma.ProgramRegistrationUncheckedUpdateManyWithoutUserInput>
}

export type ProgramRegistrationCreateManyProgramInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.userUpdateOneRequiredWithoutProgramRegistrationNestedInput
}

export type ProgramRegistrationUncheckedUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationUncheckedUpdateManyWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationCreateManyUserInput = {
  id: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type ProgramRegistrationUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Program?: Prisma.ProgramUpdateOneRequiredWithoutProgramRegistrationNestedInput
}

export type ProgramRegistrationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProgramRegistrationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProgramRegistrationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  programId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["programRegistration"]>

export type ProgramRegistrationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  programId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["programRegistration"]>

export type ProgramRegistrationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  programId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["programRegistration"]>

export type ProgramRegistrationSelectScalar = {
  id?: boolean
  programId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProgramRegistrationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "programId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["programRegistration"]>
export type ProgramRegistrationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type ProgramRegistrationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type ProgramRegistrationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}

export type $ProgramRegistrationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProgramRegistration"
  objects: {
    Program: Prisma.$ProgramPayload<ExtArgs>
    user: Prisma.$userPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    programId: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["programRegistration"]>
  composites: {}
}

export type ProgramRegistrationGetPayload<S extends boolean | null | undefined | ProgramRegistrationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload, S>

export type ProgramRegistrationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProgramRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProgramRegistrationCountAggregateInputType | true
  }

export interface ProgramRegistrationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProgramRegistration'], meta: { name: 'ProgramRegistration' } }
  /**
   * Find zero or one ProgramRegistration that matches the filter.
   * @param {ProgramRegistrationFindUniqueArgs} args - Arguments to find a ProgramRegistration
   * @example
   * // Get one ProgramRegistration
   * const programRegistration = await prisma.programRegistration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProgramRegistrationFindUniqueArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProgramRegistration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProgramRegistrationFindUniqueOrThrowArgs} args - Arguments to find a ProgramRegistration
   * @example
   * // Get one ProgramRegistration
   * const programRegistration = await prisma.programRegistration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProgramRegistrationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProgramRegistration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationFindFirstArgs} args - Arguments to find a ProgramRegistration
   * @example
   * // Get one ProgramRegistration
   * const programRegistration = await prisma.programRegistration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProgramRegistrationFindFirstArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProgramRegistration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationFindFirstOrThrowArgs} args - Arguments to find a ProgramRegistration
   * @example
   * // Get one ProgramRegistration
   * const programRegistration = await prisma.programRegistration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProgramRegistrationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProgramRegistrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProgramRegistrations
   * const programRegistrations = await prisma.programRegistration.findMany()
   * 
   * // Get first 10 ProgramRegistrations
   * const programRegistrations = await prisma.programRegistration.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const programRegistrationWithIdOnly = await prisma.programRegistration.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProgramRegistrationFindManyArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProgramRegistration.
   * @param {ProgramRegistrationCreateArgs} args - Arguments to create a ProgramRegistration.
   * @example
   * // Create one ProgramRegistration
   * const ProgramRegistration = await prisma.programRegistration.create({
   *   data: {
   *     // ... data to create a ProgramRegistration
   *   }
   * })
   * 
   */
  create<T extends ProgramRegistrationCreateArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationCreateArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProgramRegistrations.
   * @param {ProgramRegistrationCreateManyArgs} args - Arguments to create many ProgramRegistrations.
   * @example
   * // Create many ProgramRegistrations
   * const programRegistration = await prisma.programRegistration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProgramRegistrationCreateManyArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProgramRegistrations and returns the data saved in the database.
   * @param {ProgramRegistrationCreateManyAndReturnArgs} args - Arguments to create many ProgramRegistrations.
   * @example
   * // Create many ProgramRegistrations
   * const programRegistration = await prisma.programRegistration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProgramRegistrations and only return the `id`
   * const programRegistrationWithIdOnly = await prisma.programRegistration.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProgramRegistrationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProgramRegistration.
   * @param {ProgramRegistrationDeleteArgs} args - Arguments to delete one ProgramRegistration.
   * @example
   * // Delete one ProgramRegistration
   * const ProgramRegistration = await prisma.programRegistration.delete({
   *   where: {
   *     // ... filter to delete one ProgramRegistration
   *   }
   * })
   * 
   */
  delete<T extends ProgramRegistrationDeleteArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationDeleteArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProgramRegistration.
   * @param {ProgramRegistrationUpdateArgs} args - Arguments to update one ProgramRegistration.
   * @example
   * // Update one ProgramRegistration
   * const programRegistration = await prisma.programRegistration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProgramRegistrationUpdateArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationUpdateArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProgramRegistrations.
   * @param {ProgramRegistrationDeleteManyArgs} args - Arguments to filter ProgramRegistrations to delete.
   * @example
   * // Delete a few ProgramRegistrations
   * const { count } = await prisma.programRegistration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProgramRegistrationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProgramRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProgramRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProgramRegistrations
   * const programRegistration = await prisma.programRegistration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProgramRegistrationUpdateManyArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProgramRegistrations and returns the data updated in the database.
   * @param {ProgramRegistrationUpdateManyAndReturnArgs} args - Arguments to update many ProgramRegistrations.
   * @example
   * // Update many ProgramRegistrations
   * const programRegistration = await prisma.programRegistration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProgramRegistrations and only return the `id`
   * const programRegistrationWithIdOnly = await prisma.programRegistration.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProgramRegistrationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProgramRegistration.
   * @param {ProgramRegistrationUpsertArgs} args - Arguments to update or create a ProgramRegistration.
   * @example
   * // Update or create a ProgramRegistration
   * const programRegistration = await prisma.programRegistration.upsert({
   *   create: {
   *     // ... data to create a ProgramRegistration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProgramRegistration we want to update
   *   }
   * })
   */
  upsert<T extends ProgramRegistrationUpsertArgs>(args: Prisma.SelectSubset<T, ProgramRegistrationUpsertArgs<ExtArgs>>): Prisma.Prisma__ProgramRegistrationClient<runtime.Types.Result.GetResult<Prisma.$ProgramRegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProgramRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationCountArgs} args - Arguments to filter ProgramRegistrations to count.
   * @example
   * // Count the number of ProgramRegistrations
   * const count = await prisma.programRegistration.count({
   *   where: {
   *     // ... the filter for the ProgramRegistrations we want to count
   *   }
   * })
  **/
  count<T extends ProgramRegistrationCountArgs>(
    args?: Prisma.Subset<T, ProgramRegistrationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProgramRegistrationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProgramRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProgramRegistrationAggregateArgs>(args: Prisma.Subset<T, ProgramRegistrationAggregateArgs>): Prisma.PrismaPromise<GetProgramRegistrationAggregateType<T>>

  /**
   * Group by ProgramRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProgramRegistrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProgramRegistrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProgramRegistrationGroupByArgs['orderBy'] }
      : { orderBy?: ProgramRegistrationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProgramRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProgramRegistration model
 */
readonly fields: ProgramRegistrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProgramRegistration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProgramRegistrationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Program<T extends Prisma.ProgramDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProgramDefaultArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.userDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.userDefaultArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProgramRegistration model
 */
export interface ProgramRegistrationFieldRefs {
  readonly id: Prisma.FieldRef<"ProgramRegistration", 'String'>
  readonly programId: Prisma.FieldRef<"ProgramRegistration", 'String'>
  readonly userId: Prisma.FieldRef<"ProgramRegistration", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProgramRegistration", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProgramRegistration", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProgramRegistration findUnique
 */
export type ProgramRegistrationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which ProgramRegistration to fetch.
   */
  where: Prisma.ProgramRegistrationWhereUniqueInput
}

/**
 * ProgramRegistration findUniqueOrThrow
 */
export type ProgramRegistrationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which ProgramRegistration to fetch.
   */
  where: Prisma.ProgramRegistrationWhereUniqueInput
}

/**
 * ProgramRegistration findFirst
 */
export type ProgramRegistrationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which ProgramRegistration to fetch.
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProgramRegistrations to fetch.
   */
  orderBy?: Prisma.ProgramRegistrationOrderByWithRelationInput | Prisma.ProgramRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProgramRegistrations.
   */
  cursor?: Prisma.ProgramRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProgramRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProgramRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProgramRegistrations.
   */
  distinct?: Prisma.ProgramRegistrationScalarFieldEnum | Prisma.ProgramRegistrationScalarFieldEnum[]
}

/**
 * ProgramRegistration findFirstOrThrow
 */
export type ProgramRegistrationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which ProgramRegistration to fetch.
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProgramRegistrations to fetch.
   */
  orderBy?: Prisma.ProgramRegistrationOrderByWithRelationInput | Prisma.ProgramRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProgramRegistrations.
   */
  cursor?: Prisma.ProgramRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProgramRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProgramRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProgramRegistrations.
   */
  distinct?: Prisma.ProgramRegistrationScalarFieldEnum | Prisma.ProgramRegistrationScalarFieldEnum[]
}

/**
 * ProgramRegistration findMany
 */
export type ProgramRegistrationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which ProgramRegistrations to fetch.
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProgramRegistrations to fetch.
   */
  orderBy?: Prisma.ProgramRegistrationOrderByWithRelationInput | Prisma.ProgramRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProgramRegistrations.
   */
  cursor?: Prisma.ProgramRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProgramRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProgramRegistrations.
   */
  skip?: number
  distinct?: Prisma.ProgramRegistrationScalarFieldEnum | Prisma.ProgramRegistrationScalarFieldEnum[]
}

/**
 * ProgramRegistration create
 */
export type ProgramRegistrationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to create a ProgramRegistration.
   */
  data: Prisma.XOR<Prisma.ProgramRegistrationCreateInput, Prisma.ProgramRegistrationUncheckedCreateInput>
}

/**
 * ProgramRegistration createMany
 */
export type ProgramRegistrationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProgramRegistrations.
   */
  data: Prisma.ProgramRegistrationCreateManyInput | Prisma.ProgramRegistrationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProgramRegistration createManyAndReturn
 */
export type ProgramRegistrationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * The data used to create many ProgramRegistrations.
   */
  data: Prisma.ProgramRegistrationCreateManyInput | Prisma.ProgramRegistrationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProgramRegistration update
 */
export type ProgramRegistrationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to update a ProgramRegistration.
   */
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateInput, Prisma.ProgramRegistrationUncheckedUpdateInput>
  /**
   * Choose, which ProgramRegistration to update.
   */
  where: Prisma.ProgramRegistrationWhereUniqueInput
}

/**
 * ProgramRegistration updateMany
 */
export type ProgramRegistrationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProgramRegistrations.
   */
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateManyMutationInput, Prisma.ProgramRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which ProgramRegistrations to update
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * Limit how many ProgramRegistrations to update.
   */
  limit?: number
}

/**
 * ProgramRegistration updateManyAndReturn
 */
export type ProgramRegistrationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * The data used to update ProgramRegistrations.
   */
  data: Prisma.XOR<Prisma.ProgramRegistrationUpdateManyMutationInput, Prisma.ProgramRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which ProgramRegistrations to update
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * Limit how many ProgramRegistrations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProgramRegistration upsert
 */
export type ProgramRegistrationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * The filter to search for the ProgramRegistration to update in case it exists.
   */
  where: Prisma.ProgramRegistrationWhereUniqueInput
  /**
   * In case the ProgramRegistration found by the `where` argument doesn't exist, create a new ProgramRegistration with this data.
   */
  create: Prisma.XOR<Prisma.ProgramRegistrationCreateInput, Prisma.ProgramRegistrationUncheckedCreateInput>
  /**
   * In case the ProgramRegistration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProgramRegistrationUpdateInput, Prisma.ProgramRegistrationUncheckedUpdateInput>
}

/**
 * ProgramRegistration delete
 */
export type ProgramRegistrationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
  /**
   * Filter which ProgramRegistration to delete.
   */
  where: Prisma.ProgramRegistrationWhereUniqueInput
}

/**
 * ProgramRegistration deleteMany
 */
export type ProgramRegistrationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProgramRegistrations to delete
   */
  where?: Prisma.ProgramRegistrationWhereInput
  /**
   * Limit how many ProgramRegistrations to delete.
   */
  limit?: number
}

/**
 * ProgramRegistration without action
 */
export type ProgramRegistrationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProgramRegistration
   */
  select?: Prisma.ProgramRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProgramRegistration
   */
  omit?: Prisma.ProgramRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramRegistrationInclude<ExtArgs> | null
}
