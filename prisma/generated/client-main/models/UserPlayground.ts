
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserPlayground` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserPlayground
 * 
 */
export type UserPlaygroundModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPlaygroundPayload>

export type AggregateUserPlayground = {
  _count: UserPlaygroundCountAggregateOutputType | null
  _avg: UserPlaygroundAvgAggregateOutputType | null
  _sum: UserPlaygroundSumAggregateOutputType | null
  _min: UserPlaygroundMinAggregateOutputType | null
  _max: UserPlaygroundMaxAggregateOutputType | null
}

export type UserPlaygroundAvgAggregateOutputType = {
  virtualPoint: number | null
}

export type UserPlaygroundSumAggregateOutputType = {
  virtualPoint: number | null
}

export type UserPlaygroundMinAggregateOutputType = {
  id: string | null
  userId: string | null
  username: string | null
  virtualPoint: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserPlaygroundMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  username: string | null
  virtualPoint: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserPlaygroundCountAggregateOutputType = {
  id: number
  userId: number
  username: number
  virtualPoint: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserPlaygroundAvgAggregateInputType = {
  virtualPoint?: true
}

export type UserPlaygroundSumAggregateInputType = {
  virtualPoint?: true
}

export type UserPlaygroundMinAggregateInputType = {
  id?: true
  userId?: true
  username?: true
  virtualPoint?: true
  createdAt?: true
  updatedAt?: true
}

export type UserPlaygroundMaxAggregateInputType = {
  id?: true
  userId?: true
  username?: true
  virtualPoint?: true
  createdAt?: true
  updatedAt?: true
}

export type UserPlaygroundCountAggregateInputType = {
  id?: true
  userId?: true
  username?: true
  virtualPoint?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserPlaygroundAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlayground to aggregate.
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygrounds to fetch.
   */
  orderBy?: Prisma.UserPlaygroundOrderByWithRelationInput | Prisma.UserPlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserPlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserPlaygrounds
  **/
  _count?: true | UserPlaygroundCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserPlaygroundAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserPlaygroundSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserPlaygroundMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserPlaygroundMaxAggregateInputType
}

export type GetUserPlaygroundAggregateType<T extends UserPlaygroundAggregateArgs> = {
      [P in keyof T & keyof AggregateUserPlayground]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPlayground[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPlayground[P]>
}




export type UserPlaygroundGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPlaygroundWhereInput
  orderBy?: Prisma.UserPlaygroundOrderByWithAggregationInput | Prisma.UserPlaygroundOrderByWithAggregationInput[]
  by: Prisma.UserPlaygroundScalarFieldEnum[] | Prisma.UserPlaygroundScalarFieldEnum
  having?: Prisma.UserPlaygroundScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserPlaygroundCountAggregateInputType | true
  _avg?: UserPlaygroundAvgAggregateInputType
  _sum?: UserPlaygroundSumAggregateInputType
  _min?: UserPlaygroundMinAggregateInputType
  _max?: UserPlaygroundMaxAggregateInputType
}

export type UserPlaygroundGroupByOutputType = {
  id: string
  userId: string
  username: string
  virtualPoint: number
  createdAt: Date
  updatedAt: Date
  _count: UserPlaygroundCountAggregateOutputType | null
  _avg: UserPlaygroundAvgAggregateOutputType | null
  _sum: UserPlaygroundSumAggregateOutputType | null
  _min: UserPlaygroundMinAggregateOutputType | null
  _max: UserPlaygroundMaxAggregateOutputType | null
}

type GetUserPlaygroundGroupByPayload<T extends UserPlaygroundGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserPlaygroundGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserPlaygroundGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserPlaygroundGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserPlaygroundGroupByOutputType[P]>
      }
    >
  > 



export type UserPlaygroundWhereInput = {
  AND?: Prisma.UserPlaygroundWhereInput | Prisma.UserPlaygroundWhereInput[]
  OR?: Prisma.UserPlaygroundWhereInput[]
  NOT?: Prisma.UserPlaygroundWhereInput | Prisma.UserPlaygroundWhereInput[]
  id?: Prisma.StringFilter<"UserPlayground"> | string
  userId?: Prisma.StringFilter<"UserPlayground"> | string
  username?: Prisma.StringFilter<"UserPlayground"> | string
  virtualPoint?: Prisma.IntFilter<"UserPlayground"> | number
  createdAt?: Prisma.DateTimeFilter<"UserPlayground"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlayground"> | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryListRelationFilter
  AdWatchSession?: Prisma.AdWatchSessionListRelationFilter
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryListRelationFilter
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryListRelationFilter
  PlaygroundToken?: Prisma.PlaygroundTokenListRelationFilter
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
  UserPlaygroundDetention?: Prisma.XOR<Prisma.UserPlaygroundDetentionNullableScalarRelationFilter, Prisma.UserPlaygroundDetentionWhereInput> | null
}

export type UserPlaygroundOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  virtualPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  AdWatchHistory?: Prisma.AdWatchHistoryOrderByRelationAggregateInput
  AdWatchSession?: Prisma.AdWatchSessionOrderByRelationAggregateInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryOrderByRelationAggregateInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryOrderByRelationAggregateInput
  PlaygroundToken?: Prisma.PlaygroundTokenOrderByRelationAggregateInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryOrderByRelationAggregateInput
  user?: Prisma.userOrderByWithRelationInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionOrderByWithRelationInput
}

export type UserPlaygroundWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.UserPlaygroundWhereInput | Prisma.UserPlaygroundWhereInput[]
  OR?: Prisma.UserPlaygroundWhereInput[]
  NOT?: Prisma.UserPlaygroundWhereInput | Prisma.UserPlaygroundWhereInput[]
  username?: Prisma.StringFilter<"UserPlayground"> | string
  virtualPoint?: Prisma.IntFilter<"UserPlayground"> | number
  createdAt?: Prisma.DateTimeFilter<"UserPlayground"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlayground"> | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryListRelationFilter
  AdWatchSession?: Prisma.AdWatchSessionListRelationFilter
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryListRelationFilter
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryListRelationFilter
  PlaygroundToken?: Prisma.PlaygroundTokenListRelationFilter
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
  UserPlaygroundDetention?: Prisma.XOR<Prisma.UserPlaygroundDetentionNullableScalarRelationFilter, Prisma.UserPlaygroundDetentionWhereInput> | null
}, "id" | "userId">

export type UserPlaygroundOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  virtualPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserPlaygroundCountOrderByAggregateInput
  _avg?: Prisma.UserPlaygroundAvgOrderByAggregateInput
  _max?: Prisma.UserPlaygroundMaxOrderByAggregateInput
  _min?: Prisma.UserPlaygroundMinOrderByAggregateInput
  _sum?: Prisma.UserPlaygroundSumOrderByAggregateInput
}

export type UserPlaygroundScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserPlaygroundScalarWhereWithAggregatesInput | Prisma.UserPlaygroundScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserPlaygroundScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserPlaygroundScalarWhereWithAggregatesInput | Prisma.UserPlaygroundScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserPlayground"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserPlayground"> | string
  username?: Prisma.StringWithAggregatesFilter<"UserPlayground"> | string
  virtualPoint?: Prisma.IntWithAggregatesFilter<"UserPlayground"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlayground"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlayground"> | Date | string
}

export type UserPlaygroundCreateInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateManyInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type UserPlaygroundUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserPlaygroundUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserPlaygroundScalarRelationFilter = {
  is?: Prisma.UserPlaygroundWhereInput
  isNot?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  virtualPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserPlaygroundAvgOrderByAggregateInput = {
  virtualPoint?: Prisma.SortOrder
}

export type UserPlaygroundMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  virtualPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserPlaygroundMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  virtualPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserPlaygroundSumOrderByAggregateInput = {
  virtualPoint?: Prisma.SortOrder
}

export type UserPlaygroundNullableScalarRelationFilter = {
  is?: Prisma.UserPlaygroundWhereInput | null
  isNot?: Prisma.UserPlaygroundWhereInput | null
}

export type UserPlaygroundCreateNestedOneWithoutAdWatchHistoryInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutAdWatchHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutAdWatchHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutAdWatchHistoryInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutAdWatchHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUpdateWithoutAdWatchHistoryInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchHistoryInput>
}

export type UserPlaygroundCreateNestedOneWithoutAdWatchSessionInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchSessionInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutAdWatchSessionInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutAdWatchSessionNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchSessionInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutAdWatchSessionInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutAdWatchSessionInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutAdWatchSessionInput, Prisma.UserPlaygroundUpdateWithoutAdWatchSessionInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchSessionInput>
}

export type UserPlaygroundCreateNestedOneWithoutPlaygroundExpenseHistoryInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundExpenseHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundExpenseHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutPlaygroundExpenseHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundExpenseHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundExpenseHistoryInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutPlaygroundExpenseHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUpdateWithoutPlaygroundExpenseHistoryInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundExpenseHistoryInput>
}

export type UserPlaygroundCreateNestedOneWithoutPlaygroundRewardHistoryInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundRewardHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundRewardHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutPlaygroundRewardHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundRewardHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundRewardHistoryInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutPlaygroundRewardHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUpdateWithoutPlaygroundRewardHistoryInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundRewardHistoryInput>
}

export type UserPlaygroundCreateNestedOneWithoutPlaygroundTokenInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundTokenInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundTokenInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutPlaygroundTokenNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundTokenInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutPlaygroundTokenInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutPlaygroundTokenInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUpdateWithoutPlaygroundTokenInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundTokenInput>
}

export type UserPlaygroundCreateNestedOneWithoutUserPlayGameHistoryInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlayGameHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserPlayGameHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlayGameHistoryInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserPlayGameHistoryInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutUserPlayGameHistoryInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUpdateWithoutUserPlayGameHistoryInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlayGameHistoryInput>
}

export type UserPlaygroundCreateNestedOneWithoutUserPlaygroundDetentionInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlaygroundDetentionInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserPlaygroundDetentionInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneRequiredWithoutUserPlaygroundDetentionNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlaygroundDetentionInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserPlaygroundDetentionInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutUserPlaygroundDetentionInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUpdateWithoutUserPlaygroundDetentionInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlaygroundDetentionInput>
}

export type UserPlaygroundCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserInput
  connect?: Prisma.UserPlaygroundWhereUniqueInput
}

export type UserPlaygroundUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutUserInput
  disconnect?: Prisma.UserPlaygroundWhereInput | boolean
  delete?: Prisma.UserPlaygroundWhereInput | boolean
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutUserInput, Prisma.UserPlaygroundUpdateWithoutUserInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutUserInput>
}

export type UserPlaygroundUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserPlaygroundCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserPlaygroundUpsertWithoutUserInput
  disconnect?: Prisma.UserPlaygroundWhereInput | boolean
  delete?: Prisma.UserPlaygroundWhereInput | boolean
  connect?: Prisma.UserPlaygroundWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundUpdateToOneWithWhereWithoutUserInput, Prisma.UserPlaygroundUpdateWithoutUserInput>, Prisma.UserPlaygroundUncheckedUpdateWithoutUserInput>
}

export type UserPlaygroundCreateWithoutAdWatchHistoryInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutAdWatchHistoryInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutAdWatchHistoryInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchHistoryInput>
}

export type UserPlaygroundUpsertWithoutAdWatchHistoryInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchHistoryInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchHistoryInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutAdWatchHistoryInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutAdWatchHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchHistoryInput>
}

export type UserPlaygroundUpdateWithoutAdWatchHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutAdWatchHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutAdWatchSessionInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutAdWatchSessionInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutAdWatchSessionInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchSessionInput>
}

export type UserPlaygroundUpsertWithoutAdWatchSessionInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchSessionInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedCreateWithoutAdWatchSessionInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutAdWatchSessionInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutAdWatchSessionInput, Prisma.UserPlaygroundUncheckedUpdateWithoutAdWatchSessionInput>
}

export type UserPlaygroundUpdateWithoutAdWatchSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutAdWatchSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutPlaygroundExpenseHistoryInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutPlaygroundExpenseHistoryInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutPlaygroundExpenseHistoryInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundExpenseHistoryInput>
}

export type UserPlaygroundUpsertWithoutPlaygroundExpenseHistoryInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundExpenseHistoryInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundExpenseHistoryInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundExpenseHistoryInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundExpenseHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundExpenseHistoryInput>
}

export type UserPlaygroundUpdateWithoutPlaygroundExpenseHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutPlaygroundExpenseHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutPlaygroundRewardHistoryInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutPlaygroundRewardHistoryInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutPlaygroundRewardHistoryInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundRewardHistoryInput>
}

export type UserPlaygroundUpsertWithoutPlaygroundRewardHistoryInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundRewardHistoryInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundRewardHistoryInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundRewardHistoryInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundRewardHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundRewardHistoryInput>
}

export type UserPlaygroundUpdateWithoutPlaygroundRewardHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutPlaygroundRewardHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutPlaygroundTokenInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutPlaygroundTokenInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutPlaygroundTokenInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundTokenInput>
}

export type UserPlaygroundUpsertWithoutPlaygroundTokenInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundTokenInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedCreateWithoutPlaygroundTokenInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutPlaygroundTokenInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutPlaygroundTokenInput, Prisma.UserPlaygroundUncheckedUpdateWithoutPlaygroundTokenInput>
}

export type UserPlaygroundUpdateWithoutPlaygroundTokenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutPlaygroundTokenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutUserPlayGameHistoryInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutUserPlayGameHistoryInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutUserPlayGameHistoryInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlayGameHistoryInput>
}

export type UserPlaygroundUpsertWithoutUserPlayGameHistoryInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlayGameHistoryInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlayGameHistoryInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutUserPlayGameHistoryInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserPlayGameHistoryInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlayGameHistoryInput>
}

export type UserPlaygroundUpdateWithoutUserPlayGameHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutUserPlayGameHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutUserPlaygroundDetentionInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  user: Prisma.userCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutUserPlaygroundDetentionInput = {
  id: string
  userId: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutUserPlaygroundDetentionInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlaygroundDetentionInput>
}

export type UserPlaygroundUpsertWithoutUserPlaygroundDetentionInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlaygroundDetentionInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserPlaygroundDetentionInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutUserPlaygroundDetentionInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserPlaygroundDetentionInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserPlaygroundDetentionInput>
}

export type UserPlaygroundUpdateWithoutUserPlaygroundDetentionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutUserPlaygroundDetentionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundCreateWithoutUserInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundUncheckedCreateWithoutUserInput = {
  id: string
  username: string
  virtualPoint?: number
  createdAt?: Date | string
  updatedAt: Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput
}

export type UserPlaygroundCreateOrConnectWithoutUserInput = {
  where: Prisma.UserPlaygroundWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
}

export type UserPlaygroundUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserPlaygroundCreateWithoutUserInput, Prisma.UserPlaygroundUncheckedCreateWithoutUserInput>
  where?: Prisma.UserPlaygroundWhereInput
}

export type UserPlaygroundUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserPlaygroundWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateWithoutUserInput, Prisma.UserPlaygroundUncheckedUpdateWithoutUserInput>
}

export type UserPlaygroundUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput
}

export type UserPlaygroundUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  virtualPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  AdWatchHistory?: Prisma.AdWatchHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  AdWatchSession?: Prisma.AdWatchSessionUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundExpenseHistory?: Prisma.PlaygroundExpenseHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundRewardHistory?: Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput
  UserPlaygroundDetention?: Prisma.UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput
}


/**
 * Count Type UserPlaygroundCountOutputType
 */

export type UserPlaygroundCountOutputType = {
  AdWatchHistory: number
  AdWatchSession: number
  PlaygroundExpenseHistory: number
  PlaygroundRewardHistory: number
  PlaygroundToken: number
  UserPlayGameHistory: number
}

export type UserPlaygroundCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  AdWatchHistory?: boolean | UserPlaygroundCountOutputTypeCountAdWatchHistoryArgs
  AdWatchSession?: boolean | UserPlaygroundCountOutputTypeCountAdWatchSessionArgs
  PlaygroundExpenseHistory?: boolean | UserPlaygroundCountOutputTypeCountPlaygroundExpenseHistoryArgs
  PlaygroundRewardHistory?: boolean | UserPlaygroundCountOutputTypeCountPlaygroundRewardHistoryArgs
  PlaygroundToken?: boolean | UserPlaygroundCountOutputTypeCountPlaygroundTokenArgs
  UserPlayGameHistory?: boolean | UserPlaygroundCountOutputTypeCountUserPlayGameHistoryArgs
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundCountOutputType
   */
  select?: Prisma.UserPlaygroundCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountAdWatchHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchHistoryWhereInput
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountAdWatchSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWatchSessionWhereInput
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountPlaygroundExpenseHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountPlaygroundRewardHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundRewardHistoryWhereInput
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountPlaygroundTokenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundTokenWhereInput
}

/**
 * UserPlaygroundCountOutputType without action
 */
export type UserPlaygroundCountOutputTypeCountUserPlayGameHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPlayGameHistoryWhereInput
}


export type UserPlaygroundSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  username?: boolean
  virtualPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  AdWatchHistory?: boolean | Prisma.UserPlayground$AdWatchHistoryArgs<ExtArgs>
  AdWatchSession?: boolean | Prisma.UserPlayground$AdWatchSessionArgs<ExtArgs>
  PlaygroundExpenseHistory?: boolean | Prisma.UserPlayground$PlaygroundExpenseHistoryArgs<ExtArgs>
  PlaygroundRewardHistory?: boolean | Prisma.UserPlayground$PlaygroundRewardHistoryArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.UserPlayground$PlaygroundTokenArgs<ExtArgs>
  UserPlayGameHistory?: boolean | Prisma.UserPlayground$UserPlayGameHistoryArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
  UserPlaygroundDetention?: boolean | Prisma.UserPlayground$UserPlaygroundDetentionArgs<ExtArgs>
  _count?: boolean | Prisma.UserPlaygroundCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayground"]>

export type UserPlaygroundSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  username?: boolean
  virtualPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayground"]>

export type UserPlaygroundSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  username?: boolean
  virtualPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayground"]>

export type UserPlaygroundSelectScalar = {
  id?: boolean
  userId?: boolean
  username?: boolean
  virtualPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserPlaygroundOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "username" | "virtualPoint" | "createdAt" | "updatedAt", ExtArgs["result"]["userPlayground"]>
export type UserPlaygroundInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  AdWatchHistory?: boolean | Prisma.UserPlayground$AdWatchHistoryArgs<ExtArgs>
  AdWatchSession?: boolean | Prisma.UserPlayground$AdWatchSessionArgs<ExtArgs>
  PlaygroundExpenseHistory?: boolean | Prisma.UserPlayground$PlaygroundExpenseHistoryArgs<ExtArgs>
  PlaygroundRewardHistory?: boolean | Prisma.UserPlayground$PlaygroundRewardHistoryArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.UserPlayground$PlaygroundTokenArgs<ExtArgs>
  UserPlayGameHistory?: boolean | Prisma.UserPlayground$UserPlayGameHistoryArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
  UserPlaygroundDetention?: boolean | Prisma.UserPlayground$UserPlaygroundDetentionArgs<ExtArgs>
  _count?: boolean | Prisma.UserPlaygroundCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserPlaygroundIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type UserPlaygroundIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}

export type $UserPlaygroundPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserPlayground"
  objects: {
    AdWatchHistory: Prisma.$AdWatchHistoryPayload<ExtArgs>[]
    AdWatchSession: Prisma.$AdWatchSessionPayload<ExtArgs>[]
    PlaygroundExpenseHistory: Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>[]
    PlaygroundRewardHistory: Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>[]
    PlaygroundToken: Prisma.$PlaygroundTokenPayload<ExtArgs>[]
    UserPlayGameHistory: Prisma.$UserPlayGameHistoryPayload<ExtArgs>[]
    user: Prisma.$userPayload<ExtArgs>
    UserPlaygroundDetention: Prisma.$UserPlaygroundDetentionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    username: string
    virtualPoint: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userPlayground"]>
  composites: {}
}

export type UserPlaygroundGetPayload<S extends boolean | null | undefined | UserPlaygroundDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload, S>

export type UserPlaygroundCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserPlaygroundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserPlaygroundCountAggregateInputType | true
  }

export interface UserPlaygroundDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPlayground'], meta: { name: 'UserPlayground' } }
  /**
   * Find zero or one UserPlayground that matches the filter.
   * @param {UserPlaygroundFindUniqueArgs} args - Arguments to find a UserPlayground
   * @example
   * // Get one UserPlayground
   * const userPlayground = await prisma.userPlayground.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPlaygroundFindUniqueArgs>(args: Prisma.SelectSubset<T, UserPlaygroundFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserPlayground that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPlaygroundFindUniqueOrThrowArgs} args - Arguments to find a UserPlayground
   * @example
   * // Get one UserPlayground
   * const userPlayground = await prisma.userPlayground.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPlaygroundFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserPlaygroundFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlayground that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundFindFirstArgs} args - Arguments to find a UserPlayground
   * @example
   * // Get one UserPlayground
   * const userPlayground = await prisma.userPlayground.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPlaygroundFindFirstArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlayground that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundFindFirstOrThrowArgs} args - Arguments to find a UserPlayground
   * @example
   * // Get one UserPlayground
   * const userPlayground = await prisma.userPlayground.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPlaygroundFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserPlaygrounds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPlaygrounds
   * const userPlaygrounds = await prisma.userPlayground.findMany()
   * 
   * // Get first 10 UserPlaygrounds
   * const userPlaygrounds = await prisma.userPlayground.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userPlaygroundWithIdOnly = await prisma.userPlayground.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserPlaygroundFindManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserPlayground.
   * @param {UserPlaygroundCreateArgs} args - Arguments to create a UserPlayground.
   * @example
   * // Create one UserPlayground
   * const UserPlayground = await prisma.userPlayground.create({
   *   data: {
   *     // ... data to create a UserPlayground
   *   }
   * })
   * 
   */
  create<T extends UserPlaygroundCreateArgs>(args: Prisma.SelectSubset<T, UserPlaygroundCreateArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserPlaygrounds.
   * @param {UserPlaygroundCreateManyArgs} args - Arguments to create many UserPlaygrounds.
   * @example
   * // Create many UserPlaygrounds
   * const userPlayground = await prisma.userPlayground.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserPlaygroundCreateManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserPlaygrounds and returns the data saved in the database.
   * @param {UserPlaygroundCreateManyAndReturnArgs} args - Arguments to create many UserPlaygrounds.
   * @example
   * // Create many UserPlaygrounds
   * const userPlayground = await prisma.userPlayground.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserPlaygrounds and only return the `id`
   * const userPlaygroundWithIdOnly = await prisma.userPlayground.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserPlaygroundCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserPlayground.
   * @param {UserPlaygroundDeleteArgs} args - Arguments to delete one UserPlayground.
   * @example
   * // Delete one UserPlayground
   * const UserPlayground = await prisma.userPlayground.delete({
   *   where: {
   *     // ... filter to delete one UserPlayground
   *   }
   * })
   * 
   */
  delete<T extends UserPlaygroundDeleteArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDeleteArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserPlayground.
   * @param {UserPlaygroundUpdateArgs} args - Arguments to update one UserPlayground.
   * @example
   * // Update one UserPlayground
   * const userPlayground = await prisma.userPlayground.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserPlaygroundUpdateArgs>(args: Prisma.SelectSubset<T, UserPlaygroundUpdateArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserPlaygrounds.
   * @param {UserPlaygroundDeleteManyArgs} args - Arguments to filter UserPlaygrounds to delete.
   * @example
   * // Delete a few UserPlaygrounds
   * const { count } = await prisma.userPlayground.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserPlaygroundDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlaygrounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPlaygrounds
   * const userPlayground = await prisma.userPlayground.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserPlaygroundUpdateManyArgs>(args: Prisma.SelectSubset<T, UserPlaygroundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlaygrounds and returns the data updated in the database.
   * @param {UserPlaygroundUpdateManyAndReturnArgs} args - Arguments to update many UserPlaygrounds.
   * @example
   * // Update many UserPlaygrounds
   * const userPlayground = await prisma.userPlayground.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserPlaygrounds and only return the `id`
   * const userPlaygroundWithIdOnly = await prisma.userPlayground.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserPlaygroundUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserPlaygroundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserPlayground.
   * @param {UserPlaygroundUpsertArgs} args - Arguments to update or create a UserPlayground.
   * @example
   * // Update or create a UserPlayground
   * const userPlayground = await prisma.userPlayground.upsert({
   *   create: {
   *     // ... data to create a UserPlayground
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPlayground we want to update
   *   }
   * })
   */
  upsert<T extends UserPlaygroundUpsertArgs>(args: Prisma.SelectSubset<T, UserPlaygroundUpsertArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserPlaygrounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundCountArgs} args - Arguments to filter UserPlaygrounds to count.
   * @example
   * // Count the number of UserPlaygrounds
   * const count = await prisma.userPlayground.count({
   *   where: {
   *     // ... the filter for the UserPlaygrounds we want to count
   *   }
   * })
  **/
  count<T extends UserPlaygroundCountArgs>(
    args?: Prisma.Subset<T, UserPlaygroundCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserPlaygroundCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserPlayground.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserPlaygroundAggregateArgs>(args: Prisma.Subset<T, UserPlaygroundAggregateArgs>): Prisma.PrismaPromise<GetUserPlaygroundAggregateType<T>>

  /**
   * Group by UserPlayground.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserPlaygroundGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPlaygroundGroupByArgs['orderBy'] }
      : { orderBy?: UserPlaygroundGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserPlaygroundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPlaygroundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserPlayground model
 */
readonly fields: UserPlaygroundFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPlayground.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPlaygroundClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  AdWatchHistory<T extends Prisma.UserPlayground$AdWatchHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$AdWatchHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  AdWatchSession<T extends Prisma.UserPlayground$AdWatchSessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$AdWatchSessionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdWatchSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  PlaygroundExpenseHistory<T extends Prisma.UserPlayground$PlaygroundExpenseHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$PlaygroundExpenseHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundExpenseHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  PlaygroundRewardHistory<T extends Prisma.UserPlayground$PlaygroundRewardHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$PlaygroundRewardHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  PlaygroundToken<T extends Prisma.UserPlayground$PlaygroundTokenArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$PlaygroundTokenArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  UserPlayGameHistory<T extends Prisma.UserPlayground$UserPlayGameHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$UserPlayGameHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.userDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.userDefaultArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserPlaygroundDetention<T extends Prisma.UserPlayground$UserPlaygroundDetentionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlayground$UserPlaygroundDetentionArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserPlayground model
 */
export interface UserPlaygroundFieldRefs {
  readonly id: Prisma.FieldRef<"UserPlayground", 'String'>
  readonly userId: Prisma.FieldRef<"UserPlayground", 'String'>
  readonly username: Prisma.FieldRef<"UserPlayground", 'String'>
  readonly virtualPoint: Prisma.FieldRef<"UserPlayground", 'Int'>
  readonly createdAt: Prisma.FieldRef<"UserPlayground", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserPlayground", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserPlayground findUnique
 */
export type UserPlaygroundFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayground to fetch.
   */
  where: Prisma.UserPlaygroundWhereUniqueInput
}

/**
 * UserPlayground findUniqueOrThrow
 */
export type UserPlaygroundFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayground to fetch.
   */
  where: Prisma.UserPlaygroundWhereUniqueInput
}

/**
 * UserPlayground findFirst
 */
export type UserPlaygroundFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayground to fetch.
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygrounds to fetch.
   */
  orderBy?: Prisma.UserPlaygroundOrderByWithRelationInput | Prisma.UserPlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlaygrounds.
   */
  cursor?: Prisma.UserPlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlaygrounds.
   */
  distinct?: Prisma.UserPlaygroundScalarFieldEnum | Prisma.UserPlaygroundScalarFieldEnum[]
}

/**
 * UserPlayground findFirstOrThrow
 */
export type UserPlaygroundFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayground to fetch.
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygrounds to fetch.
   */
  orderBy?: Prisma.UserPlaygroundOrderByWithRelationInput | Prisma.UserPlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlaygrounds.
   */
  cursor?: Prisma.UserPlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygrounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlaygrounds.
   */
  distinct?: Prisma.UserPlaygroundScalarFieldEnum | Prisma.UserPlaygroundScalarFieldEnum[]
}

/**
 * UserPlayground findMany
 */
export type UserPlaygroundFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygrounds to fetch.
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygrounds to fetch.
   */
  orderBy?: Prisma.UserPlaygroundOrderByWithRelationInput | Prisma.UserPlaygroundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserPlaygrounds.
   */
  cursor?: Prisma.UserPlaygroundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygrounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygrounds.
   */
  skip?: number
  distinct?: Prisma.UserPlaygroundScalarFieldEnum | Prisma.UserPlaygroundScalarFieldEnum[]
}

/**
 * UserPlayground create
 */
export type UserPlaygroundCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * The data needed to create a UserPlayground.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundCreateInput, Prisma.UserPlaygroundUncheckedCreateInput>
}

/**
 * UserPlayground createMany
 */
export type UserPlaygroundCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserPlaygrounds.
   */
  data: Prisma.UserPlaygroundCreateManyInput | Prisma.UserPlaygroundCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserPlayground createManyAndReturn
 */
export type UserPlaygroundCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * The data used to create many UserPlaygrounds.
   */
  data: Prisma.UserPlaygroundCreateManyInput | Prisma.UserPlaygroundCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlayground update
 */
export type UserPlaygroundUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * The data needed to update a UserPlayground.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateInput, Prisma.UserPlaygroundUncheckedUpdateInput>
  /**
   * Choose, which UserPlayground to update.
   */
  where: Prisma.UserPlaygroundWhereUniqueInput
}

/**
 * UserPlayground updateMany
 */
export type UserPlaygroundUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserPlaygrounds.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateManyMutationInput, Prisma.UserPlaygroundUncheckedUpdateManyInput>
  /**
   * Filter which UserPlaygrounds to update
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * Limit how many UserPlaygrounds to update.
   */
  limit?: number
}

/**
 * UserPlayground updateManyAndReturn
 */
export type UserPlaygroundUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * The data used to update UserPlaygrounds.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundUpdateManyMutationInput, Prisma.UserPlaygroundUncheckedUpdateManyInput>
  /**
   * Filter which UserPlaygrounds to update
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * Limit how many UserPlaygrounds to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlayground upsert
 */
export type UserPlaygroundUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * The filter to search for the UserPlayground to update in case it exists.
   */
  where: Prisma.UserPlaygroundWhereUniqueInput
  /**
   * In case the UserPlayground found by the `where` argument doesn't exist, create a new UserPlayground with this data.
   */
  create: Prisma.XOR<Prisma.UserPlaygroundCreateInput, Prisma.UserPlaygroundUncheckedCreateInput>
  /**
   * In case the UserPlayground was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserPlaygroundUpdateInput, Prisma.UserPlaygroundUncheckedUpdateInput>
}

/**
 * UserPlayground delete
 */
export type UserPlaygroundDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
  /**
   * Filter which UserPlayground to delete.
   */
  where: Prisma.UserPlaygroundWhereUniqueInput
}

/**
 * UserPlayground deleteMany
 */
export type UserPlaygroundDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlaygrounds to delete
   */
  where?: Prisma.UserPlaygroundWhereInput
  /**
   * Limit how many UserPlaygrounds to delete.
   */
  limit?: number
}

/**
 * UserPlayground.AdWatchHistory
 */
export type UserPlayground$AdWatchHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchHistory
   */
  select?: Prisma.AdWatchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchHistory
   */
  omit?: Prisma.AdWatchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchHistoryInclude<ExtArgs> | null
  where?: Prisma.AdWatchHistoryWhereInput
  orderBy?: Prisma.AdWatchHistoryOrderByWithRelationInput | Prisma.AdWatchHistoryOrderByWithRelationInput[]
  cursor?: Prisma.AdWatchHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AdWatchHistoryScalarFieldEnum | Prisma.AdWatchHistoryScalarFieldEnum[]
}

/**
 * UserPlayground.AdWatchSession
 */
export type UserPlayground$AdWatchSessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdWatchSession
   */
  select?: Prisma.AdWatchSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdWatchSession
   */
  omit?: Prisma.AdWatchSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdWatchSessionInclude<ExtArgs> | null
  where?: Prisma.AdWatchSessionWhereInput
  orderBy?: Prisma.AdWatchSessionOrderByWithRelationInput | Prisma.AdWatchSessionOrderByWithRelationInput[]
  cursor?: Prisma.AdWatchSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AdWatchSessionScalarFieldEnum | Prisma.AdWatchSessionScalarFieldEnum[]
}

/**
 * UserPlayground.PlaygroundExpenseHistory
 */
export type UserPlayground$PlaygroundExpenseHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundExpenseHistory
   */
  select?: Prisma.PlaygroundExpenseHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundExpenseHistory
   */
  omit?: Prisma.PlaygroundExpenseHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundExpenseHistoryInclude<ExtArgs> | null
  where?: Prisma.PlaygroundExpenseHistoryWhereInput
  orderBy?: Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput | Prisma.PlaygroundExpenseHistoryOrderByWithRelationInput[]
  cursor?: Prisma.PlaygroundExpenseHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlaygroundExpenseHistoryScalarFieldEnum | Prisma.PlaygroundExpenseHistoryScalarFieldEnum[]
}

/**
 * UserPlayground.PlaygroundRewardHistory
 */
export type UserPlayground$PlaygroundRewardHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithRelationInput | Prisma.PlaygroundRewardHistoryOrderByWithRelationInput[]
  cursor?: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlaygroundRewardHistoryScalarFieldEnum | Prisma.PlaygroundRewardHistoryScalarFieldEnum[]
}

/**
 * UserPlayground.PlaygroundToken
 */
export type UserPlayground$PlaygroundTokenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  where?: Prisma.PlaygroundTokenWhereInput
  orderBy?: Prisma.PlaygroundTokenOrderByWithRelationInput | Prisma.PlaygroundTokenOrderByWithRelationInput[]
  cursor?: Prisma.PlaygroundTokenWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PlaygroundTokenScalarFieldEnum | Prisma.PlaygroundTokenScalarFieldEnum[]
}

/**
 * UserPlayground.UserPlayGameHistory
 */
export type UserPlayground$UserPlayGameHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  where?: Prisma.UserPlayGameHistoryWhereInput
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserPlayGameHistoryScalarFieldEnum | Prisma.UserPlayGameHistoryScalarFieldEnum[]
}

/**
 * UserPlayground.UserPlaygroundDetention
 */
export type UserPlayground$UserPlaygroundDetentionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  where?: Prisma.UserPlaygroundDetentionWhereInput
}

/**
 * UserPlayground without action
 */
export type UserPlaygroundDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayground
   */
  select?: Prisma.UserPlaygroundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayground
   */
  omit?: Prisma.UserPlaygroundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundInclude<ExtArgs> | null
}
