
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PlaygroundRewardHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlaygroundRewardHistory
 * 
 */
export type PlaygroundRewardHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$PlaygroundRewardHistoryPayload>

export type AggregatePlaygroundRewardHistory = {
  _count: PlaygroundRewardHistoryCountAggregateOutputType | null
  _avg: PlaygroundRewardHistoryAvgAggregateOutputType | null
  _sum: PlaygroundRewardHistorySumAggregateOutputType | null
  _min: PlaygroundRewardHistoryMinAggregateOutputType | null
  _max: PlaygroundRewardHistoryMaxAggregateOutputType | null
}

export type PlaygroundRewardHistoryAvgAggregateOutputType = {
  amount: number | null
}

export type PlaygroundRewardHistorySumAggregateOutputType = {
  amount: number | null
}

export type PlaygroundRewardHistoryMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  rewardType: $Enums.RewardType | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaygroundRewardHistoryMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  rewardType: $Enums.RewardType | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlaygroundRewardHistoryCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  description: number
  rewardType: number
  amount: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlaygroundRewardHistoryAvgAggregateInputType = {
  amount?: true
}

export type PlaygroundRewardHistorySumAggregateInputType = {
  amount?: true
}

export type PlaygroundRewardHistoryMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  rewardType?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaygroundRewardHistoryMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  rewardType?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type PlaygroundRewardHistoryCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  rewardType?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlaygroundRewardHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundRewardHistory to aggregate.
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundRewardHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithRelationInput | Prisma.PlaygroundRewardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundRewardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundRewardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlaygroundRewardHistories
  **/
  _count?: true | PlaygroundRewardHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlaygroundRewardHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlaygroundRewardHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlaygroundRewardHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlaygroundRewardHistoryMaxAggregateInputType
}

export type GetPlaygroundRewardHistoryAggregateType<T extends PlaygroundRewardHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregatePlaygroundRewardHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlaygroundRewardHistory[P]>
    : Prisma.GetScalarType<T[P], AggregatePlaygroundRewardHistory[P]>
}




export type PlaygroundRewardHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithAggregationInput | Prisma.PlaygroundRewardHistoryOrderByWithAggregationInput[]
  by: Prisma.PlaygroundRewardHistoryScalarFieldEnum[] | Prisma.PlaygroundRewardHistoryScalarFieldEnum
  having?: Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlaygroundRewardHistoryCountAggregateInputType | true
  _avg?: PlaygroundRewardHistoryAvgAggregateInputType
  _sum?: PlaygroundRewardHistorySumAggregateInputType
  _min?: PlaygroundRewardHistoryMinAggregateInputType
  _max?: PlaygroundRewardHistoryMaxAggregateInputType
}

export type PlaygroundRewardHistoryGroupByOutputType = {
  id: string
  userPlaygroundId: string
  description: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt: Date
  updatedAt: Date
  _count: PlaygroundRewardHistoryCountAggregateOutputType | null
  _avg: PlaygroundRewardHistoryAvgAggregateOutputType | null
  _sum: PlaygroundRewardHistorySumAggregateOutputType | null
  _min: PlaygroundRewardHistoryMinAggregateOutputType | null
  _max: PlaygroundRewardHistoryMaxAggregateOutputType | null
}

type GetPlaygroundRewardHistoryGroupByPayload<T extends PlaygroundRewardHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlaygroundRewardHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlaygroundRewardHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlaygroundRewardHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlaygroundRewardHistoryGroupByOutputType[P]>
      }
    >
  > 



export type PlaygroundRewardHistoryWhereInput = {
  AND?: Prisma.PlaygroundRewardHistoryWhereInput | Prisma.PlaygroundRewardHistoryWhereInput[]
  OR?: Prisma.PlaygroundRewardHistoryWhereInput[]
  NOT?: Prisma.PlaygroundRewardHistoryWhereInput | Prisma.PlaygroundRewardHistoryWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  rewardType?: Prisma.EnumRewardTypeFilter<"PlaygroundRewardHistory"> | $Enums.RewardType
  amount?: Prisma.IntFilter<"PlaygroundRewardHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type PlaygroundRewardHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  rewardType?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type PlaygroundRewardHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PlaygroundRewardHistoryWhereInput | Prisma.PlaygroundRewardHistoryWhereInput[]
  OR?: Prisma.PlaygroundRewardHistoryWhereInput[]
  NOT?: Prisma.PlaygroundRewardHistoryWhereInput | Prisma.PlaygroundRewardHistoryWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  rewardType?: Prisma.EnumRewardTypeFilter<"PlaygroundRewardHistory"> | $Enums.RewardType
  amount?: Prisma.IntFilter<"PlaygroundRewardHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id">

export type PlaygroundRewardHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  rewardType?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlaygroundRewardHistoryCountOrderByAggregateInput
  _avg?: Prisma.PlaygroundRewardHistoryAvgOrderByAggregateInput
  _max?: Prisma.PlaygroundRewardHistoryMaxOrderByAggregateInput
  _min?: Prisma.PlaygroundRewardHistoryMinOrderByAggregateInput
  _sum?: Prisma.PlaygroundRewardHistorySumOrderByAggregateInput
}

export type PlaygroundRewardHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput | Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput | Prisma.PlaygroundRewardHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PlaygroundRewardHistory"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"PlaygroundRewardHistory"> | string
  description?: Prisma.StringWithAggregatesFilter<"PlaygroundRewardHistory"> | string
  rewardType?: Prisma.EnumRewardTypeWithAggregatesFilter<"PlaygroundRewardHistory"> | $Enums.RewardType
  amount?: Prisma.IntWithAggregatesFilter<"PlaygroundRewardHistory"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundRewardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundRewardHistory"> | Date | string
}

export type PlaygroundRewardHistoryCreateInput = {
  id: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutPlaygroundRewardHistoryInput
}

export type PlaygroundRewardHistoryUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundRewardHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutPlaygroundRewardHistoryNestedInput
}

export type PlaygroundRewardHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundRewardHistoryCreateManyInput = {
  id: string
  userPlaygroundId: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundRewardHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundRewardHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundRewardHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  rewardType?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundRewardHistoryAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PlaygroundRewardHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  rewardType?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundRewardHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  rewardType?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlaygroundRewardHistorySumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PlaygroundRewardHistoryListRelationFilter = {
  every?: Prisma.PlaygroundRewardHistoryWhereInput
  some?: Prisma.PlaygroundRewardHistoryWhereInput
  none?: Prisma.PlaygroundRewardHistoryWhereInput
}

export type PlaygroundRewardHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumRewardTypeFieldUpdateOperationsInput = {
  set?: $Enums.RewardType
}

export type PlaygroundRewardHistoryCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
}

export type PlaygroundRewardHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
}

export type PlaygroundRewardHistoryUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundRewardHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  delete?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  connect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  update?: Prisma.PlaygroundRewardHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundRewardHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundRewardHistoryScalarWhereInput | Prisma.PlaygroundRewardHistoryScalarWhereInput[]
}

export type PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundRewardHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  delete?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  connect?: Prisma.PlaygroundRewardHistoryWhereUniqueInput | Prisma.PlaygroundRewardHistoryWhereUniqueInput[]
  update?: Prisma.PlaygroundRewardHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundRewardHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundRewardHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundRewardHistoryScalarWhereInput | Prisma.PlaygroundRewardHistoryScalarWhereInput[]
}

export type PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput = {
  id: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundRewardHistoryCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundRewardHistoryCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInput | Prisma.PlaygroundRewardHistoryCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type PlaygroundRewardHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundRewardHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateWithoutUserPlaygroundInput>
}

export type PlaygroundRewardHistoryUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundRewardHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateManyMutationInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type PlaygroundRewardHistoryScalarWhereInput = {
  AND?: Prisma.PlaygroundRewardHistoryScalarWhereInput | Prisma.PlaygroundRewardHistoryScalarWhereInput[]
  OR?: Prisma.PlaygroundRewardHistoryScalarWhereInput[]
  NOT?: Prisma.PlaygroundRewardHistoryScalarWhereInput | Prisma.PlaygroundRewardHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  description?: Prisma.StringFilter<"PlaygroundRewardHistory"> | string
  rewardType?: Prisma.EnumRewardTypeFilter<"PlaygroundRewardHistory"> | $Enums.RewardType
  amount?: Prisma.IntFilter<"PlaygroundRewardHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundRewardHistory"> | Date | string
}

export type PlaygroundRewardHistoryCreateManyUserPlaygroundInput = {
  id: string
  description?: string
  rewardType: $Enums.RewardType
  amount: number
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PlaygroundRewardHistoryUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundRewardHistoryUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlaygroundRewardHistoryUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  rewardType?: Prisma.EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PlaygroundRewardHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  rewardType?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundRewardHistory"]>

export type PlaygroundRewardHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  rewardType?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundRewardHistory"]>

export type PlaygroundRewardHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  rewardType?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundRewardHistory"]>

export type PlaygroundRewardHistorySelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  rewardType?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlaygroundRewardHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "description" | "rewardType" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["playgroundRewardHistory"]>
export type PlaygroundRewardHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type PlaygroundRewardHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type PlaygroundRewardHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $PlaygroundRewardHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlaygroundRewardHistory"
  objects: {
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    description: string
    rewardType: $Enums.RewardType
    amount: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["playgroundRewardHistory"]>
  composites: {}
}

export type PlaygroundRewardHistoryGetPayload<S extends boolean | null | undefined | PlaygroundRewardHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload, S>

export type PlaygroundRewardHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlaygroundRewardHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlaygroundRewardHistoryCountAggregateInputType | true
  }

export interface PlaygroundRewardHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaygroundRewardHistory'], meta: { name: 'PlaygroundRewardHistory' } }
  /**
   * Find zero or one PlaygroundRewardHistory that matches the filter.
   * @param {PlaygroundRewardHistoryFindUniqueArgs} args - Arguments to find a PlaygroundRewardHistory
   * @example
   * // Get one PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlaygroundRewardHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlaygroundRewardHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlaygroundRewardHistoryFindUniqueOrThrowArgs} args - Arguments to find a PlaygroundRewardHistory
   * @example
   * // Get one PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlaygroundRewardHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundRewardHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryFindFirstArgs} args - Arguments to find a PlaygroundRewardHistory
   * @example
   * // Get one PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlaygroundRewardHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundRewardHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryFindFirstOrThrowArgs} args - Arguments to find a PlaygroundRewardHistory
   * @example
   * // Get one PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlaygroundRewardHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlaygroundRewardHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlaygroundRewardHistories
   * const playgroundRewardHistories = await prisma.playgroundRewardHistory.findMany()
   * 
   * // Get first 10 PlaygroundRewardHistories
   * const playgroundRewardHistories = await prisma.playgroundRewardHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playgroundRewardHistoryWithIdOnly = await prisma.playgroundRewardHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlaygroundRewardHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlaygroundRewardHistory.
   * @param {PlaygroundRewardHistoryCreateArgs} args - Arguments to create a PlaygroundRewardHistory.
   * @example
   * // Create one PlaygroundRewardHistory
   * const PlaygroundRewardHistory = await prisma.playgroundRewardHistory.create({
   *   data: {
   *     // ... data to create a PlaygroundRewardHistory
   *   }
   * })
   * 
   */
  create<T extends PlaygroundRewardHistoryCreateArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlaygroundRewardHistories.
   * @param {PlaygroundRewardHistoryCreateManyArgs} args - Arguments to create many PlaygroundRewardHistories.
   * @example
   * // Create many PlaygroundRewardHistories
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlaygroundRewardHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlaygroundRewardHistories and returns the data saved in the database.
   * @param {PlaygroundRewardHistoryCreateManyAndReturnArgs} args - Arguments to create many PlaygroundRewardHistories.
   * @example
   * // Create many PlaygroundRewardHistories
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlaygroundRewardHistories and only return the `id`
   * const playgroundRewardHistoryWithIdOnly = await prisma.playgroundRewardHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlaygroundRewardHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlaygroundRewardHistory.
   * @param {PlaygroundRewardHistoryDeleteArgs} args - Arguments to delete one PlaygroundRewardHistory.
   * @example
   * // Delete one PlaygroundRewardHistory
   * const PlaygroundRewardHistory = await prisma.playgroundRewardHistory.delete({
   *   where: {
   *     // ... filter to delete one PlaygroundRewardHistory
   *   }
   * })
   * 
   */
  delete<T extends PlaygroundRewardHistoryDeleteArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlaygroundRewardHistory.
   * @param {PlaygroundRewardHistoryUpdateArgs} args - Arguments to update one PlaygroundRewardHistory.
   * @example
   * // Update one PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlaygroundRewardHistoryUpdateArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlaygroundRewardHistories.
   * @param {PlaygroundRewardHistoryDeleteManyArgs} args - Arguments to filter PlaygroundRewardHistories to delete.
   * @example
   * // Delete a few PlaygroundRewardHistories
   * const { count } = await prisma.playgroundRewardHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlaygroundRewardHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundRewardHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundRewardHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlaygroundRewardHistories
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlaygroundRewardHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundRewardHistories and returns the data updated in the database.
   * @param {PlaygroundRewardHistoryUpdateManyAndReturnArgs} args - Arguments to update many PlaygroundRewardHistories.
   * @example
   * // Update many PlaygroundRewardHistories
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlaygroundRewardHistories and only return the `id`
   * const playgroundRewardHistoryWithIdOnly = await prisma.playgroundRewardHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlaygroundRewardHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlaygroundRewardHistory.
   * @param {PlaygroundRewardHistoryUpsertArgs} args - Arguments to update or create a PlaygroundRewardHistory.
   * @example
   * // Update or create a PlaygroundRewardHistory
   * const playgroundRewardHistory = await prisma.playgroundRewardHistory.upsert({
   *   create: {
   *     // ... data to create a PlaygroundRewardHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlaygroundRewardHistory we want to update
   *   }
   * })
   */
  upsert<T extends PlaygroundRewardHistoryUpsertArgs>(args: Prisma.SelectSubset<T, PlaygroundRewardHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__PlaygroundRewardHistoryClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundRewardHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlaygroundRewardHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryCountArgs} args - Arguments to filter PlaygroundRewardHistories to count.
   * @example
   * // Count the number of PlaygroundRewardHistories
   * const count = await prisma.playgroundRewardHistory.count({
   *   where: {
   *     // ... the filter for the PlaygroundRewardHistories we want to count
   *   }
   * })
  **/
  count<T extends PlaygroundRewardHistoryCountArgs>(
    args?: Prisma.Subset<T, PlaygroundRewardHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlaygroundRewardHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlaygroundRewardHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlaygroundRewardHistoryAggregateArgs>(args: Prisma.Subset<T, PlaygroundRewardHistoryAggregateArgs>): Prisma.PrismaPromise<GetPlaygroundRewardHistoryAggregateType<T>>

  /**
   * Group by PlaygroundRewardHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundRewardHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlaygroundRewardHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlaygroundRewardHistoryGroupByArgs['orderBy'] }
      : { orderBy?: PlaygroundRewardHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlaygroundRewardHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaygroundRewardHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlaygroundRewardHistory model
 */
readonly fields: PlaygroundRewardHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlaygroundRewardHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlaygroundRewardHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlaygroundRewardHistory model
 */
export interface PlaygroundRewardHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"PlaygroundRewardHistory", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"PlaygroundRewardHistory", 'String'>
  readonly description: Prisma.FieldRef<"PlaygroundRewardHistory", 'String'>
  readonly rewardType: Prisma.FieldRef<"PlaygroundRewardHistory", 'RewardType'>
  readonly amount: Prisma.FieldRef<"PlaygroundRewardHistory", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PlaygroundRewardHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlaygroundRewardHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlaygroundRewardHistory findUnique
 */
export type PlaygroundRewardHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundRewardHistory to fetch.
   */
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
}

/**
 * PlaygroundRewardHistory findUniqueOrThrow
 */
export type PlaygroundRewardHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundRewardHistory to fetch.
   */
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
}

/**
 * PlaygroundRewardHistory findFirst
 */
export type PlaygroundRewardHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundRewardHistory to fetch.
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundRewardHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithRelationInput | Prisma.PlaygroundRewardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundRewardHistories.
   */
  cursor?: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundRewardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundRewardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundRewardHistories.
   */
  distinct?: Prisma.PlaygroundRewardHistoryScalarFieldEnum | Prisma.PlaygroundRewardHistoryScalarFieldEnum[]
}

/**
 * PlaygroundRewardHistory findFirstOrThrow
 */
export type PlaygroundRewardHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundRewardHistory to fetch.
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundRewardHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithRelationInput | Prisma.PlaygroundRewardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundRewardHistories.
   */
  cursor?: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundRewardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundRewardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundRewardHistories.
   */
  distinct?: Prisma.PlaygroundRewardHistoryScalarFieldEnum | Prisma.PlaygroundRewardHistoryScalarFieldEnum[]
}

/**
 * PlaygroundRewardHistory findMany
 */
export type PlaygroundRewardHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundRewardHistories to fetch.
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundRewardHistories to fetch.
   */
  orderBy?: Prisma.PlaygroundRewardHistoryOrderByWithRelationInput | Prisma.PlaygroundRewardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlaygroundRewardHistories.
   */
  cursor?: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundRewardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundRewardHistories.
   */
  skip?: number
  distinct?: Prisma.PlaygroundRewardHistoryScalarFieldEnum | Prisma.PlaygroundRewardHistoryScalarFieldEnum[]
}

/**
 * PlaygroundRewardHistory create
 */
export type PlaygroundRewardHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a PlaygroundRewardHistory.
   */
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateInput, Prisma.PlaygroundRewardHistoryUncheckedCreateInput>
}

/**
 * PlaygroundRewardHistory createMany
 */
export type PlaygroundRewardHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlaygroundRewardHistories.
   */
  data: Prisma.PlaygroundRewardHistoryCreateManyInput | Prisma.PlaygroundRewardHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlaygroundRewardHistory createManyAndReturn
 */
export type PlaygroundRewardHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many PlaygroundRewardHistories.
   */
  data: Prisma.PlaygroundRewardHistoryCreateManyInput | Prisma.PlaygroundRewardHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundRewardHistory update
 */
export type PlaygroundRewardHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a PlaygroundRewardHistory.
   */
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateInput>
  /**
   * Choose, which PlaygroundRewardHistory to update.
   */
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
}

/**
 * PlaygroundRewardHistory updateMany
 */
export type PlaygroundRewardHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlaygroundRewardHistories.
   */
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateManyMutationInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundRewardHistories to update
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * Limit how many PlaygroundRewardHistories to update.
   */
  limit?: number
}

/**
 * PlaygroundRewardHistory updateManyAndReturn
 */
export type PlaygroundRewardHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * The data used to update PlaygroundRewardHistories.
   */
  data: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateManyMutationInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundRewardHistories to update
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * Limit how many PlaygroundRewardHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundRewardHistory upsert
 */
export type PlaygroundRewardHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the PlaygroundRewardHistory to update in case it exists.
   */
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
  /**
   * In case the PlaygroundRewardHistory found by the `where` argument doesn't exist, create a new PlaygroundRewardHistory with this data.
   */
  create: Prisma.XOR<Prisma.PlaygroundRewardHistoryCreateInput, Prisma.PlaygroundRewardHistoryUncheckedCreateInput>
  /**
   * In case the PlaygroundRewardHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlaygroundRewardHistoryUpdateInput, Prisma.PlaygroundRewardHistoryUncheckedUpdateInput>
}

/**
 * PlaygroundRewardHistory delete
 */
export type PlaygroundRewardHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
  /**
   * Filter which PlaygroundRewardHistory to delete.
   */
  where: Prisma.PlaygroundRewardHistoryWhereUniqueInput
}

/**
 * PlaygroundRewardHistory deleteMany
 */
export type PlaygroundRewardHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundRewardHistories to delete
   */
  where?: Prisma.PlaygroundRewardHistoryWhereInput
  /**
   * Limit how many PlaygroundRewardHistories to delete.
   */
  limit?: number
}

/**
 * PlaygroundRewardHistory without action
 */
export type PlaygroundRewardHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundRewardHistory
   */
  select?: Prisma.PlaygroundRewardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundRewardHistory
   */
  omit?: Prisma.PlaygroundRewardHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundRewardHistoryInclude<ExtArgs> | null
}
