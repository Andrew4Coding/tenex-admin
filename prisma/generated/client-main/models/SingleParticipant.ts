
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SingleParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SingleParticipant
 * 
 */
export type SingleParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$SingleParticipantPayload>

export type AggregateSingleParticipant = {
  _count: SingleParticipantCountAggregateOutputType | null
  _min: SingleParticipantMinAggregateOutputType | null
  _max: SingleParticipantMaxAggregateOutputType | null
}

export type SingleParticipantMinAggregateOutputType = {
  id: string | null
  userId: string | null
  programId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SingleParticipantMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  programId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SingleParticipantCountAggregateOutputType = {
  id: number
  userId: number
  programId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SingleParticipantMinAggregateInputType = {
  id?: true
  userId?: true
  programId?: true
  createdAt?: true
  updatedAt?: true
}

export type SingleParticipantMaxAggregateInputType = {
  id?: true
  userId?: true
  programId?: true
  createdAt?: true
  updatedAt?: true
}

export type SingleParticipantCountAggregateInputType = {
  id?: true
  userId?: true
  programId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SingleParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SingleParticipant to aggregate.
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SingleParticipants to fetch.
   */
  orderBy?: Prisma.SingleParticipantOrderByWithRelationInput | Prisma.SingleParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SingleParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SingleParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SingleParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SingleParticipants
  **/
  _count?: true | SingleParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SingleParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SingleParticipantMaxAggregateInputType
}

export type GetSingleParticipantAggregateType<T extends SingleParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateSingleParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSingleParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateSingleParticipant[P]>
}




export type SingleParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SingleParticipantWhereInput
  orderBy?: Prisma.SingleParticipantOrderByWithAggregationInput | Prisma.SingleParticipantOrderByWithAggregationInput[]
  by: Prisma.SingleParticipantScalarFieldEnum[] | Prisma.SingleParticipantScalarFieldEnum
  having?: Prisma.SingleParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SingleParticipantCountAggregateInputType | true
  _min?: SingleParticipantMinAggregateInputType
  _max?: SingleParticipantMaxAggregateInputType
}

export type SingleParticipantGroupByOutputType = {
  id: string
  userId: string
  programId: string
  createdAt: Date
  updatedAt: Date
  _count: SingleParticipantCountAggregateOutputType | null
  _min: SingleParticipantMinAggregateOutputType | null
  _max: SingleParticipantMaxAggregateOutputType | null
}

type GetSingleParticipantGroupByPayload<T extends SingleParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SingleParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SingleParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SingleParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SingleParticipantGroupByOutputType[P]>
      }
    >
  > 



export type SingleParticipantWhereInput = {
  AND?: Prisma.SingleParticipantWhereInput | Prisma.SingleParticipantWhereInput[]
  OR?: Prisma.SingleParticipantWhereInput[]
  NOT?: Prisma.SingleParticipantWhereInput | Prisma.SingleParticipantWhereInput[]
  id?: Prisma.StringFilter<"SingleParticipant"> | string
  userId?: Prisma.StringFilter<"SingleParticipant"> | string
  programId?: Prisma.StringFilter<"SingleParticipant"> | string
  createdAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
  Program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}

export type SingleParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Program?: Prisma.ProgramOrderByWithRelationInput
  user?: Prisma.userOrderByWithRelationInput
}

export type SingleParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SingleParticipantWhereInput | Prisma.SingleParticipantWhereInput[]
  OR?: Prisma.SingleParticipantWhereInput[]
  NOT?: Prisma.SingleParticipantWhereInput | Prisma.SingleParticipantWhereInput[]
  userId?: Prisma.StringFilter<"SingleParticipant"> | string
  programId?: Prisma.StringFilter<"SingleParticipant"> | string
  createdAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
  Program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.userWhereInput>
}, "id">

export type SingleParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SingleParticipantCountOrderByAggregateInput
  _max?: Prisma.SingleParticipantMaxOrderByAggregateInput
  _min?: Prisma.SingleParticipantMinOrderByAggregateInput
}

export type SingleParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.SingleParticipantScalarWhereWithAggregatesInput | Prisma.SingleParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.SingleParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SingleParticipantScalarWhereWithAggregatesInput | Prisma.SingleParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SingleParticipant"> | string
  userId?: Prisma.StringWithAggregatesFilter<"SingleParticipant"> | string
  programId?: Prisma.StringWithAggregatesFilter<"SingleParticipant"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SingleParticipant"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SingleParticipant"> | Date | string
}

export type SingleParticipantCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  Program: Prisma.ProgramCreateNestedOneWithoutSingleParticipantInput
  user: Prisma.userCreateNestedOneWithoutSingleParticipantInput
}

export type SingleParticipantUncheckedCreateInput = {
  id: string
  userId: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Program?: Prisma.ProgramUpdateOneRequiredWithoutSingleParticipantNestedInput
  user?: Prisma.userUpdateOneRequiredWithoutSingleParticipantNestedInput
}

export type SingleParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantCreateManyInput = {
  id: string
  userId: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantListRelationFilter = {
  every?: Prisma.SingleParticipantWhereInput
  some?: Prisma.SingleParticipantWhereInput
  none?: Prisma.SingleParticipantWhereInput
}

export type SingleParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SingleParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SingleParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SingleParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SingleParticipantCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput> | Prisma.SingleParticipantCreateWithoutProgramInput[] | Prisma.SingleParticipantUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutProgramInput | Prisma.SingleParticipantCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.SingleParticipantCreateManyProgramInputEnvelope
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
}

export type SingleParticipantUncheckedCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput> | Prisma.SingleParticipantCreateWithoutProgramInput[] | Prisma.SingleParticipantUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutProgramInput | Prisma.SingleParticipantCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.SingleParticipantCreateManyProgramInputEnvelope
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
}

export type SingleParticipantUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput> | Prisma.SingleParticipantCreateWithoutProgramInput[] | Prisma.SingleParticipantUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutProgramInput | Prisma.SingleParticipantCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.SingleParticipantUpsertWithWhereUniqueWithoutProgramInput | Prisma.SingleParticipantUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.SingleParticipantCreateManyProgramInputEnvelope
  set?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  disconnect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  delete?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  update?: Prisma.SingleParticipantUpdateWithWhereUniqueWithoutProgramInput | Prisma.SingleParticipantUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.SingleParticipantUpdateManyWithWhereWithoutProgramInput | Prisma.SingleParticipantUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
}

export type SingleParticipantUncheckedUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput> | Prisma.SingleParticipantCreateWithoutProgramInput[] | Prisma.SingleParticipantUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutProgramInput | Prisma.SingleParticipantCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.SingleParticipantUpsertWithWhereUniqueWithoutProgramInput | Prisma.SingleParticipantUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.SingleParticipantCreateManyProgramInputEnvelope
  set?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  disconnect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  delete?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  update?: Prisma.SingleParticipantUpdateWithWhereUniqueWithoutProgramInput | Prisma.SingleParticipantUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.SingleParticipantUpdateManyWithWhereWithoutProgramInput | Prisma.SingleParticipantUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
}

export type SingleParticipantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput> | Prisma.SingleParticipantCreateWithoutUserInput[] | Prisma.SingleParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutUserInput | Prisma.SingleParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SingleParticipantCreateManyUserInputEnvelope
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
}

export type SingleParticipantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput> | Prisma.SingleParticipantCreateWithoutUserInput[] | Prisma.SingleParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutUserInput | Prisma.SingleParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SingleParticipantCreateManyUserInputEnvelope
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
}

export type SingleParticipantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput> | Prisma.SingleParticipantCreateWithoutUserInput[] | Prisma.SingleParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutUserInput | Prisma.SingleParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SingleParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.SingleParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SingleParticipantCreateManyUserInputEnvelope
  set?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  disconnect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  delete?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  update?: Prisma.SingleParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.SingleParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SingleParticipantUpdateManyWithWhereWithoutUserInput | Prisma.SingleParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
}

export type SingleParticipantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput> | Prisma.SingleParticipantCreateWithoutUserInput[] | Prisma.SingleParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SingleParticipantCreateOrConnectWithoutUserInput | Prisma.SingleParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SingleParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.SingleParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SingleParticipantCreateManyUserInputEnvelope
  set?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  disconnect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  delete?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  connect?: Prisma.SingleParticipantWhereUniqueInput | Prisma.SingleParticipantWhereUniqueInput[]
  update?: Prisma.SingleParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.SingleParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SingleParticipantUpdateManyWithWhereWithoutUserInput | Prisma.SingleParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
}

export type SingleParticipantCreateWithoutProgramInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  user: Prisma.userCreateNestedOneWithoutSingleParticipantInput
}

export type SingleParticipantUncheckedCreateWithoutProgramInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantCreateOrConnectWithoutProgramInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput>
}

export type SingleParticipantCreateManyProgramInputEnvelope = {
  data: Prisma.SingleParticipantCreateManyProgramInput | Prisma.SingleParticipantCreateManyProgramInput[]
  skipDuplicates?: boolean
}

export type SingleParticipantUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.SingleParticipantUpdateWithoutProgramInput, Prisma.SingleParticipantUncheckedUpdateWithoutProgramInput>
  create: Prisma.XOR<Prisma.SingleParticipantCreateWithoutProgramInput, Prisma.SingleParticipantUncheckedCreateWithoutProgramInput>
}

export type SingleParticipantUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.SingleParticipantUpdateWithoutProgramInput, Prisma.SingleParticipantUncheckedUpdateWithoutProgramInput>
}

export type SingleParticipantUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.SingleParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.SingleParticipantUpdateManyMutationInput, Prisma.SingleParticipantUncheckedUpdateManyWithoutProgramInput>
}

export type SingleParticipantScalarWhereInput = {
  AND?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
  OR?: Prisma.SingleParticipantScalarWhereInput[]
  NOT?: Prisma.SingleParticipantScalarWhereInput | Prisma.SingleParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"SingleParticipant"> | string
  userId?: Prisma.StringFilter<"SingleParticipant"> | string
  programId?: Prisma.StringFilter<"SingleParticipant"> | string
  createdAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SingleParticipant"> | Date | string
}

export type SingleParticipantCreateWithoutUserInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  Program: Prisma.ProgramCreateNestedOneWithoutSingleParticipantInput
}

export type SingleParticipantUncheckedCreateWithoutUserInput = {
  id: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantCreateOrConnectWithoutUserInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput>
}

export type SingleParticipantCreateManyUserInputEnvelope = {
  data: Prisma.SingleParticipantCreateManyUserInput | Prisma.SingleParticipantCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SingleParticipantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.SingleParticipantUpdateWithoutUserInput, Prisma.SingleParticipantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SingleParticipantCreateWithoutUserInput, Prisma.SingleParticipantUncheckedCreateWithoutUserInput>
}

export type SingleParticipantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SingleParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.SingleParticipantUpdateWithoutUserInput, Prisma.SingleParticipantUncheckedUpdateWithoutUserInput>
}

export type SingleParticipantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SingleParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.SingleParticipantUpdateManyMutationInput, Prisma.SingleParticipantUncheckedUpdateManyWithoutUserInput>
}

export type SingleParticipantCreateManyProgramInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.userUpdateOneRequiredWithoutSingleParticipantNestedInput
}

export type SingleParticipantUncheckedUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantUncheckedUpdateManyWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantCreateManyUserInput = {
  id: string
  programId: string
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SingleParticipantUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Program?: Prisma.ProgramUpdateOneRequiredWithoutSingleParticipantNestedInput
}

export type SingleParticipantUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SingleParticipantUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SingleParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  programId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["singleParticipant"]>

export type SingleParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  programId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["singleParticipant"]>

export type SingleParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  programId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}, ExtArgs["result"]["singleParticipant"]>

export type SingleParticipantSelectScalar = {
  id?: boolean
  userId?: boolean
  programId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SingleParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "programId" | "createdAt" | "updatedAt", ExtArgs["result"]["singleParticipant"]>
export type SingleParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type SingleParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}
export type SingleParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  user?: boolean | Prisma.userDefaultArgs<ExtArgs>
}

export type $SingleParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SingleParticipant"
  objects: {
    Program: Prisma.$ProgramPayload<ExtArgs>
    user: Prisma.$userPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    programId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["singleParticipant"]>
  composites: {}
}

export type SingleParticipantGetPayload<S extends boolean | null | undefined | SingleParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload, S>

export type SingleParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SingleParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SingleParticipantCountAggregateInputType | true
  }

export interface SingleParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SingleParticipant'], meta: { name: 'SingleParticipant' } }
  /**
   * Find zero or one SingleParticipant that matches the filter.
   * @param {SingleParticipantFindUniqueArgs} args - Arguments to find a SingleParticipant
   * @example
   * // Get one SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SingleParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, SingleParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SingleParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SingleParticipantFindUniqueOrThrowArgs} args - Arguments to find a SingleParticipant
   * @example
   * // Get one SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SingleParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SingleParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SingleParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantFindFirstArgs} args - Arguments to find a SingleParticipant
   * @example
   * // Get one SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SingleParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, SingleParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SingleParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantFindFirstOrThrowArgs} args - Arguments to find a SingleParticipant
   * @example
   * // Get one SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SingleParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SingleParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SingleParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SingleParticipants
   * const singleParticipants = await prisma.singleParticipant.findMany()
   * 
   * // Get first 10 SingleParticipants
   * const singleParticipants = await prisma.singleParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const singleParticipantWithIdOnly = await prisma.singleParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SingleParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, SingleParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SingleParticipant.
   * @param {SingleParticipantCreateArgs} args - Arguments to create a SingleParticipant.
   * @example
   * // Create one SingleParticipant
   * const SingleParticipant = await prisma.singleParticipant.create({
   *   data: {
   *     // ... data to create a SingleParticipant
   *   }
   * })
   * 
   */
  create<T extends SingleParticipantCreateArgs>(args: Prisma.SelectSubset<T, SingleParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SingleParticipants.
   * @param {SingleParticipantCreateManyArgs} args - Arguments to create many SingleParticipants.
   * @example
   * // Create many SingleParticipants
   * const singleParticipant = await prisma.singleParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SingleParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, SingleParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SingleParticipants and returns the data saved in the database.
   * @param {SingleParticipantCreateManyAndReturnArgs} args - Arguments to create many SingleParticipants.
   * @example
   * // Create many SingleParticipants
   * const singleParticipant = await prisma.singleParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SingleParticipants and only return the `id`
   * const singleParticipantWithIdOnly = await prisma.singleParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SingleParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SingleParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SingleParticipant.
   * @param {SingleParticipantDeleteArgs} args - Arguments to delete one SingleParticipant.
   * @example
   * // Delete one SingleParticipant
   * const SingleParticipant = await prisma.singleParticipant.delete({
   *   where: {
   *     // ... filter to delete one SingleParticipant
   *   }
   * })
   * 
   */
  delete<T extends SingleParticipantDeleteArgs>(args: Prisma.SelectSubset<T, SingleParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SingleParticipant.
   * @param {SingleParticipantUpdateArgs} args - Arguments to update one SingleParticipant.
   * @example
   * // Update one SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SingleParticipantUpdateArgs>(args: Prisma.SelectSubset<T, SingleParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SingleParticipants.
   * @param {SingleParticipantDeleteManyArgs} args - Arguments to filter SingleParticipants to delete.
   * @example
   * // Delete a few SingleParticipants
   * const { count } = await prisma.singleParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SingleParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, SingleParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SingleParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SingleParticipants
   * const singleParticipant = await prisma.singleParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SingleParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, SingleParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SingleParticipants and returns the data updated in the database.
   * @param {SingleParticipantUpdateManyAndReturnArgs} args - Arguments to update many SingleParticipants.
   * @example
   * // Update many SingleParticipants
   * const singleParticipant = await prisma.singleParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SingleParticipants and only return the `id`
   * const singleParticipantWithIdOnly = await prisma.singleParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SingleParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SingleParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SingleParticipant.
   * @param {SingleParticipantUpsertArgs} args - Arguments to update or create a SingleParticipant.
   * @example
   * // Update or create a SingleParticipant
   * const singleParticipant = await prisma.singleParticipant.upsert({
   *   create: {
   *     // ... data to create a SingleParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SingleParticipant we want to update
   *   }
   * })
   */
  upsert<T extends SingleParticipantUpsertArgs>(args: Prisma.SelectSubset<T, SingleParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__SingleParticipantClient<runtime.Types.Result.GetResult<Prisma.$SingleParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SingleParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantCountArgs} args - Arguments to filter SingleParticipants to count.
   * @example
   * // Count the number of SingleParticipants
   * const count = await prisma.singleParticipant.count({
   *   where: {
   *     // ... the filter for the SingleParticipants we want to count
   *   }
   * })
  **/
  count<T extends SingleParticipantCountArgs>(
    args?: Prisma.Subset<T, SingleParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SingleParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SingleParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SingleParticipantAggregateArgs>(args: Prisma.Subset<T, SingleParticipantAggregateArgs>): Prisma.PrismaPromise<GetSingleParticipantAggregateType<T>>

  /**
   * Group by SingleParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SingleParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SingleParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SingleParticipantGroupByArgs['orderBy'] }
      : { orderBy?: SingleParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SingleParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSingleParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SingleParticipant model
 */
readonly fields: SingleParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SingleParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SingleParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Program<T extends Prisma.ProgramDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProgramDefaultArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.userDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.userDefaultArgs<ExtArgs>>): Prisma.Prisma__userClient<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SingleParticipant model
 */
export interface SingleParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"SingleParticipant", 'String'>
  readonly userId: Prisma.FieldRef<"SingleParticipant", 'String'>
  readonly programId: Prisma.FieldRef<"SingleParticipant", 'String'>
  readonly createdAt: Prisma.FieldRef<"SingleParticipant", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SingleParticipant", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SingleParticipant findUnique
 */
export type SingleParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter, which SingleParticipant to fetch.
   */
  where: Prisma.SingleParticipantWhereUniqueInput
}

/**
 * SingleParticipant findUniqueOrThrow
 */
export type SingleParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter, which SingleParticipant to fetch.
   */
  where: Prisma.SingleParticipantWhereUniqueInput
}

/**
 * SingleParticipant findFirst
 */
export type SingleParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter, which SingleParticipant to fetch.
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SingleParticipants to fetch.
   */
  orderBy?: Prisma.SingleParticipantOrderByWithRelationInput | Prisma.SingleParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SingleParticipants.
   */
  cursor?: Prisma.SingleParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SingleParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SingleParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SingleParticipants.
   */
  distinct?: Prisma.SingleParticipantScalarFieldEnum | Prisma.SingleParticipantScalarFieldEnum[]
}

/**
 * SingleParticipant findFirstOrThrow
 */
export type SingleParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter, which SingleParticipant to fetch.
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SingleParticipants to fetch.
   */
  orderBy?: Prisma.SingleParticipantOrderByWithRelationInput | Prisma.SingleParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SingleParticipants.
   */
  cursor?: Prisma.SingleParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SingleParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SingleParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SingleParticipants.
   */
  distinct?: Prisma.SingleParticipantScalarFieldEnum | Prisma.SingleParticipantScalarFieldEnum[]
}

/**
 * SingleParticipant findMany
 */
export type SingleParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter, which SingleParticipants to fetch.
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SingleParticipants to fetch.
   */
  orderBy?: Prisma.SingleParticipantOrderByWithRelationInput | Prisma.SingleParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SingleParticipants.
   */
  cursor?: Prisma.SingleParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SingleParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SingleParticipants.
   */
  skip?: number
  distinct?: Prisma.SingleParticipantScalarFieldEnum | Prisma.SingleParticipantScalarFieldEnum[]
}

/**
 * SingleParticipant create
 */
export type SingleParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a SingleParticipant.
   */
  data: Prisma.XOR<Prisma.SingleParticipantCreateInput, Prisma.SingleParticipantUncheckedCreateInput>
}

/**
 * SingleParticipant createMany
 */
export type SingleParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SingleParticipants.
   */
  data: Prisma.SingleParticipantCreateManyInput | Prisma.SingleParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SingleParticipant createManyAndReturn
 */
export type SingleParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many SingleParticipants.
   */
  data: Prisma.SingleParticipantCreateManyInput | Prisma.SingleParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SingleParticipant update
 */
export type SingleParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a SingleParticipant.
   */
  data: Prisma.XOR<Prisma.SingleParticipantUpdateInput, Prisma.SingleParticipantUncheckedUpdateInput>
  /**
   * Choose, which SingleParticipant to update.
   */
  where: Prisma.SingleParticipantWhereUniqueInput
}

/**
 * SingleParticipant updateMany
 */
export type SingleParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SingleParticipants.
   */
  data: Prisma.XOR<Prisma.SingleParticipantUpdateManyMutationInput, Prisma.SingleParticipantUncheckedUpdateManyInput>
  /**
   * Filter which SingleParticipants to update
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * Limit how many SingleParticipants to update.
   */
  limit?: number
}

/**
 * SingleParticipant updateManyAndReturn
 */
export type SingleParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * The data used to update SingleParticipants.
   */
  data: Prisma.XOR<Prisma.SingleParticipantUpdateManyMutationInput, Prisma.SingleParticipantUncheckedUpdateManyInput>
  /**
   * Filter which SingleParticipants to update
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * Limit how many SingleParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SingleParticipant upsert
 */
export type SingleParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the SingleParticipant to update in case it exists.
   */
  where: Prisma.SingleParticipantWhereUniqueInput
  /**
   * In case the SingleParticipant found by the `where` argument doesn't exist, create a new SingleParticipant with this data.
   */
  create: Prisma.XOR<Prisma.SingleParticipantCreateInput, Prisma.SingleParticipantUncheckedCreateInput>
  /**
   * In case the SingleParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SingleParticipantUpdateInput, Prisma.SingleParticipantUncheckedUpdateInput>
}

/**
 * SingleParticipant delete
 */
export type SingleParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
  /**
   * Filter which SingleParticipant to delete.
   */
  where: Prisma.SingleParticipantWhereUniqueInput
}

/**
 * SingleParticipant deleteMany
 */
export type SingleParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SingleParticipants to delete
   */
  where?: Prisma.SingleParticipantWhereInput
  /**
   * Limit how many SingleParticipants to delete.
   */
  limit?: number
}

/**
 * SingleParticipant without action
 */
export type SingleParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SingleParticipant
   */
  select?: Prisma.SingleParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SingleParticipant
   */
  omit?: Prisma.SingleParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SingleParticipantInclude<ExtArgs> | null
}
