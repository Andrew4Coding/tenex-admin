
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `rateLimit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model rateLimit
 * 
 */
export type rateLimitModel = runtime.Types.Result.DefaultSelection<Prisma.$rateLimitPayload>

export type AggregateRateLimit = {
  _count: RateLimitCountAggregateOutputType | null
  _avg: RateLimitAvgAggregateOutputType | null
  _sum: RateLimitSumAggregateOutputType | null
  _min: RateLimitMinAggregateOutputType | null
  _max: RateLimitMaxAggregateOutputType | null
}

export type RateLimitAvgAggregateOutputType = {
  count: number | null
  lastRequest: number | null
}

export type RateLimitSumAggregateOutputType = {
  count: number | null
  lastRequest: bigint | null
}

export type RateLimitMinAggregateOutputType = {
  id: string | null
  key: string | null
  count: number | null
  lastRequest: bigint | null
}

export type RateLimitMaxAggregateOutputType = {
  id: string | null
  key: string | null
  count: number | null
  lastRequest: bigint | null
}

export type RateLimitCountAggregateOutputType = {
  id: number
  key: number
  count: number
  lastRequest: number
  _all: number
}


export type RateLimitAvgAggregateInputType = {
  count?: true
  lastRequest?: true
}

export type RateLimitSumAggregateInputType = {
  count?: true
  lastRequest?: true
}

export type RateLimitMinAggregateInputType = {
  id?: true
  key?: true
  count?: true
  lastRequest?: true
}

export type RateLimitMaxAggregateInputType = {
  id?: true
  key?: true
  count?: true
  lastRequest?: true
}

export type RateLimitCountAggregateInputType = {
  id?: true
  key?: true
  count?: true
  lastRequest?: true
  _all?: true
}

export type RateLimitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which rateLimit to aggregate.
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rateLimits to fetch.
   */
  orderBy?: Prisma.rateLimitOrderByWithRelationInput | Prisma.rateLimitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.rateLimitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rateLimits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rateLimits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned rateLimits
  **/
  _count?: true | RateLimitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RateLimitAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RateLimitSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RateLimitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RateLimitMaxAggregateInputType
}

export type GetRateLimitAggregateType<T extends RateLimitAggregateArgs> = {
      [P in keyof T & keyof AggregateRateLimit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRateLimit[P]>
    : Prisma.GetScalarType<T[P], AggregateRateLimit[P]>
}




export type rateLimitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.rateLimitWhereInput
  orderBy?: Prisma.rateLimitOrderByWithAggregationInput | Prisma.rateLimitOrderByWithAggregationInput[]
  by: Prisma.RateLimitScalarFieldEnum[] | Prisma.RateLimitScalarFieldEnum
  having?: Prisma.rateLimitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RateLimitCountAggregateInputType | true
  _avg?: RateLimitAvgAggregateInputType
  _sum?: RateLimitSumAggregateInputType
  _min?: RateLimitMinAggregateInputType
  _max?: RateLimitMaxAggregateInputType
}

export type RateLimitGroupByOutputType = {
  id: string
  key: string | null
  count: number | null
  lastRequest: bigint | null
  _count: RateLimitCountAggregateOutputType | null
  _avg: RateLimitAvgAggregateOutputType | null
  _sum: RateLimitSumAggregateOutputType | null
  _min: RateLimitMinAggregateOutputType | null
  _max: RateLimitMaxAggregateOutputType | null
}

type GetRateLimitGroupByPayload<T extends rateLimitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RateLimitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RateLimitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RateLimitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RateLimitGroupByOutputType[P]>
      }
    >
  > 



export type rateLimitWhereInput = {
  AND?: Prisma.rateLimitWhereInput | Prisma.rateLimitWhereInput[]
  OR?: Prisma.rateLimitWhereInput[]
  NOT?: Prisma.rateLimitWhereInput | Prisma.rateLimitWhereInput[]
  id?: Prisma.StringFilter<"rateLimit"> | string
  key?: Prisma.StringNullableFilter<"rateLimit"> | string | null
  count?: Prisma.IntNullableFilter<"rateLimit"> | number | null
  lastRequest?: Prisma.BigIntNullableFilter<"rateLimit"> | bigint | number | null
}

export type rateLimitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrderInput | Prisma.SortOrder
  count?: Prisma.SortOrderInput | Prisma.SortOrder
  lastRequest?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type rateLimitWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.rateLimitWhereInput | Prisma.rateLimitWhereInput[]
  OR?: Prisma.rateLimitWhereInput[]
  NOT?: Prisma.rateLimitWhereInput | Prisma.rateLimitWhereInput[]
  key?: Prisma.StringNullableFilter<"rateLimit"> | string | null
  count?: Prisma.IntNullableFilter<"rateLimit"> | number | null
  lastRequest?: Prisma.BigIntNullableFilter<"rateLimit"> | bigint | number | null
}, "id">

export type rateLimitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrderInput | Prisma.SortOrder
  count?: Prisma.SortOrderInput | Prisma.SortOrder
  lastRequest?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.rateLimitCountOrderByAggregateInput
  _avg?: Prisma.rateLimitAvgOrderByAggregateInput
  _max?: Prisma.rateLimitMaxOrderByAggregateInput
  _min?: Prisma.rateLimitMinOrderByAggregateInput
  _sum?: Prisma.rateLimitSumOrderByAggregateInput
}

export type rateLimitScalarWhereWithAggregatesInput = {
  AND?: Prisma.rateLimitScalarWhereWithAggregatesInput | Prisma.rateLimitScalarWhereWithAggregatesInput[]
  OR?: Prisma.rateLimitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.rateLimitScalarWhereWithAggregatesInput | Prisma.rateLimitScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"rateLimit"> | string
  key?: Prisma.StringNullableWithAggregatesFilter<"rateLimit"> | string | null
  count?: Prisma.IntNullableWithAggregatesFilter<"rateLimit"> | number | null
  lastRequest?: Prisma.BigIntNullableWithAggregatesFilter<"rateLimit"> | bigint | number | null
}

export type rateLimitCreateInput = {
  id: string
  key?: string | null
  count?: number | null
  lastRequest?: bigint | number | null
}

export type rateLimitUncheckedCreateInput = {
  id: string
  key?: string | null
  count?: number | null
  lastRequest?: bigint | number | null
}

export type rateLimitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastRequest?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type rateLimitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastRequest?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type rateLimitCreateManyInput = {
  id: string
  key?: string | null
  count?: number | null
  lastRequest?: bigint | number | null
}

export type rateLimitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastRequest?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type rateLimitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  lastRequest?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type rateLimitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  count?: Prisma.SortOrder
  lastRequest?: Prisma.SortOrder
}

export type rateLimitAvgOrderByAggregateInput = {
  count?: Prisma.SortOrder
  lastRequest?: Prisma.SortOrder
}

export type rateLimitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  count?: Prisma.SortOrder
  lastRequest?: Prisma.SortOrder
}

export type rateLimitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  count?: Prisma.SortOrder
  lastRequest?: Prisma.SortOrder
}

export type rateLimitSumOrderByAggregateInput = {
  count?: Prisma.SortOrder
  lastRequest?: Prisma.SortOrder
}

export type NullableBigIntFieldUpdateOperationsInput = {
  set?: bigint | number | null
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}



export type rateLimitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  count?: boolean
  lastRequest?: boolean
}, ExtArgs["result"]["rateLimit"]>

export type rateLimitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  count?: boolean
  lastRequest?: boolean
}, ExtArgs["result"]["rateLimit"]>

export type rateLimitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  count?: boolean
  lastRequest?: boolean
}, ExtArgs["result"]["rateLimit"]>

export type rateLimitSelectScalar = {
  id?: boolean
  key?: boolean
  count?: boolean
  lastRequest?: boolean
}

export type rateLimitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "count" | "lastRequest", ExtArgs["result"]["rateLimit"]>

export type $rateLimitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "rateLimit"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    key: string | null
    count: number | null
    lastRequest: bigint | null
  }, ExtArgs["result"]["rateLimit"]>
  composites: {}
}

export type rateLimitGetPayload<S extends boolean | null | undefined | rateLimitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$rateLimitPayload, S>

export type rateLimitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<rateLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RateLimitCountAggregateInputType | true
  }

export interface rateLimitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rateLimit'], meta: { name: 'rateLimit' } }
  /**
   * Find zero or one RateLimit that matches the filter.
   * @param {rateLimitFindUniqueArgs} args - Arguments to find a RateLimit
   * @example
   * // Get one RateLimit
   * const rateLimit = await prisma.rateLimit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends rateLimitFindUniqueArgs>(args: Prisma.SelectSubset<T, rateLimitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RateLimit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {rateLimitFindUniqueOrThrowArgs} args - Arguments to find a RateLimit
   * @example
   * // Get one RateLimit
   * const rateLimit = await prisma.rateLimit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends rateLimitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, rateLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RateLimit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitFindFirstArgs} args - Arguments to find a RateLimit
   * @example
   * // Get one RateLimit
   * const rateLimit = await prisma.rateLimit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends rateLimitFindFirstArgs>(args?: Prisma.SelectSubset<T, rateLimitFindFirstArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RateLimit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitFindFirstOrThrowArgs} args - Arguments to find a RateLimit
   * @example
   * // Get one RateLimit
   * const rateLimit = await prisma.rateLimit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends rateLimitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, rateLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RateLimits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RateLimits
   * const rateLimits = await prisma.rateLimit.findMany()
   * 
   * // Get first 10 RateLimits
   * const rateLimits = await prisma.rateLimit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rateLimitWithIdOnly = await prisma.rateLimit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends rateLimitFindManyArgs>(args?: Prisma.SelectSubset<T, rateLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RateLimit.
   * @param {rateLimitCreateArgs} args - Arguments to create a RateLimit.
   * @example
   * // Create one RateLimit
   * const RateLimit = await prisma.rateLimit.create({
   *   data: {
   *     // ... data to create a RateLimit
   *   }
   * })
   * 
   */
  create<T extends rateLimitCreateArgs>(args: Prisma.SelectSubset<T, rateLimitCreateArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RateLimits.
   * @param {rateLimitCreateManyArgs} args - Arguments to create many RateLimits.
   * @example
   * // Create many RateLimits
   * const rateLimit = await prisma.rateLimit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends rateLimitCreateManyArgs>(args?: Prisma.SelectSubset<T, rateLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RateLimits and returns the data saved in the database.
   * @param {rateLimitCreateManyAndReturnArgs} args - Arguments to create many RateLimits.
   * @example
   * // Create many RateLimits
   * const rateLimit = await prisma.rateLimit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RateLimits and only return the `id`
   * const rateLimitWithIdOnly = await prisma.rateLimit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends rateLimitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, rateLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RateLimit.
   * @param {rateLimitDeleteArgs} args - Arguments to delete one RateLimit.
   * @example
   * // Delete one RateLimit
   * const RateLimit = await prisma.rateLimit.delete({
   *   where: {
   *     // ... filter to delete one RateLimit
   *   }
   * })
   * 
   */
  delete<T extends rateLimitDeleteArgs>(args: Prisma.SelectSubset<T, rateLimitDeleteArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RateLimit.
   * @param {rateLimitUpdateArgs} args - Arguments to update one RateLimit.
   * @example
   * // Update one RateLimit
   * const rateLimit = await prisma.rateLimit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends rateLimitUpdateArgs>(args: Prisma.SelectSubset<T, rateLimitUpdateArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RateLimits.
   * @param {rateLimitDeleteManyArgs} args - Arguments to filter RateLimits to delete.
   * @example
   * // Delete a few RateLimits
   * const { count } = await prisma.rateLimit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends rateLimitDeleteManyArgs>(args?: Prisma.SelectSubset<T, rateLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RateLimits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RateLimits
   * const rateLimit = await prisma.rateLimit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends rateLimitUpdateManyArgs>(args: Prisma.SelectSubset<T, rateLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RateLimits and returns the data updated in the database.
   * @param {rateLimitUpdateManyAndReturnArgs} args - Arguments to update many RateLimits.
   * @example
   * // Update many RateLimits
   * const rateLimit = await prisma.rateLimit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RateLimits and only return the `id`
   * const rateLimitWithIdOnly = await prisma.rateLimit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends rateLimitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, rateLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RateLimit.
   * @param {rateLimitUpsertArgs} args - Arguments to update or create a RateLimit.
   * @example
   * // Update or create a RateLimit
   * const rateLimit = await prisma.rateLimit.upsert({
   *   create: {
   *     // ... data to create a RateLimit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RateLimit we want to update
   *   }
   * })
   */
  upsert<T extends rateLimitUpsertArgs>(args: Prisma.SelectSubset<T, rateLimitUpsertArgs<ExtArgs>>): Prisma.Prisma__rateLimitClient<runtime.Types.Result.GetResult<Prisma.$rateLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RateLimits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitCountArgs} args - Arguments to filter RateLimits to count.
   * @example
   * // Count the number of RateLimits
   * const count = await prisma.rateLimit.count({
   *   where: {
   *     // ... the filter for the RateLimits we want to count
   *   }
   * })
  **/
  count<T extends rateLimitCountArgs>(
    args?: Prisma.Subset<T, rateLimitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RateLimitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RateLimit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RateLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RateLimitAggregateArgs>(args: Prisma.Subset<T, RateLimitAggregateArgs>): Prisma.PrismaPromise<GetRateLimitAggregateType<T>>

  /**
   * Group by RateLimit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rateLimitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends rateLimitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: rateLimitGroupByArgs['orderBy'] }
      : { orderBy?: rateLimitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, rateLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the rateLimit model
 */
readonly fields: rateLimitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for rateLimit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__rateLimitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the rateLimit model
 */
export interface rateLimitFieldRefs {
  readonly id: Prisma.FieldRef<"rateLimit", 'String'>
  readonly key: Prisma.FieldRef<"rateLimit", 'String'>
  readonly count: Prisma.FieldRef<"rateLimit", 'Int'>
  readonly lastRequest: Prisma.FieldRef<"rateLimit", 'BigInt'>
}
    

// Custom InputTypes
/**
 * rateLimit findUnique
 */
export type rateLimitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter, which rateLimit to fetch.
   */
  where: Prisma.rateLimitWhereUniqueInput
}

/**
 * rateLimit findUniqueOrThrow
 */
export type rateLimitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter, which rateLimit to fetch.
   */
  where: Prisma.rateLimitWhereUniqueInput
}

/**
 * rateLimit findFirst
 */
export type rateLimitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter, which rateLimit to fetch.
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rateLimits to fetch.
   */
  orderBy?: Prisma.rateLimitOrderByWithRelationInput | Prisma.rateLimitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for rateLimits.
   */
  cursor?: Prisma.rateLimitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rateLimits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rateLimits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of rateLimits.
   */
  distinct?: Prisma.RateLimitScalarFieldEnum | Prisma.RateLimitScalarFieldEnum[]
}

/**
 * rateLimit findFirstOrThrow
 */
export type rateLimitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter, which rateLimit to fetch.
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rateLimits to fetch.
   */
  orderBy?: Prisma.rateLimitOrderByWithRelationInput | Prisma.rateLimitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for rateLimits.
   */
  cursor?: Prisma.rateLimitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rateLimits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rateLimits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of rateLimits.
   */
  distinct?: Prisma.RateLimitScalarFieldEnum | Prisma.RateLimitScalarFieldEnum[]
}

/**
 * rateLimit findMany
 */
export type rateLimitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter, which rateLimits to fetch.
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of rateLimits to fetch.
   */
  orderBy?: Prisma.rateLimitOrderByWithRelationInput | Prisma.rateLimitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing rateLimits.
   */
  cursor?: Prisma.rateLimitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` rateLimits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` rateLimits.
   */
  skip?: number
  distinct?: Prisma.RateLimitScalarFieldEnum | Prisma.RateLimitScalarFieldEnum[]
}

/**
 * rateLimit create
 */
export type rateLimitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * The data needed to create a rateLimit.
   */
  data: Prisma.XOR<Prisma.rateLimitCreateInput, Prisma.rateLimitUncheckedCreateInput>
}

/**
 * rateLimit createMany
 */
export type rateLimitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many rateLimits.
   */
  data: Prisma.rateLimitCreateManyInput | Prisma.rateLimitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * rateLimit createManyAndReturn
 */
export type rateLimitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * The data used to create many rateLimits.
   */
  data: Prisma.rateLimitCreateManyInput | Prisma.rateLimitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * rateLimit update
 */
export type rateLimitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * The data needed to update a rateLimit.
   */
  data: Prisma.XOR<Prisma.rateLimitUpdateInput, Prisma.rateLimitUncheckedUpdateInput>
  /**
   * Choose, which rateLimit to update.
   */
  where: Prisma.rateLimitWhereUniqueInput
}

/**
 * rateLimit updateMany
 */
export type rateLimitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update rateLimits.
   */
  data: Prisma.XOR<Prisma.rateLimitUpdateManyMutationInput, Prisma.rateLimitUncheckedUpdateManyInput>
  /**
   * Filter which rateLimits to update
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * Limit how many rateLimits to update.
   */
  limit?: number
}

/**
 * rateLimit updateManyAndReturn
 */
export type rateLimitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * The data used to update rateLimits.
   */
  data: Prisma.XOR<Prisma.rateLimitUpdateManyMutationInput, Prisma.rateLimitUncheckedUpdateManyInput>
  /**
   * Filter which rateLimits to update
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * Limit how many rateLimits to update.
   */
  limit?: number
}

/**
 * rateLimit upsert
 */
export type rateLimitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * The filter to search for the rateLimit to update in case it exists.
   */
  where: Prisma.rateLimitWhereUniqueInput
  /**
   * In case the rateLimit found by the `where` argument doesn't exist, create a new rateLimit with this data.
   */
  create: Prisma.XOR<Prisma.rateLimitCreateInput, Prisma.rateLimitUncheckedCreateInput>
  /**
   * In case the rateLimit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.rateLimitUpdateInput, Prisma.rateLimitUncheckedUpdateInput>
}

/**
 * rateLimit delete
 */
export type rateLimitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
  /**
   * Filter which rateLimit to delete.
   */
  where: Prisma.rateLimitWhereUniqueInput
}

/**
 * rateLimit deleteMany
 */
export type rateLimitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which rateLimits to delete
   */
  where?: Prisma.rateLimitWhereInput
  /**
   * Limit how many rateLimits to delete.
   */
  limit?: number
}

/**
 * rateLimit without action
 */
export type rateLimitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the rateLimit
   */
  select?: Prisma.rateLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the rateLimit
   */
  omit?: Prisma.rateLimitOmit<ExtArgs> | null
}
