
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GrandLaunchingRegistration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GrandLaunchingRegistration
 * 
 */
export type GrandLaunchingRegistrationModel = runtime.Types.Result.DefaultSelection<Prisma.$GrandLaunchingRegistrationPayload>

export type AggregateGrandLaunchingRegistration = {
  _count: GrandLaunchingRegistrationCountAggregateOutputType | null
  _min: GrandLaunchingRegistrationMinAggregateOutputType | null
  _max: GrandLaunchingRegistrationMaxAggregateOutputType | null
}

export type GrandLaunchingRegistrationMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  knowEventSource: $Enums.KNOW_EVENT_SOURCE | null
  eventRegistrationId: string | null
}

export type GrandLaunchingRegistrationMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  knowEventSource: $Enums.KNOW_EVENT_SOURCE | null
  eventRegistrationId: string | null
}

export type GrandLaunchingRegistrationCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  knowEventSource: number
  eventRegistrationId: number
  _all: number
}


export type GrandLaunchingRegistrationMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  knowEventSource?: true
  eventRegistrationId?: true
}

export type GrandLaunchingRegistrationMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  knowEventSource?: true
  eventRegistrationId?: true
}

export type GrandLaunchingRegistrationCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  knowEventSource?: true
  eventRegistrationId?: true
  _all?: true
}

export type GrandLaunchingRegistrationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GrandLaunchingRegistration to aggregate.
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GrandLaunchingRegistrations to fetch.
   */
  orderBy?: Prisma.GrandLaunchingRegistrationOrderByWithRelationInput | Prisma.GrandLaunchingRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GrandLaunchingRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GrandLaunchingRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GrandLaunchingRegistrations
  **/
  _count?: true | GrandLaunchingRegistrationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GrandLaunchingRegistrationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GrandLaunchingRegistrationMaxAggregateInputType
}

export type GetGrandLaunchingRegistrationAggregateType<T extends GrandLaunchingRegistrationAggregateArgs> = {
      [P in keyof T & keyof AggregateGrandLaunchingRegistration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGrandLaunchingRegistration[P]>
    : Prisma.GetScalarType<T[P], AggregateGrandLaunchingRegistration[P]>
}




export type GrandLaunchingRegistrationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  orderBy?: Prisma.GrandLaunchingRegistrationOrderByWithAggregationInput | Prisma.GrandLaunchingRegistrationOrderByWithAggregationInput[]
  by: Prisma.GrandLaunchingRegistrationScalarFieldEnum[] | Prisma.GrandLaunchingRegistrationScalarFieldEnum
  having?: Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GrandLaunchingRegistrationCountAggregateInputType | true
  _min?: GrandLaunchingRegistrationMinAggregateInputType
  _max?: GrandLaunchingRegistrationMaxAggregateInputType
}

export type GrandLaunchingRegistrationGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId: string
  _count: GrandLaunchingRegistrationCountAggregateOutputType | null
  _min: GrandLaunchingRegistrationMinAggregateOutputType | null
  _max: GrandLaunchingRegistrationMaxAggregateOutputType | null
}

type GetGrandLaunchingRegistrationGroupByPayload<T extends GrandLaunchingRegistrationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GrandLaunchingRegistrationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GrandLaunchingRegistrationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GrandLaunchingRegistrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GrandLaunchingRegistrationGroupByOutputType[P]>
      }
    >
  > 



export type GrandLaunchingRegistrationWhereInput = {
  AND?: Prisma.GrandLaunchingRegistrationWhereInput | Prisma.GrandLaunchingRegistrationWhereInput[]
  OR?: Prisma.GrandLaunchingRegistrationWhereInput[]
  NOT?: Prisma.GrandLaunchingRegistrationWhereInput | Prisma.GrandLaunchingRegistrationWhereInput[]
  id?: Prisma.StringFilter<"GrandLaunchingRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"GrandLaunchingRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GrandLaunchingRegistration"> | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFilter<"GrandLaunchingRegistration"> | $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId?: Prisma.StringFilter<"GrandLaunchingRegistration"> | string
  EventRegistration?: Prisma.XOR<Prisma.EventRegistrationScalarRelationFilter, Prisma.EventRegistrationWhereInput>
}

export type GrandLaunchingRegistrationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  knowEventSource?: Prisma.SortOrder
  eventRegistrationId?: Prisma.SortOrder
  EventRegistration?: Prisma.EventRegistrationOrderByWithRelationInput
}

export type GrandLaunchingRegistrationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  eventRegistrationId?: string
  AND?: Prisma.GrandLaunchingRegistrationWhereInput | Prisma.GrandLaunchingRegistrationWhereInput[]
  OR?: Prisma.GrandLaunchingRegistrationWhereInput[]
  NOT?: Prisma.GrandLaunchingRegistrationWhereInput | Prisma.GrandLaunchingRegistrationWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"GrandLaunchingRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GrandLaunchingRegistration"> | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFilter<"GrandLaunchingRegistration"> | $Enums.KNOW_EVENT_SOURCE
  EventRegistration?: Prisma.XOR<Prisma.EventRegistrationScalarRelationFilter, Prisma.EventRegistrationWhereInput>
}, "id" | "eventRegistrationId">

export type GrandLaunchingRegistrationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  knowEventSource?: Prisma.SortOrder
  eventRegistrationId?: Prisma.SortOrder
  _count?: Prisma.GrandLaunchingRegistrationCountOrderByAggregateInput
  _max?: Prisma.GrandLaunchingRegistrationMaxOrderByAggregateInput
  _min?: Prisma.GrandLaunchingRegistrationMinOrderByAggregateInput
}

export type GrandLaunchingRegistrationScalarWhereWithAggregatesInput = {
  AND?: Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput | Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput[]
  OR?: Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput | Prisma.GrandLaunchingRegistrationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GrandLaunchingRegistration"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GrandLaunchingRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GrandLaunchingRegistration"> | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEWithAggregatesFilter<"GrandLaunchingRegistration"> | $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId?: Prisma.StringWithAggregatesFilter<"GrandLaunchingRegistration"> | string
}

export type GrandLaunchingRegistrationCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
  EventRegistration: Prisma.EventRegistrationCreateNestedOneWithoutGrandLaunchingRegistrationInput
}

export type GrandLaunchingRegistrationUncheckedCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId: string
}

export type GrandLaunchingRegistrationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
  EventRegistration?: Prisma.EventRegistrationUpdateOneRequiredWithoutGrandLaunchingRegistrationNestedInput
}

export type GrandLaunchingRegistrationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GrandLaunchingRegistrationCreateManyInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId: string
}

export type GrandLaunchingRegistrationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
}

export type GrandLaunchingRegistrationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
  eventRegistrationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GrandLaunchingRegistrationNullableScalarRelationFilter = {
  is?: Prisma.GrandLaunchingRegistrationWhereInput | null
  isNot?: Prisma.GrandLaunchingRegistrationWhereInput | null
}

export type GrandLaunchingRegistrationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  knowEventSource?: Prisma.SortOrder
  eventRegistrationId?: Prisma.SortOrder
}

export type GrandLaunchingRegistrationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  knowEventSource?: Prisma.SortOrder
  eventRegistrationId?: Prisma.SortOrder
}

export type GrandLaunchingRegistrationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  knowEventSource?: Prisma.SortOrder
  eventRegistrationId?: Prisma.SortOrder
}

export type GrandLaunchingRegistrationCreateNestedOneWithoutEventRegistrationInput = {
  create?: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
  connectOrCreate?: Prisma.GrandLaunchingRegistrationCreateOrConnectWithoutEventRegistrationInput
  connect?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

export type GrandLaunchingRegistrationUncheckedCreateNestedOneWithoutEventRegistrationInput = {
  create?: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
  connectOrCreate?: Prisma.GrandLaunchingRegistrationCreateOrConnectWithoutEventRegistrationInput
  connect?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

export type GrandLaunchingRegistrationUpdateOneWithoutEventRegistrationNestedInput = {
  create?: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
  connectOrCreate?: Prisma.GrandLaunchingRegistrationCreateOrConnectWithoutEventRegistrationInput
  upsert?: Prisma.GrandLaunchingRegistrationUpsertWithoutEventRegistrationInput
  disconnect?: Prisma.GrandLaunchingRegistrationWhereInput | boolean
  delete?: Prisma.GrandLaunchingRegistrationWhereInput | boolean
  connect?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateToOneWithWhereWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUpdateWithoutEventRegistrationInput>, Prisma.GrandLaunchingRegistrationUncheckedUpdateWithoutEventRegistrationInput>
}

export type GrandLaunchingRegistrationUncheckedUpdateOneWithoutEventRegistrationNestedInput = {
  create?: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
  connectOrCreate?: Prisma.GrandLaunchingRegistrationCreateOrConnectWithoutEventRegistrationInput
  upsert?: Prisma.GrandLaunchingRegistrationUpsertWithoutEventRegistrationInput
  disconnect?: Prisma.GrandLaunchingRegistrationWhereInput | boolean
  delete?: Prisma.GrandLaunchingRegistrationWhereInput | boolean
  connect?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateToOneWithWhereWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUpdateWithoutEventRegistrationInput>, Prisma.GrandLaunchingRegistrationUncheckedUpdateWithoutEventRegistrationInput>
}

export type EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput = {
  set?: $Enums.KNOW_EVENT_SOURCE
}

export type GrandLaunchingRegistrationCreateWithoutEventRegistrationInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
}

export type GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  knowEventSource: $Enums.KNOW_EVENT_SOURCE
}

export type GrandLaunchingRegistrationCreateOrConnectWithoutEventRegistrationInput = {
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  create: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
}

export type GrandLaunchingRegistrationUpsertWithoutEventRegistrationInput = {
  update: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateWithoutEventRegistrationInput>
  create: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedCreateWithoutEventRegistrationInput>
  where?: Prisma.GrandLaunchingRegistrationWhereInput
}

export type GrandLaunchingRegistrationUpdateToOneWithWhereWithoutEventRegistrationInput = {
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  data: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateWithoutEventRegistrationInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateWithoutEventRegistrationInput>
}

export type GrandLaunchingRegistrationUpdateWithoutEventRegistrationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
}

export type GrandLaunchingRegistrationUncheckedUpdateWithoutEventRegistrationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  knowEventSource?: Prisma.EnumKNOW_EVENT_SOURCEFieldUpdateOperationsInput | $Enums.KNOW_EVENT_SOURCE
}



export type GrandLaunchingRegistrationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  knowEventSource?: boolean
  eventRegistrationId?: boolean
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grandLaunchingRegistration"]>

export type GrandLaunchingRegistrationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  knowEventSource?: boolean
  eventRegistrationId?: boolean
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grandLaunchingRegistration"]>

export type GrandLaunchingRegistrationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  knowEventSource?: boolean
  eventRegistrationId?: boolean
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["grandLaunchingRegistration"]>

export type GrandLaunchingRegistrationSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  knowEventSource?: boolean
  eventRegistrationId?: boolean
}

export type GrandLaunchingRegistrationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "knowEventSource" | "eventRegistrationId", ExtArgs["result"]["grandLaunchingRegistration"]>
export type GrandLaunchingRegistrationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}
export type GrandLaunchingRegistrationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}
export type GrandLaunchingRegistrationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EventRegistration?: boolean | Prisma.EventRegistrationDefaultArgs<ExtArgs>
}

export type $GrandLaunchingRegistrationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GrandLaunchingRegistration"
  objects: {
    EventRegistration: Prisma.$EventRegistrationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    knowEventSource: $Enums.KNOW_EVENT_SOURCE
    eventRegistrationId: string
  }, ExtArgs["result"]["grandLaunchingRegistration"]>
  composites: {}
}

export type GrandLaunchingRegistrationGetPayload<S extends boolean | null | undefined | GrandLaunchingRegistrationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload, S>

export type GrandLaunchingRegistrationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GrandLaunchingRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GrandLaunchingRegistrationCountAggregateInputType | true
  }

export interface GrandLaunchingRegistrationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrandLaunchingRegistration'], meta: { name: 'GrandLaunchingRegistration' } }
  /**
   * Find zero or one GrandLaunchingRegistration that matches the filter.
   * @param {GrandLaunchingRegistrationFindUniqueArgs} args - Arguments to find a GrandLaunchingRegistration
   * @example
   * // Get one GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GrandLaunchingRegistrationFindUniqueArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GrandLaunchingRegistration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GrandLaunchingRegistrationFindUniqueOrThrowArgs} args - Arguments to find a GrandLaunchingRegistration
   * @example
   * // Get one GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GrandLaunchingRegistrationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GrandLaunchingRegistration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationFindFirstArgs} args - Arguments to find a GrandLaunchingRegistration
   * @example
   * // Get one GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GrandLaunchingRegistrationFindFirstArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationFindFirstArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GrandLaunchingRegistration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationFindFirstOrThrowArgs} args - Arguments to find a GrandLaunchingRegistration
   * @example
   * // Get one GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GrandLaunchingRegistrationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GrandLaunchingRegistrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GrandLaunchingRegistrations
   * const grandLaunchingRegistrations = await prisma.grandLaunchingRegistration.findMany()
   * 
   * // Get first 10 GrandLaunchingRegistrations
   * const grandLaunchingRegistrations = await prisma.grandLaunchingRegistration.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const grandLaunchingRegistrationWithIdOnly = await prisma.grandLaunchingRegistration.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GrandLaunchingRegistrationFindManyArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GrandLaunchingRegistration.
   * @param {GrandLaunchingRegistrationCreateArgs} args - Arguments to create a GrandLaunchingRegistration.
   * @example
   * // Create one GrandLaunchingRegistration
   * const GrandLaunchingRegistration = await prisma.grandLaunchingRegistration.create({
   *   data: {
   *     // ... data to create a GrandLaunchingRegistration
   *   }
   * })
   * 
   */
  create<T extends GrandLaunchingRegistrationCreateArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationCreateArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GrandLaunchingRegistrations.
   * @param {GrandLaunchingRegistrationCreateManyArgs} args - Arguments to create many GrandLaunchingRegistrations.
   * @example
   * // Create many GrandLaunchingRegistrations
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GrandLaunchingRegistrationCreateManyArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GrandLaunchingRegistrations and returns the data saved in the database.
   * @param {GrandLaunchingRegistrationCreateManyAndReturnArgs} args - Arguments to create many GrandLaunchingRegistrations.
   * @example
   * // Create many GrandLaunchingRegistrations
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GrandLaunchingRegistrations and only return the `id`
   * const grandLaunchingRegistrationWithIdOnly = await prisma.grandLaunchingRegistration.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GrandLaunchingRegistrationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GrandLaunchingRegistration.
   * @param {GrandLaunchingRegistrationDeleteArgs} args - Arguments to delete one GrandLaunchingRegistration.
   * @example
   * // Delete one GrandLaunchingRegistration
   * const GrandLaunchingRegistration = await prisma.grandLaunchingRegistration.delete({
   *   where: {
   *     // ... filter to delete one GrandLaunchingRegistration
   *   }
   * })
   * 
   */
  delete<T extends GrandLaunchingRegistrationDeleteArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationDeleteArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GrandLaunchingRegistration.
   * @param {GrandLaunchingRegistrationUpdateArgs} args - Arguments to update one GrandLaunchingRegistration.
   * @example
   * // Update one GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GrandLaunchingRegistrationUpdateArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationUpdateArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GrandLaunchingRegistrations.
   * @param {GrandLaunchingRegistrationDeleteManyArgs} args - Arguments to filter GrandLaunchingRegistrations to delete.
   * @example
   * // Delete a few GrandLaunchingRegistrations
   * const { count } = await prisma.grandLaunchingRegistration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GrandLaunchingRegistrationDeleteManyArgs>(args?: Prisma.SelectSubset<T, GrandLaunchingRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GrandLaunchingRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GrandLaunchingRegistrations
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GrandLaunchingRegistrationUpdateManyArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GrandLaunchingRegistrations and returns the data updated in the database.
   * @param {GrandLaunchingRegistrationUpdateManyAndReturnArgs} args - Arguments to update many GrandLaunchingRegistrations.
   * @example
   * // Update many GrandLaunchingRegistrations
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GrandLaunchingRegistrations and only return the `id`
   * const grandLaunchingRegistrationWithIdOnly = await prisma.grandLaunchingRegistration.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GrandLaunchingRegistrationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GrandLaunchingRegistration.
   * @param {GrandLaunchingRegistrationUpsertArgs} args - Arguments to update or create a GrandLaunchingRegistration.
   * @example
   * // Update or create a GrandLaunchingRegistration
   * const grandLaunchingRegistration = await prisma.grandLaunchingRegistration.upsert({
   *   create: {
   *     // ... data to create a GrandLaunchingRegistration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GrandLaunchingRegistration we want to update
   *   }
   * })
   */
  upsert<T extends GrandLaunchingRegistrationUpsertArgs>(args: Prisma.SelectSubset<T, GrandLaunchingRegistrationUpsertArgs<ExtArgs>>): Prisma.Prisma__GrandLaunchingRegistrationClient<runtime.Types.Result.GetResult<Prisma.$GrandLaunchingRegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GrandLaunchingRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationCountArgs} args - Arguments to filter GrandLaunchingRegistrations to count.
   * @example
   * // Count the number of GrandLaunchingRegistrations
   * const count = await prisma.grandLaunchingRegistration.count({
   *   where: {
   *     // ... the filter for the GrandLaunchingRegistrations we want to count
   *   }
   * })
  **/
  count<T extends GrandLaunchingRegistrationCountArgs>(
    args?: Prisma.Subset<T, GrandLaunchingRegistrationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GrandLaunchingRegistrationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GrandLaunchingRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GrandLaunchingRegistrationAggregateArgs>(args: Prisma.Subset<T, GrandLaunchingRegistrationAggregateArgs>): Prisma.PrismaPromise<GetGrandLaunchingRegistrationAggregateType<T>>

  /**
   * Group by GrandLaunchingRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GrandLaunchingRegistrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GrandLaunchingRegistrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GrandLaunchingRegistrationGroupByArgs['orderBy'] }
      : { orderBy?: GrandLaunchingRegistrationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GrandLaunchingRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrandLaunchingRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GrandLaunchingRegistration model
 */
readonly fields: GrandLaunchingRegistrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GrandLaunchingRegistration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GrandLaunchingRegistrationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  EventRegistration<T extends Prisma.EventRegistrationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventRegistrationDefaultArgs<ExtArgs>>): Prisma.Prisma__EventRegistrationClient<runtime.Types.Result.GetResult<Prisma.$EventRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GrandLaunchingRegistration model
 */
export interface GrandLaunchingRegistrationFieldRefs {
  readonly id: Prisma.FieldRef<"GrandLaunchingRegistration", 'String'>
  readonly createdAt: Prisma.FieldRef<"GrandLaunchingRegistration", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GrandLaunchingRegistration", 'DateTime'>
  readonly knowEventSource: Prisma.FieldRef<"GrandLaunchingRegistration", 'KNOW_EVENT_SOURCE'>
  readonly eventRegistrationId: Prisma.FieldRef<"GrandLaunchingRegistration", 'String'>
}
    

// Custom InputTypes
/**
 * GrandLaunchingRegistration findUnique
 */
export type GrandLaunchingRegistrationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which GrandLaunchingRegistration to fetch.
   */
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

/**
 * GrandLaunchingRegistration findUniqueOrThrow
 */
export type GrandLaunchingRegistrationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which GrandLaunchingRegistration to fetch.
   */
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

/**
 * GrandLaunchingRegistration findFirst
 */
export type GrandLaunchingRegistrationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which GrandLaunchingRegistration to fetch.
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GrandLaunchingRegistrations to fetch.
   */
  orderBy?: Prisma.GrandLaunchingRegistrationOrderByWithRelationInput | Prisma.GrandLaunchingRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GrandLaunchingRegistrations.
   */
  cursor?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GrandLaunchingRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GrandLaunchingRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GrandLaunchingRegistrations.
   */
  distinct?: Prisma.GrandLaunchingRegistrationScalarFieldEnum | Prisma.GrandLaunchingRegistrationScalarFieldEnum[]
}

/**
 * GrandLaunchingRegistration findFirstOrThrow
 */
export type GrandLaunchingRegistrationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which GrandLaunchingRegistration to fetch.
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GrandLaunchingRegistrations to fetch.
   */
  orderBy?: Prisma.GrandLaunchingRegistrationOrderByWithRelationInput | Prisma.GrandLaunchingRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GrandLaunchingRegistrations.
   */
  cursor?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GrandLaunchingRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GrandLaunchingRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GrandLaunchingRegistrations.
   */
  distinct?: Prisma.GrandLaunchingRegistrationScalarFieldEnum | Prisma.GrandLaunchingRegistrationScalarFieldEnum[]
}

/**
 * GrandLaunchingRegistration findMany
 */
export type GrandLaunchingRegistrationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which GrandLaunchingRegistrations to fetch.
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GrandLaunchingRegistrations to fetch.
   */
  orderBy?: Prisma.GrandLaunchingRegistrationOrderByWithRelationInput | Prisma.GrandLaunchingRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GrandLaunchingRegistrations.
   */
  cursor?: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GrandLaunchingRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GrandLaunchingRegistrations.
   */
  skip?: number
  distinct?: Prisma.GrandLaunchingRegistrationScalarFieldEnum | Prisma.GrandLaunchingRegistrationScalarFieldEnum[]
}

/**
 * GrandLaunchingRegistration create
 */
export type GrandLaunchingRegistrationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to create a GrandLaunchingRegistration.
   */
  data: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateInput, Prisma.GrandLaunchingRegistrationUncheckedCreateInput>
}

/**
 * GrandLaunchingRegistration createMany
 */
export type GrandLaunchingRegistrationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GrandLaunchingRegistrations.
   */
  data: Prisma.GrandLaunchingRegistrationCreateManyInput | Prisma.GrandLaunchingRegistrationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GrandLaunchingRegistration createManyAndReturn
 */
export type GrandLaunchingRegistrationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * The data used to create many GrandLaunchingRegistrations.
   */
  data: Prisma.GrandLaunchingRegistrationCreateManyInput | Prisma.GrandLaunchingRegistrationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GrandLaunchingRegistration update
 */
export type GrandLaunchingRegistrationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to update a GrandLaunchingRegistration.
   */
  data: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateInput>
  /**
   * Choose, which GrandLaunchingRegistration to update.
   */
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

/**
 * GrandLaunchingRegistration updateMany
 */
export type GrandLaunchingRegistrationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GrandLaunchingRegistrations.
   */
  data: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateManyMutationInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which GrandLaunchingRegistrations to update
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * Limit how many GrandLaunchingRegistrations to update.
   */
  limit?: number
}

/**
 * GrandLaunchingRegistration updateManyAndReturn
 */
export type GrandLaunchingRegistrationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * The data used to update GrandLaunchingRegistrations.
   */
  data: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateManyMutationInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which GrandLaunchingRegistrations to update
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * Limit how many GrandLaunchingRegistrations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GrandLaunchingRegistration upsert
 */
export type GrandLaunchingRegistrationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * The filter to search for the GrandLaunchingRegistration to update in case it exists.
   */
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
  /**
   * In case the GrandLaunchingRegistration found by the `where` argument doesn't exist, create a new GrandLaunchingRegistration with this data.
   */
  create: Prisma.XOR<Prisma.GrandLaunchingRegistrationCreateInput, Prisma.GrandLaunchingRegistrationUncheckedCreateInput>
  /**
   * In case the GrandLaunchingRegistration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GrandLaunchingRegistrationUpdateInput, Prisma.GrandLaunchingRegistrationUncheckedUpdateInput>
}

/**
 * GrandLaunchingRegistration delete
 */
export type GrandLaunchingRegistrationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
  /**
   * Filter which GrandLaunchingRegistration to delete.
   */
  where: Prisma.GrandLaunchingRegistrationWhereUniqueInput
}

/**
 * GrandLaunchingRegistration deleteMany
 */
export type GrandLaunchingRegistrationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GrandLaunchingRegistrations to delete
   */
  where?: Prisma.GrandLaunchingRegistrationWhereInput
  /**
   * Limit how many GrandLaunchingRegistrations to delete.
   */
  limit?: number
}

/**
 * GrandLaunchingRegistration without action
 */
export type GrandLaunchingRegistrationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GrandLaunchingRegistration
   */
  select?: Prisma.GrandLaunchingRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GrandLaunchingRegistration
   */
  omit?: Prisma.GrandLaunchingRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GrandLaunchingRegistrationInclude<ExtArgs> | null
}
