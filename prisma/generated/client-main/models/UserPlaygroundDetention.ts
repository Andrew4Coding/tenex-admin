
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserPlaygroundDetention` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserPlaygroundDetention
 * 
 */
export type UserPlaygroundDetentionModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPlaygroundDetentionPayload>

export type AggregateUserPlaygroundDetention = {
  _count: UserPlaygroundDetentionCountAggregateOutputType | null
  _avg: UserPlaygroundDetentionAvgAggregateOutputType | null
  _sum: UserPlaygroundDetentionSumAggregateOutputType | null
  _min: UserPlaygroundDetentionMinAggregateOutputType | null
  _max: UserPlaygroundDetentionMaxAggregateOutputType | null
}

export type UserPlaygroundDetentionAvgAggregateOutputType = {
  penaltyPoint: number | null
}

export type UserPlaygroundDetentionSumAggregateOutputType = {
  penaltyPoint: number | null
}

export type UserPlaygroundDetentionMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  penaltyPoint: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isRead: boolean | null
  state: $Enums.DETENTION_STATE | null
}

export type UserPlaygroundDetentionMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  description: string | null
  penaltyPoint: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isRead: boolean | null
  state: $Enums.DETENTION_STATE | null
}

export type UserPlaygroundDetentionCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  description: number
  penaltyPoint: number
  createdAt: number
  updatedAt: number
  isRead: number
  state: number
  _all: number
}


export type UserPlaygroundDetentionAvgAggregateInputType = {
  penaltyPoint?: true
}

export type UserPlaygroundDetentionSumAggregateInputType = {
  penaltyPoint?: true
}

export type UserPlaygroundDetentionMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  penaltyPoint?: true
  createdAt?: true
  updatedAt?: true
  isRead?: true
  state?: true
}

export type UserPlaygroundDetentionMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  penaltyPoint?: true
  createdAt?: true
  updatedAt?: true
  isRead?: true
  state?: true
}

export type UserPlaygroundDetentionCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  description?: true
  penaltyPoint?: true
  createdAt?: true
  updatedAt?: true
  isRead?: true
  state?: true
  _all?: true
}

export type UserPlaygroundDetentionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlaygroundDetention to aggregate.
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygroundDetentions to fetch.
   */
  orderBy?: Prisma.UserPlaygroundDetentionOrderByWithRelationInput | Prisma.UserPlaygroundDetentionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygroundDetentions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygroundDetentions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserPlaygroundDetentions
  **/
  _count?: true | UserPlaygroundDetentionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserPlaygroundDetentionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserPlaygroundDetentionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserPlaygroundDetentionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserPlaygroundDetentionMaxAggregateInputType
}

export type GetUserPlaygroundDetentionAggregateType<T extends UserPlaygroundDetentionAggregateArgs> = {
      [P in keyof T & keyof AggregateUserPlaygroundDetention]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPlaygroundDetention[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPlaygroundDetention[P]>
}




export type UserPlaygroundDetentionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPlaygroundDetentionWhereInput
  orderBy?: Prisma.UserPlaygroundDetentionOrderByWithAggregationInput | Prisma.UserPlaygroundDetentionOrderByWithAggregationInput[]
  by: Prisma.UserPlaygroundDetentionScalarFieldEnum[] | Prisma.UserPlaygroundDetentionScalarFieldEnum
  having?: Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserPlaygroundDetentionCountAggregateInputType | true
  _avg?: UserPlaygroundDetentionAvgAggregateInputType
  _sum?: UserPlaygroundDetentionSumAggregateInputType
  _min?: UserPlaygroundDetentionMinAggregateInputType
  _max?: UserPlaygroundDetentionMaxAggregateInputType
}

export type UserPlaygroundDetentionGroupByOutputType = {
  id: string
  userPlaygroundId: string
  description: string
  penaltyPoint: number
  createdAt: Date
  updatedAt: Date
  isRead: boolean
  state: $Enums.DETENTION_STATE
  _count: UserPlaygroundDetentionCountAggregateOutputType | null
  _avg: UserPlaygroundDetentionAvgAggregateOutputType | null
  _sum: UserPlaygroundDetentionSumAggregateOutputType | null
  _min: UserPlaygroundDetentionMinAggregateOutputType | null
  _max: UserPlaygroundDetentionMaxAggregateOutputType | null
}

type GetUserPlaygroundDetentionGroupByPayload<T extends UserPlaygroundDetentionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserPlaygroundDetentionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserPlaygroundDetentionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserPlaygroundDetentionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserPlaygroundDetentionGroupByOutputType[P]>
      }
    >
  > 



export type UserPlaygroundDetentionWhereInput = {
  AND?: Prisma.UserPlaygroundDetentionWhereInput | Prisma.UserPlaygroundDetentionWhereInput[]
  OR?: Prisma.UserPlaygroundDetentionWhereInput[]
  NOT?: Prisma.UserPlaygroundDetentionWhereInput | Prisma.UserPlaygroundDetentionWhereInput[]
  id?: Prisma.StringFilter<"UserPlaygroundDetention"> | string
  userPlaygroundId?: Prisma.StringFilter<"UserPlaygroundDetention"> | string
  description?: Prisma.StringFilter<"UserPlaygroundDetention"> | string
  penaltyPoint?: Prisma.IntFilter<"UserPlaygroundDetention"> | number
  createdAt?: Prisma.DateTimeFilter<"UserPlaygroundDetention"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlaygroundDetention"> | Date | string
  isRead?: Prisma.BoolFilter<"UserPlaygroundDetention"> | boolean
  state?: Prisma.EnumDETENTION_STATEFilter<"UserPlaygroundDetention"> | $Enums.DETENTION_STATE
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type UserPlaygroundDetentionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  penaltyPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isRead?: Prisma.SortOrder
  state?: Prisma.SortOrder
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type UserPlaygroundDetentionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userPlaygroundId?: string
  AND?: Prisma.UserPlaygroundDetentionWhereInput | Prisma.UserPlaygroundDetentionWhereInput[]
  OR?: Prisma.UserPlaygroundDetentionWhereInput[]
  NOT?: Prisma.UserPlaygroundDetentionWhereInput | Prisma.UserPlaygroundDetentionWhereInput[]
  description?: Prisma.StringFilter<"UserPlaygroundDetention"> | string
  penaltyPoint?: Prisma.IntFilter<"UserPlaygroundDetention"> | number
  createdAt?: Prisma.DateTimeFilter<"UserPlaygroundDetention"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlaygroundDetention"> | Date | string
  isRead?: Prisma.BoolFilter<"UserPlaygroundDetention"> | boolean
  state?: Prisma.EnumDETENTION_STATEFilter<"UserPlaygroundDetention"> | $Enums.DETENTION_STATE
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id" | "userPlaygroundId">

export type UserPlaygroundDetentionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  penaltyPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isRead?: Prisma.SortOrder
  state?: Prisma.SortOrder
  _count?: Prisma.UserPlaygroundDetentionCountOrderByAggregateInput
  _avg?: Prisma.UserPlaygroundDetentionAvgOrderByAggregateInput
  _max?: Prisma.UserPlaygroundDetentionMaxOrderByAggregateInput
  _min?: Prisma.UserPlaygroundDetentionMinOrderByAggregateInput
  _sum?: Prisma.UserPlaygroundDetentionSumOrderByAggregateInput
}

export type UserPlaygroundDetentionScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput | Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput | Prisma.UserPlaygroundDetentionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserPlaygroundDetention"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"UserPlaygroundDetention"> | string
  description?: Prisma.StringWithAggregatesFilter<"UserPlaygroundDetention"> | string
  penaltyPoint?: Prisma.IntWithAggregatesFilter<"UserPlaygroundDetention"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlaygroundDetention"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlaygroundDetention"> | Date | string
  isRead?: Prisma.BoolWithAggregatesFilter<"UserPlaygroundDetention"> | boolean
  state?: Prisma.EnumDETENTION_STATEWithAggregatesFilter<"UserPlaygroundDetention"> | $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionCreateInput = {
  id: string
  description: string
  penaltyPoint: number
  createdAt?: Date | string
  updatedAt: Date | string
  isRead?: boolean
  state?: $Enums.DETENTION_STATE
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutUserPlaygroundDetentionInput
}

export type UserPlaygroundDetentionUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  description: string
  penaltyPoint: number
  createdAt?: Date | string
  updatedAt: Date | string
  isRead?: boolean
  state?: $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutUserPlaygroundDetentionNestedInput
}

export type UserPlaygroundDetentionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionCreateManyInput = {
  id: string
  userPlaygroundId: string
  description: string
  penaltyPoint: number
  createdAt?: Date | string
  updatedAt: Date | string
  isRead?: boolean
  state?: $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionNullableScalarRelationFilter = {
  is?: Prisma.UserPlaygroundDetentionWhereInput | null
  isNot?: Prisma.UserPlaygroundDetentionWhereInput | null
}

export type UserPlaygroundDetentionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  penaltyPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isRead?: Prisma.SortOrder
  state?: Prisma.SortOrder
}

export type UserPlaygroundDetentionAvgOrderByAggregateInput = {
  penaltyPoint?: Prisma.SortOrder
}

export type UserPlaygroundDetentionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  penaltyPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isRead?: Prisma.SortOrder
  state?: Prisma.SortOrder
}

export type UserPlaygroundDetentionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  penaltyPoint?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isRead?: Prisma.SortOrder
  state?: Prisma.SortOrder
}

export type UserPlaygroundDetentionSumOrderByAggregateInput = {
  penaltyPoint?: Prisma.SortOrder
}

export type UserPlaygroundDetentionCreateNestedOneWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
  connectOrCreate?: Prisma.UserPlaygroundDetentionCreateOrConnectWithoutUserPlaygroundInput
  connect?: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

export type UserPlaygroundDetentionUncheckedCreateNestedOneWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
  connectOrCreate?: Prisma.UserPlaygroundDetentionCreateOrConnectWithoutUserPlaygroundInput
  connect?: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

export type UserPlaygroundDetentionUpdateOneWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
  connectOrCreate?: Prisma.UserPlaygroundDetentionCreateOrConnectWithoutUserPlaygroundInput
  upsert?: Prisma.UserPlaygroundDetentionUpsertWithoutUserPlaygroundInput
  disconnect?: Prisma.UserPlaygroundDetentionWhereInput | boolean
  delete?: Prisma.UserPlaygroundDetentionWhereInput | boolean
  connect?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateToOneWithWhereWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUpdateWithoutUserPlaygroundInput>, Prisma.UserPlaygroundDetentionUncheckedUpdateWithoutUserPlaygroundInput>
}

export type UserPlaygroundDetentionUncheckedUpdateOneWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
  connectOrCreate?: Prisma.UserPlaygroundDetentionCreateOrConnectWithoutUserPlaygroundInput
  upsert?: Prisma.UserPlaygroundDetentionUpsertWithoutUserPlaygroundInput
  disconnect?: Prisma.UserPlaygroundDetentionWhereInput | boolean
  delete?: Prisma.UserPlaygroundDetentionWhereInput | boolean
  connect?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateToOneWithWhereWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUpdateWithoutUserPlaygroundInput>, Prisma.UserPlaygroundDetentionUncheckedUpdateWithoutUserPlaygroundInput>
}

export type EnumDETENTION_STATEFieldUpdateOperationsInput = {
  set?: $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionCreateWithoutUserPlaygroundInput = {
  id: string
  description: string
  penaltyPoint: number
  createdAt?: Date | string
  updatedAt: Date | string
  isRead?: boolean
  state?: $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  description: string
  penaltyPoint: number
  createdAt?: Date | string
  updatedAt: Date | string
  isRead?: boolean
  state?: $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
}

export type UserPlaygroundDetentionUpsertWithoutUserPlaygroundInput = {
  update: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedCreateWithoutUserPlaygroundInput>
  where?: Prisma.UserPlaygroundDetentionWhereInput
}

export type UserPlaygroundDetentionUpdateToOneWithWhereWithoutUserPlaygroundInput = {
  where?: Prisma.UserPlaygroundDetentionWhereInput
  data: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateWithoutUserPlaygroundInput, Prisma.UserPlaygroundDetentionUncheckedUpdateWithoutUserPlaygroundInput>
}

export type UserPlaygroundDetentionUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
}

export type UserPlaygroundDetentionUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  penaltyPoint?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isRead?: Prisma.BoolFieldUpdateOperationsInput | boolean
  state?: Prisma.EnumDETENTION_STATEFieldUpdateOperationsInput | $Enums.DETENTION_STATE
}



export type UserPlaygroundDetentionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  penaltyPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isRead?: boolean
  state?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlaygroundDetention"]>

export type UserPlaygroundDetentionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  penaltyPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isRead?: boolean
  state?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlaygroundDetention"]>

export type UserPlaygroundDetentionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  penaltyPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isRead?: boolean
  state?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlaygroundDetention"]>

export type UserPlaygroundDetentionSelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  description?: boolean
  penaltyPoint?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isRead?: boolean
  state?: boolean
}

export type UserPlaygroundDetentionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "description" | "penaltyPoint" | "createdAt" | "updatedAt" | "isRead" | "state", ExtArgs["result"]["userPlaygroundDetention"]>
export type UserPlaygroundDetentionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type UserPlaygroundDetentionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type UserPlaygroundDetentionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $UserPlaygroundDetentionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserPlaygroundDetention"
  objects: {
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    description: string
    penaltyPoint: number
    createdAt: Date
    updatedAt: Date
    isRead: boolean
    state: $Enums.DETENTION_STATE
  }, ExtArgs["result"]["userPlaygroundDetention"]>
  composites: {}
}

export type UserPlaygroundDetentionGetPayload<S extends boolean | null | undefined | UserPlaygroundDetentionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload, S>

export type UserPlaygroundDetentionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserPlaygroundDetentionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserPlaygroundDetentionCountAggregateInputType | true
  }

export interface UserPlaygroundDetentionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPlaygroundDetention'], meta: { name: 'UserPlaygroundDetention' } }
  /**
   * Find zero or one UserPlaygroundDetention that matches the filter.
   * @param {UserPlaygroundDetentionFindUniqueArgs} args - Arguments to find a UserPlaygroundDetention
   * @example
   * // Get one UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPlaygroundDetentionFindUniqueArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserPlaygroundDetention that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPlaygroundDetentionFindUniqueOrThrowArgs} args - Arguments to find a UserPlaygroundDetention
   * @example
   * // Get one UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPlaygroundDetentionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlaygroundDetention that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionFindFirstArgs} args - Arguments to find a UserPlaygroundDetention
   * @example
   * // Get one UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPlaygroundDetentionFindFirstArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlaygroundDetention that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionFindFirstOrThrowArgs} args - Arguments to find a UserPlaygroundDetention
   * @example
   * // Get one UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPlaygroundDetentionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserPlaygroundDetentions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPlaygroundDetentions
   * const userPlaygroundDetentions = await prisma.userPlaygroundDetention.findMany()
   * 
   * // Get first 10 UserPlaygroundDetentions
   * const userPlaygroundDetentions = await prisma.userPlaygroundDetention.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userPlaygroundDetentionWithIdOnly = await prisma.userPlaygroundDetention.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserPlaygroundDetentionFindManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserPlaygroundDetention.
   * @param {UserPlaygroundDetentionCreateArgs} args - Arguments to create a UserPlaygroundDetention.
   * @example
   * // Create one UserPlaygroundDetention
   * const UserPlaygroundDetention = await prisma.userPlaygroundDetention.create({
   *   data: {
   *     // ... data to create a UserPlaygroundDetention
   *   }
   * })
   * 
   */
  create<T extends UserPlaygroundDetentionCreateArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionCreateArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserPlaygroundDetentions.
   * @param {UserPlaygroundDetentionCreateManyArgs} args - Arguments to create many UserPlaygroundDetentions.
   * @example
   * // Create many UserPlaygroundDetentions
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserPlaygroundDetentionCreateManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserPlaygroundDetentions and returns the data saved in the database.
   * @param {UserPlaygroundDetentionCreateManyAndReturnArgs} args - Arguments to create many UserPlaygroundDetentions.
   * @example
   * // Create many UserPlaygroundDetentions
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserPlaygroundDetentions and only return the `id`
   * const userPlaygroundDetentionWithIdOnly = await prisma.userPlaygroundDetention.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserPlaygroundDetentionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserPlaygroundDetention.
   * @param {UserPlaygroundDetentionDeleteArgs} args - Arguments to delete one UserPlaygroundDetention.
   * @example
   * // Delete one UserPlaygroundDetention
   * const UserPlaygroundDetention = await prisma.userPlaygroundDetention.delete({
   *   where: {
   *     // ... filter to delete one UserPlaygroundDetention
   *   }
   * })
   * 
   */
  delete<T extends UserPlaygroundDetentionDeleteArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionDeleteArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserPlaygroundDetention.
   * @param {UserPlaygroundDetentionUpdateArgs} args - Arguments to update one UserPlaygroundDetention.
   * @example
   * // Update one UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserPlaygroundDetentionUpdateArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionUpdateArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserPlaygroundDetentions.
   * @param {UserPlaygroundDetentionDeleteManyArgs} args - Arguments to filter UserPlaygroundDetentions to delete.
   * @example
   * // Delete a few UserPlaygroundDetentions
   * const { count } = await prisma.userPlaygroundDetention.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserPlaygroundDetentionDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserPlaygroundDetentionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlaygroundDetentions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPlaygroundDetentions
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserPlaygroundDetentionUpdateManyArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlaygroundDetentions and returns the data updated in the database.
   * @param {UserPlaygroundDetentionUpdateManyAndReturnArgs} args - Arguments to update many UserPlaygroundDetentions.
   * @example
   * // Update many UserPlaygroundDetentions
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserPlaygroundDetentions and only return the `id`
   * const userPlaygroundDetentionWithIdOnly = await prisma.userPlaygroundDetention.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserPlaygroundDetentionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserPlaygroundDetention.
   * @param {UserPlaygroundDetentionUpsertArgs} args - Arguments to update or create a UserPlaygroundDetention.
   * @example
   * // Update or create a UserPlaygroundDetention
   * const userPlaygroundDetention = await prisma.userPlaygroundDetention.upsert({
   *   create: {
   *     // ... data to create a UserPlaygroundDetention
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPlaygroundDetention we want to update
   *   }
   * })
   */
  upsert<T extends UserPlaygroundDetentionUpsertArgs>(args: Prisma.SelectSubset<T, UserPlaygroundDetentionUpsertArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundDetentionClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundDetentionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserPlaygroundDetentions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionCountArgs} args - Arguments to filter UserPlaygroundDetentions to count.
   * @example
   * // Count the number of UserPlaygroundDetentions
   * const count = await prisma.userPlaygroundDetention.count({
   *   where: {
   *     // ... the filter for the UserPlaygroundDetentions we want to count
   *   }
   * })
  **/
  count<T extends UserPlaygroundDetentionCountArgs>(
    args?: Prisma.Subset<T, UserPlaygroundDetentionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserPlaygroundDetentionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserPlaygroundDetention.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserPlaygroundDetentionAggregateArgs>(args: Prisma.Subset<T, UserPlaygroundDetentionAggregateArgs>): Prisma.PrismaPromise<GetUserPlaygroundDetentionAggregateType<T>>

  /**
   * Group by UserPlaygroundDetention.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlaygroundDetentionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserPlaygroundDetentionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPlaygroundDetentionGroupByArgs['orderBy'] }
      : { orderBy?: UserPlaygroundDetentionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserPlaygroundDetentionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPlaygroundDetentionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserPlaygroundDetention model
 */
readonly fields: UserPlaygroundDetentionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPlaygroundDetention.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPlaygroundDetentionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserPlaygroundDetention model
 */
export interface UserPlaygroundDetentionFieldRefs {
  readonly id: Prisma.FieldRef<"UserPlaygroundDetention", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"UserPlaygroundDetention", 'String'>
  readonly description: Prisma.FieldRef<"UserPlaygroundDetention", 'String'>
  readonly penaltyPoint: Prisma.FieldRef<"UserPlaygroundDetention", 'Int'>
  readonly createdAt: Prisma.FieldRef<"UserPlaygroundDetention", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserPlaygroundDetention", 'DateTime'>
  readonly isRead: Prisma.FieldRef<"UserPlaygroundDetention", 'Boolean'>
  readonly state: Prisma.FieldRef<"UserPlaygroundDetention", 'DETENTION_STATE'>
}
    

// Custom InputTypes
/**
 * UserPlaygroundDetention findUnique
 */
export type UserPlaygroundDetentionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygroundDetention to fetch.
   */
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

/**
 * UserPlaygroundDetention findUniqueOrThrow
 */
export type UserPlaygroundDetentionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygroundDetention to fetch.
   */
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

/**
 * UserPlaygroundDetention findFirst
 */
export type UserPlaygroundDetentionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygroundDetention to fetch.
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygroundDetentions to fetch.
   */
  orderBy?: Prisma.UserPlaygroundDetentionOrderByWithRelationInput | Prisma.UserPlaygroundDetentionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlaygroundDetentions.
   */
  cursor?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygroundDetentions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygroundDetentions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlaygroundDetentions.
   */
  distinct?: Prisma.UserPlaygroundDetentionScalarFieldEnum | Prisma.UserPlaygroundDetentionScalarFieldEnum[]
}

/**
 * UserPlaygroundDetention findFirstOrThrow
 */
export type UserPlaygroundDetentionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygroundDetention to fetch.
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygroundDetentions to fetch.
   */
  orderBy?: Prisma.UserPlaygroundDetentionOrderByWithRelationInput | Prisma.UserPlaygroundDetentionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlaygroundDetentions.
   */
  cursor?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygroundDetentions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygroundDetentions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlaygroundDetentions.
   */
  distinct?: Prisma.UserPlaygroundDetentionScalarFieldEnum | Prisma.UserPlaygroundDetentionScalarFieldEnum[]
}

/**
 * UserPlaygroundDetention findMany
 */
export type UserPlaygroundDetentionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter, which UserPlaygroundDetentions to fetch.
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlaygroundDetentions to fetch.
   */
  orderBy?: Prisma.UserPlaygroundDetentionOrderByWithRelationInput | Prisma.UserPlaygroundDetentionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserPlaygroundDetentions.
   */
  cursor?: Prisma.UserPlaygroundDetentionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlaygroundDetentions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlaygroundDetentions.
   */
  skip?: number
  distinct?: Prisma.UserPlaygroundDetentionScalarFieldEnum | Prisma.UserPlaygroundDetentionScalarFieldEnum[]
}

/**
 * UserPlaygroundDetention create
 */
export type UserPlaygroundDetentionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * The data needed to create a UserPlaygroundDetention.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateInput, Prisma.UserPlaygroundDetentionUncheckedCreateInput>
}

/**
 * UserPlaygroundDetention createMany
 */
export type UserPlaygroundDetentionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserPlaygroundDetentions.
   */
  data: Prisma.UserPlaygroundDetentionCreateManyInput | Prisma.UserPlaygroundDetentionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserPlaygroundDetention createManyAndReturn
 */
export type UserPlaygroundDetentionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * The data used to create many UserPlaygroundDetentions.
   */
  data: Prisma.UserPlaygroundDetentionCreateManyInput | Prisma.UserPlaygroundDetentionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlaygroundDetention update
 */
export type UserPlaygroundDetentionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * The data needed to update a UserPlaygroundDetention.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateInput, Prisma.UserPlaygroundDetentionUncheckedUpdateInput>
  /**
   * Choose, which UserPlaygroundDetention to update.
   */
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

/**
 * UserPlaygroundDetention updateMany
 */
export type UserPlaygroundDetentionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserPlaygroundDetentions.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateManyMutationInput, Prisma.UserPlaygroundDetentionUncheckedUpdateManyInput>
  /**
   * Filter which UserPlaygroundDetentions to update
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * Limit how many UserPlaygroundDetentions to update.
   */
  limit?: number
}

/**
 * UserPlaygroundDetention updateManyAndReturn
 */
export type UserPlaygroundDetentionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * The data used to update UserPlaygroundDetentions.
   */
  data: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateManyMutationInput, Prisma.UserPlaygroundDetentionUncheckedUpdateManyInput>
  /**
   * Filter which UserPlaygroundDetentions to update
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * Limit how many UserPlaygroundDetentions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlaygroundDetention upsert
 */
export type UserPlaygroundDetentionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * The filter to search for the UserPlaygroundDetention to update in case it exists.
   */
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
  /**
   * In case the UserPlaygroundDetention found by the `where` argument doesn't exist, create a new UserPlaygroundDetention with this data.
   */
  create: Prisma.XOR<Prisma.UserPlaygroundDetentionCreateInput, Prisma.UserPlaygroundDetentionUncheckedCreateInput>
  /**
   * In case the UserPlaygroundDetention was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserPlaygroundDetentionUpdateInput, Prisma.UserPlaygroundDetentionUncheckedUpdateInput>
}

/**
 * UserPlaygroundDetention delete
 */
export type UserPlaygroundDetentionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
  /**
   * Filter which UserPlaygroundDetention to delete.
   */
  where: Prisma.UserPlaygroundDetentionWhereUniqueInput
}

/**
 * UserPlaygroundDetention deleteMany
 */
export type UserPlaygroundDetentionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlaygroundDetentions to delete
   */
  where?: Prisma.UserPlaygroundDetentionWhereInput
  /**
   * Limit how many UserPlaygroundDetentions to delete.
   */
  limit?: number
}

/**
 * UserPlaygroundDetention without action
 */
export type UserPlaygroundDetentionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlaygroundDetention
   */
  select?: Prisma.UserPlaygroundDetentionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlaygroundDetention
   */
  omit?: Prisma.UserPlaygroundDetentionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlaygroundDetentionInclude<ExtArgs> | null
}
