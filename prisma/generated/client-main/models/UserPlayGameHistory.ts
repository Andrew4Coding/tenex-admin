
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserPlayGameHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserPlayGameHistory
 * 
 */
export type UserPlayGameHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPlayGameHistoryPayload>

export type AggregateUserPlayGameHistory = {
  _count: UserPlayGameHistoryCountAggregateOutputType | null
  _min: UserPlayGameHistoryMinAggregateOutputType | null
  _max: UserPlayGameHistoryMaxAggregateOutputType | null
}

export type UserPlayGameHistoryMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  gameId: string | null
  tokenUsedId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  finishedAt: Date | null
  isFinished: boolean | null
}

export type UserPlayGameHistoryMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  gameId: string | null
  tokenUsedId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  finishedAt: Date | null
  isFinished: boolean | null
}

export type UserPlayGameHistoryCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  gameId: number
  tokenUsedId: number
  createdAt: number
  updatedAt: number
  finishedAt: number
  isFinished: number
  _all: number
}


export type UserPlayGameHistoryMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  gameId?: true
  tokenUsedId?: true
  createdAt?: true
  updatedAt?: true
  finishedAt?: true
  isFinished?: true
}

export type UserPlayGameHistoryMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  gameId?: true
  tokenUsedId?: true
  createdAt?: true
  updatedAt?: true
  finishedAt?: true
  isFinished?: true
}

export type UserPlayGameHistoryCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  gameId?: true
  tokenUsedId?: true
  createdAt?: true
  updatedAt?: true
  finishedAt?: true
  isFinished?: true
  _all?: true
}

export type UserPlayGameHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlayGameHistory to aggregate.
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlayGameHistories to fetch.
   */
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlayGameHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlayGameHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserPlayGameHistories
  **/
  _count?: true | UserPlayGameHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserPlayGameHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserPlayGameHistoryMaxAggregateInputType
}

export type GetUserPlayGameHistoryAggregateType<T extends UserPlayGameHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateUserPlayGameHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPlayGameHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPlayGameHistory[P]>
}




export type UserPlayGameHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPlayGameHistoryWhereInput
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithAggregationInput | Prisma.UserPlayGameHistoryOrderByWithAggregationInput[]
  by: Prisma.UserPlayGameHistoryScalarFieldEnum[] | Prisma.UserPlayGameHistoryScalarFieldEnum
  having?: Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserPlayGameHistoryCountAggregateInputType | true
  _min?: UserPlayGameHistoryMinAggregateInputType
  _max?: UserPlayGameHistoryMaxAggregateInputType
}

export type UserPlayGameHistoryGroupByOutputType = {
  id: string
  userPlaygroundId: string
  gameId: string
  tokenUsedId: string
  createdAt: Date
  updatedAt: Date
  finishedAt: Date | null
  isFinished: boolean
  _count: UserPlayGameHistoryCountAggregateOutputType | null
  _min: UserPlayGameHistoryMinAggregateOutputType | null
  _max: UserPlayGameHistoryMaxAggregateOutputType | null
}

type GetUserPlayGameHistoryGroupByPayload<T extends UserPlayGameHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserPlayGameHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserPlayGameHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserPlayGameHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserPlayGameHistoryGroupByOutputType[P]>
      }
    >
  > 



export type UserPlayGameHistoryWhereInput = {
  AND?: Prisma.UserPlayGameHistoryWhereInput | Prisma.UserPlayGameHistoryWhereInput[]
  OR?: Prisma.UserPlayGameHistoryWhereInput[]
  NOT?: Prisma.UserPlayGameHistoryWhereInput | Prisma.UserPlayGameHistoryWhereInput[]
  id?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  gameId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  tokenUsedId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"UserPlayGameHistory"> | Date | string | null
  isFinished?: Prisma.BoolFilter<"UserPlayGameHistory"> | boolean
  Game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  PlaygroundToken?: Prisma.XOR<Prisma.PlaygroundTokenScalarRelationFilter, Prisma.PlaygroundTokenWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}

export type UserPlayGameHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  tokenUsedId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  isFinished?: Prisma.SortOrder
  Game?: Prisma.GameOrderByWithRelationInput
  PlaygroundToken?: Prisma.PlaygroundTokenOrderByWithRelationInput
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
}

export type UserPlayGameHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserPlayGameHistoryWhereInput | Prisma.UserPlayGameHistoryWhereInput[]
  OR?: Prisma.UserPlayGameHistoryWhereInput[]
  NOT?: Prisma.UserPlayGameHistoryWhereInput | Prisma.UserPlayGameHistoryWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  gameId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  tokenUsedId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"UserPlayGameHistory"> | Date | string | null
  isFinished?: Prisma.BoolFilter<"UserPlayGameHistory"> | boolean
  Game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  PlaygroundToken?: Prisma.XOR<Prisma.PlaygroundTokenScalarRelationFilter, Prisma.PlaygroundTokenWhereInput>
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
}, "id">

export type UserPlayGameHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  tokenUsedId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  isFinished?: Prisma.SortOrder
  _count?: Prisma.UserPlayGameHistoryCountOrderByAggregateInput
  _max?: Prisma.UserPlayGameHistoryMaxOrderByAggregateInput
  _min?: Prisma.UserPlayGameHistoryMinOrderByAggregateInput
}

export type UserPlayGameHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput | Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput | Prisma.UserPlayGameHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserPlayGameHistory"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"UserPlayGameHistory"> | string
  gameId?: Prisma.StringWithAggregatesFilter<"UserPlayGameHistory"> | string
  tokenUsedId?: Prisma.StringWithAggregatesFilter<"UserPlayGameHistory"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlayGameHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserPlayGameHistory"> | Date | string
  finishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"UserPlayGameHistory"> | Date | string | null
  isFinished?: Prisma.BoolWithAggregatesFilter<"UserPlayGameHistory"> | boolean
}

export type UserPlayGameHistoryCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
  Game: Prisma.GameCreateNestedOneWithoutUserPlayGameHistoryInput
  PlaygroundToken: Prisma.PlaygroundTokenCreateNestedOneWithoutUserPlayGameHistoryInput
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutUserPlayGameHistoryInput
}

export type UserPlayGameHistoryUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  gameId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Game?: Prisma.GameUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
}

export type UserPlayGameHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryCreateManyInput = {
  id: string
  userPlaygroundId: string
  gameId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryListRelationFilter = {
  every?: Prisma.UserPlayGameHistoryWhereInput
  some?: Prisma.UserPlayGameHistoryWhereInput
  none?: Prisma.UserPlayGameHistoryWhereInput
}

export type UserPlayGameHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserPlayGameHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  tokenUsedId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  isFinished?: Prisma.SortOrder
}

export type UserPlayGameHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  tokenUsedId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  isFinished?: Prisma.SortOrder
}

export type UserPlayGameHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  tokenUsedId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  isFinished?: Prisma.SortOrder
}

export type UserPlayGameHistoryCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput> | Prisma.UserPlayGameHistoryCreateWithoutGameInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyGameInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput> | Prisma.UserPlayGameHistoryCreateWithoutGameInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyGameInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput> | Prisma.UserPlayGameHistoryCreateWithoutGameInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutGameInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyGameInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutGameInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutGameInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput> | Prisma.UserPlayGameHistoryCreateWithoutGameInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutGameInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyGameInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutGameInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutGameInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryCreateNestedManyWithoutPlaygroundTokenInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput> | Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUncheckedCreateNestedManyWithoutPlaygroundTokenInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput> | Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUpdateManyWithoutPlaygroundTokenNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput> | Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutPlaygroundTokenInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutPlaygroundTokenInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutPlaygroundTokenInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutPlaygroundTokenNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput> | Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutPlaygroundTokenInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutPlaygroundTokenInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutPlaygroundTokenInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutPlaygroundTokenInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
}

export type UserPlayGameHistoryUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput> | Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput[] | Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  disconnect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  delete?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  connect?: Prisma.UserPlayGameHistoryWhereUniqueInput | Prisma.UserPlayGameHistoryWhereUniqueInput[]
  update?: Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.UserPlayGameHistoryUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
}

export type UserPlayGameHistoryCreateWithoutGameInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
  PlaygroundToken: Prisma.PlaygroundTokenCreateNestedOneWithoutUserPlayGameHistoryInput
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutUserPlayGameHistoryInput
}

export type UserPlayGameHistoryUncheckedCreateWithoutGameInput = {
  id: string
  userPlaygroundId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryCreateOrConnectWithoutGameInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput>
}

export type UserPlayGameHistoryCreateManyGameInputEnvelope = {
  data: Prisma.UserPlayGameHistoryCreateManyGameInput | Prisma.UserPlayGameHistoryCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type UserPlayGameHistoryUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutGameInput>
}

export type UserPlayGameHistoryUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutGameInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutGameInput>
}

export type UserPlayGameHistoryUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.UserPlayGameHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateManyMutationInput, Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutGameInput>
}

export type UserPlayGameHistoryScalarWhereInput = {
  AND?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
  OR?: Prisma.UserPlayGameHistoryScalarWhereInput[]
  NOT?: Prisma.UserPlayGameHistoryScalarWhereInput | Prisma.UserPlayGameHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  userPlaygroundId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  gameId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  tokenUsedId?: Prisma.StringFilter<"UserPlayGameHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserPlayGameHistory"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"UserPlayGameHistory"> | Date | string | null
  isFinished?: Prisma.BoolFilter<"UserPlayGameHistory"> | boolean
}

export type UserPlayGameHistoryCreateWithoutPlaygroundTokenInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
  Game: Prisma.GameCreateNestedOneWithoutUserPlayGameHistoryInput
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutUserPlayGameHistoryInput
}

export type UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput = {
  id: string
  userPlaygroundId: string
  gameId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryCreateOrConnectWithoutPlaygroundTokenInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput>
}

export type UserPlayGameHistoryCreateManyPlaygroundTokenInputEnvelope = {
  data: Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInput | Prisma.UserPlayGameHistoryCreateManyPlaygroundTokenInput[]
  skipDuplicates?: boolean
}

export type UserPlayGameHistoryUpsertWithWhereUniqueWithoutPlaygroundTokenInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutPlaygroundTokenInput>
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutPlaygroundTokenInput>
}

export type UserPlayGameHistoryUpdateWithWhereUniqueWithoutPlaygroundTokenInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutPlaygroundTokenInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutPlaygroundTokenInput>
}

export type UserPlayGameHistoryUpdateManyWithWhereWithoutPlaygroundTokenInput = {
  where: Prisma.UserPlayGameHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateManyMutationInput, Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutPlaygroundTokenInput>
}

export type UserPlayGameHistoryCreateWithoutUserPlaygroundInput = {
  id: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
  Game: Prisma.GameCreateNestedOneWithoutUserPlayGameHistoryInput
  PlaygroundToken: Prisma.PlaygroundTokenCreateNestedOneWithoutUserPlayGameHistoryInput
}

export type UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  gameId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type UserPlayGameHistoryCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInput | Prisma.UserPlayGameHistoryCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type UserPlayGameHistoryUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedCreateWithoutUserPlaygroundInput>
}

export type UserPlayGameHistoryUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateWithoutUserPlaygroundInput, Prisma.UserPlayGameHistoryUncheckedUpdateWithoutUserPlaygroundInput>
}

export type UserPlayGameHistoryUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.UserPlayGameHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateManyMutationInput, Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type UserPlayGameHistoryCreateManyGameInput = {
  id: string
  userPlaygroundId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
}

export type UserPlayGameHistoryUncheckedUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryCreateManyPlaygroundTokenInput = {
  id: string
  userPlaygroundId: string
  gameId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryUpdateWithoutPlaygroundTokenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Game?: Prisma.GameUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
}

export type UserPlayGameHistoryUncheckedUpdateWithoutPlaygroundTokenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutPlaygroundTokenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryCreateManyUserPlaygroundInput = {
  id: string
  gameId: string
  tokenUsedId: string
  createdAt?: Date | string
  updatedAt: Date | string
  finishedAt?: Date | string | null
  isFinished?: boolean
}

export type UserPlayGameHistoryUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Game?: Prisma.GameUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
  PlaygroundToken?: Prisma.PlaygroundTokenUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput
}

export type UserPlayGameHistoryUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserPlayGameHistoryUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  tokenUsedId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isFinished?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type UserPlayGameHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  gameId?: boolean
  tokenUsedId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
  isFinished?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayGameHistory"]>

export type UserPlayGameHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  gameId?: boolean
  tokenUsedId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
  isFinished?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayGameHistory"]>

export type UserPlayGameHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  gameId?: boolean
  tokenUsedId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
  isFinished?: boolean
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userPlayGameHistory"]>

export type UserPlayGameHistorySelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  gameId?: boolean
  tokenUsedId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
  isFinished?: boolean
}

export type UserPlayGameHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "gameId" | "tokenUsedId" | "createdAt" | "updatedAt" | "finishedAt" | "isFinished", ExtArgs["result"]["userPlayGameHistory"]>
export type UserPlayGameHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type UserPlayGameHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type UserPlayGameHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  PlaygroundToken?: boolean | Prisma.PlaygroundTokenDefaultArgs<ExtArgs>
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $UserPlayGameHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserPlayGameHistory"
  objects: {
    Game: Prisma.$GamePayload<ExtArgs>
    PlaygroundToken: Prisma.$PlaygroundTokenPayload<ExtArgs>
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    gameId: string
    tokenUsedId: string
    createdAt: Date
    updatedAt: Date
    finishedAt: Date | null
    isFinished: boolean
  }, ExtArgs["result"]["userPlayGameHistory"]>
  composites: {}
}

export type UserPlayGameHistoryGetPayload<S extends boolean | null | undefined | UserPlayGameHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload, S>

export type UserPlayGameHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserPlayGameHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserPlayGameHistoryCountAggregateInputType | true
  }

export interface UserPlayGameHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPlayGameHistory'], meta: { name: 'UserPlayGameHistory' } }
  /**
   * Find zero or one UserPlayGameHistory that matches the filter.
   * @param {UserPlayGameHistoryFindUniqueArgs} args - Arguments to find a UserPlayGameHistory
   * @example
   * // Get one UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPlayGameHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserPlayGameHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPlayGameHistoryFindUniqueOrThrowArgs} args - Arguments to find a UserPlayGameHistory
   * @example
   * // Get one UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPlayGameHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlayGameHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryFindFirstArgs} args - Arguments to find a UserPlayGameHistory
   * @example
   * // Get one UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPlayGameHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPlayGameHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryFindFirstOrThrowArgs} args - Arguments to find a UserPlayGameHistory
   * @example
   * // Get one UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPlayGameHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserPlayGameHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPlayGameHistories
   * const userPlayGameHistories = await prisma.userPlayGameHistory.findMany()
   * 
   * // Get first 10 UserPlayGameHistories
   * const userPlayGameHistories = await prisma.userPlayGameHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userPlayGameHistoryWithIdOnly = await prisma.userPlayGameHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserPlayGameHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserPlayGameHistory.
   * @param {UserPlayGameHistoryCreateArgs} args - Arguments to create a UserPlayGameHistory.
   * @example
   * // Create one UserPlayGameHistory
   * const UserPlayGameHistory = await prisma.userPlayGameHistory.create({
   *   data: {
   *     // ... data to create a UserPlayGameHistory
   *   }
   * })
   * 
   */
  create<T extends UserPlayGameHistoryCreateArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserPlayGameHistories.
   * @param {UserPlayGameHistoryCreateManyArgs} args - Arguments to create many UserPlayGameHistories.
   * @example
   * // Create many UserPlayGameHistories
   * const userPlayGameHistory = await prisma.userPlayGameHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserPlayGameHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserPlayGameHistories and returns the data saved in the database.
   * @param {UserPlayGameHistoryCreateManyAndReturnArgs} args - Arguments to create many UserPlayGameHistories.
   * @example
   * // Create many UserPlayGameHistories
   * const userPlayGameHistory = await prisma.userPlayGameHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserPlayGameHistories and only return the `id`
   * const userPlayGameHistoryWithIdOnly = await prisma.userPlayGameHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserPlayGameHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserPlayGameHistory.
   * @param {UserPlayGameHistoryDeleteArgs} args - Arguments to delete one UserPlayGameHistory.
   * @example
   * // Delete one UserPlayGameHistory
   * const UserPlayGameHistory = await prisma.userPlayGameHistory.delete({
   *   where: {
   *     // ... filter to delete one UserPlayGameHistory
   *   }
   * })
   * 
   */
  delete<T extends UserPlayGameHistoryDeleteArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserPlayGameHistory.
   * @param {UserPlayGameHistoryUpdateArgs} args - Arguments to update one UserPlayGameHistory.
   * @example
   * // Update one UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserPlayGameHistoryUpdateArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserPlayGameHistories.
   * @param {UserPlayGameHistoryDeleteManyArgs} args - Arguments to filter UserPlayGameHistories to delete.
   * @example
   * // Delete a few UserPlayGameHistories
   * const { count } = await prisma.userPlayGameHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserPlayGameHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserPlayGameHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlayGameHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPlayGameHistories
   * const userPlayGameHistory = await prisma.userPlayGameHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserPlayGameHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPlayGameHistories and returns the data updated in the database.
   * @param {UserPlayGameHistoryUpdateManyAndReturnArgs} args - Arguments to update many UserPlayGameHistories.
   * @example
   * // Update many UserPlayGameHistories
   * const userPlayGameHistory = await prisma.userPlayGameHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserPlayGameHistories and only return the `id`
   * const userPlayGameHistoryWithIdOnly = await prisma.userPlayGameHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserPlayGameHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserPlayGameHistory.
   * @param {UserPlayGameHistoryUpsertArgs} args - Arguments to update or create a UserPlayGameHistory.
   * @example
   * // Update or create a UserPlayGameHistory
   * const userPlayGameHistory = await prisma.userPlayGameHistory.upsert({
   *   create: {
   *     // ... data to create a UserPlayGameHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPlayGameHistory we want to update
   *   }
   * })
   */
  upsert<T extends UserPlayGameHistoryUpsertArgs>(args: Prisma.SelectSubset<T, UserPlayGameHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__UserPlayGameHistoryClient<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserPlayGameHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryCountArgs} args - Arguments to filter UserPlayGameHistories to count.
   * @example
   * // Count the number of UserPlayGameHistories
   * const count = await prisma.userPlayGameHistory.count({
   *   where: {
   *     // ... the filter for the UserPlayGameHistories we want to count
   *   }
   * })
  **/
  count<T extends UserPlayGameHistoryCountArgs>(
    args?: Prisma.Subset<T, UserPlayGameHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserPlayGameHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserPlayGameHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserPlayGameHistoryAggregateArgs>(args: Prisma.Subset<T, UserPlayGameHistoryAggregateArgs>): Prisma.PrismaPromise<GetUserPlayGameHistoryAggregateType<T>>

  /**
   * Group by UserPlayGameHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPlayGameHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserPlayGameHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPlayGameHistoryGroupByArgs['orderBy'] }
      : { orderBy?: UserPlayGameHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserPlayGameHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPlayGameHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserPlayGameHistory model
 */
readonly fields: UserPlayGameHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPlayGameHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPlayGameHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  PlaygroundToken<T extends Prisma.PlaygroundTokenDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlaygroundTokenDefaultArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserPlayGameHistory model
 */
export interface UserPlayGameHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"UserPlayGameHistory", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"UserPlayGameHistory", 'String'>
  readonly gameId: Prisma.FieldRef<"UserPlayGameHistory", 'String'>
  readonly tokenUsedId: Prisma.FieldRef<"UserPlayGameHistory", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserPlayGameHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserPlayGameHistory", 'DateTime'>
  readonly finishedAt: Prisma.FieldRef<"UserPlayGameHistory", 'DateTime'>
  readonly isFinished: Prisma.FieldRef<"UserPlayGameHistory", 'Boolean'>
}
    

// Custom InputTypes
/**
 * UserPlayGameHistory findUnique
 */
export type UserPlayGameHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayGameHistory to fetch.
   */
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
}

/**
 * UserPlayGameHistory findUniqueOrThrow
 */
export type UserPlayGameHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayGameHistory to fetch.
   */
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
}

/**
 * UserPlayGameHistory findFirst
 */
export type UserPlayGameHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayGameHistory to fetch.
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlayGameHistories to fetch.
   */
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlayGameHistories.
   */
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlayGameHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlayGameHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlayGameHistories.
   */
  distinct?: Prisma.UserPlayGameHistoryScalarFieldEnum | Prisma.UserPlayGameHistoryScalarFieldEnum[]
}

/**
 * UserPlayGameHistory findFirstOrThrow
 */
export type UserPlayGameHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayGameHistory to fetch.
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlayGameHistories to fetch.
   */
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPlayGameHistories.
   */
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlayGameHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlayGameHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPlayGameHistories.
   */
  distinct?: Prisma.UserPlayGameHistoryScalarFieldEnum | Prisma.UserPlayGameHistoryScalarFieldEnum[]
}

/**
 * UserPlayGameHistory findMany
 */
export type UserPlayGameHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter, which UserPlayGameHistories to fetch.
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPlayGameHistories to fetch.
   */
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserPlayGameHistories.
   */
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPlayGameHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPlayGameHistories.
   */
  skip?: number
  distinct?: Prisma.UserPlayGameHistoryScalarFieldEnum | Prisma.UserPlayGameHistoryScalarFieldEnum[]
}

/**
 * UserPlayGameHistory create
 */
export type UserPlayGameHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a UserPlayGameHistory.
   */
  data: Prisma.XOR<Prisma.UserPlayGameHistoryCreateInput, Prisma.UserPlayGameHistoryUncheckedCreateInput>
}

/**
 * UserPlayGameHistory createMany
 */
export type UserPlayGameHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserPlayGameHistories.
   */
  data: Prisma.UserPlayGameHistoryCreateManyInput | Prisma.UserPlayGameHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserPlayGameHistory createManyAndReturn
 */
export type UserPlayGameHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many UserPlayGameHistories.
   */
  data: Prisma.UserPlayGameHistoryCreateManyInput | Prisma.UserPlayGameHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlayGameHistory update
 */
export type UserPlayGameHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a UserPlayGameHistory.
   */
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateInput, Prisma.UserPlayGameHistoryUncheckedUpdateInput>
  /**
   * Choose, which UserPlayGameHistory to update.
   */
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
}

/**
 * UserPlayGameHistory updateMany
 */
export type UserPlayGameHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserPlayGameHistories.
   */
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateManyMutationInput, Prisma.UserPlayGameHistoryUncheckedUpdateManyInput>
  /**
   * Filter which UserPlayGameHistories to update
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * Limit how many UserPlayGameHistories to update.
   */
  limit?: number
}

/**
 * UserPlayGameHistory updateManyAndReturn
 */
export type UserPlayGameHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * The data used to update UserPlayGameHistories.
   */
  data: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateManyMutationInput, Prisma.UserPlayGameHistoryUncheckedUpdateManyInput>
  /**
   * Filter which UserPlayGameHistories to update
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * Limit how many UserPlayGameHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserPlayGameHistory upsert
 */
export type UserPlayGameHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the UserPlayGameHistory to update in case it exists.
   */
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
  /**
   * In case the UserPlayGameHistory found by the `where` argument doesn't exist, create a new UserPlayGameHistory with this data.
   */
  create: Prisma.XOR<Prisma.UserPlayGameHistoryCreateInput, Prisma.UserPlayGameHistoryUncheckedCreateInput>
  /**
   * In case the UserPlayGameHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserPlayGameHistoryUpdateInput, Prisma.UserPlayGameHistoryUncheckedUpdateInput>
}

/**
 * UserPlayGameHistory delete
 */
export type UserPlayGameHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  /**
   * Filter which UserPlayGameHistory to delete.
   */
  where: Prisma.UserPlayGameHistoryWhereUniqueInput
}

/**
 * UserPlayGameHistory deleteMany
 */
export type UserPlayGameHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPlayGameHistories to delete
   */
  where?: Prisma.UserPlayGameHistoryWhereInput
  /**
   * Limit how many UserPlayGameHistories to delete.
   */
  limit?: number
}

/**
 * UserPlayGameHistory without action
 */
export type UserPlayGameHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
}
