
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DashboardNotification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DashboardNotification
 * 
 */
export type DashboardNotificationModel = runtime.Types.Result.DefaultSelection<Prisma.$DashboardNotificationPayload>

export type AggregateDashboardNotification = {
  _count: DashboardNotificationCountAggregateOutputType | null
  _min: DashboardNotificationMinAggregateOutputType | null
  _max: DashboardNotificationMaxAggregateOutputType | null
}

export type DashboardNotificationMinAggregateOutputType = {
  id: string | null
  title: string | null
  createdAt: Date | null
  updatedAt: Date | null
  content: string | null
  isPrivate: boolean | null
  type: $Enums.PROGRAM_CODE | null
}

export type DashboardNotificationMaxAggregateOutputType = {
  id: string | null
  title: string | null
  createdAt: Date | null
  updatedAt: Date | null
  content: string | null
  isPrivate: boolean | null
  type: $Enums.PROGRAM_CODE | null
}

export type DashboardNotificationCountAggregateOutputType = {
  id: number
  title: number
  createdAt: number
  updatedAt: number
  content: number
  isPrivate: number
  type: number
  _all: number
}


export type DashboardNotificationMinAggregateInputType = {
  id?: true
  title?: true
  createdAt?: true
  updatedAt?: true
  content?: true
  isPrivate?: true
  type?: true
}

export type DashboardNotificationMaxAggregateInputType = {
  id?: true
  title?: true
  createdAt?: true
  updatedAt?: true
  content?: true
  isPrivate?: true
  type?: true
}

export type DashboardNotificationCountAggregateInputType = {
  id?: true
  title?: true
  createdAt?: true
  updatedAt?: true
  content?: true
  isPrivate?: true
  type?: true
  _all?: true
}

export type DashboardNotificationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardNotification to aggregate.
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotifications to fetch.
   */
  orderBy?: Prisma.DashboardNotificationOrderByWithRelationInput | Prisma.DashboardNotificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DashboardNotificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DashboardNotifications
  **/
  _count?: true | DashboardNotificationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DashboardNotificationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DashboardNotificationMaxAggregateInputType
}

export type GetDashboardNotificationAggregateType<T extends DashboardNotificationAggregateArgs> = {
      [P in keyof T & keyof AggregateDashboardNotification]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDashboardNotification[P]>
    : Prisma.GetScalarType<T[P], AggregateDashboardNotification[P]>
}




export type DashboardNotificationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DashboardNotificationWhereInput
  orderBy?: Prisma.DashboardNotificationOrderByWithAggregationInput | Prisma.DashboardNotificationOrderByWithAggregationInput[]
  by: Prisma.DashboardNotificationScalarFieldEnum[] | Prisma.DashboardNotificationScalarFieldEnum
  having?: Prisma.DashboardNotificationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DashboardNotificationCountAggregateInputType | true
  _min?: DashboardNotificationMinAggregateInputType
  _max?: DashboardNotificationMaxAggregateInputType
}

export type DashboardNotificationGroupByOutputType = {
  id: string
  title: string
  createdAt: Date
  updatedAt: Date
  content: string
  isPrivate: boolean
  type: $Enums.PROGRAM_CODE
  _count: DashboardNotificationCountAggregateOutputType | null
  _min: DashboardNotificationMinAggregateOutputType | null
  _max: DashboardNotificationMaxAggregateOutputType | null
}

type GetDashboardNotificationGroupByPayload<T extends DashboardNotificationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DashboardNotificationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DashboardNotificationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DashboardNotificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DashboardNotificationGroupByOutputType[P]>
      }
    >
  > 



export type DashboardNotificationWhereInput = {
  AND?: Prisma.DashboardNotificationWhereInput | Prisma.DashboardNotificationWhereInput[]
  OR?: Prisma.DashboardNotificationWhereInput[]
  NOT?: Prisma.DashboardNotificationWhereInput | Prisma.DashboardNotificationWhereInput[]
  id?: Prisma.StringFilter<"DashboardNotification"> | string
  title?: Prisma.StringFilter<"DashboardNotification"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  content?: Prisma.StringFilter<"DashboardNotification"> | string
  isPrivate?: Prisma.BoolFilter<"DashboardNotification"> | boolean
  type?: Prisma.EnumPROGRAM_CODEFilter<"DashboardNotification"> | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadListRelationFilter
  user?: Prisma.UserListRelationFilter
}

export type DashboardNotificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadOrderByRelationAggregateInput
  user?: Prisma.userOrderByRelationAggregateInput
}

export type DashboardNotificationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DashboardNotificationWhereInput | Prisma.DashboardNotificationWhereInput[]
  OR?: Prisma.DashboardNotificationWhereInput[]
  NOT?: Prisma.DashboardNotificationWhereInput | Prisma.DashboardNotificationWhereInput[]
  title?: Prisma.StringFilter<"DashboardNotification"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  content?: Prisma.StringFilter<"DashboardNotification"> | string
  isPrivate?: Prisma.BoolFilter<"DashboardNotification"> | boolean
  type?: Prisma.EnumPROGRAM_CODEFilter<"DashboardNotification"> | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadListRelationFilter
  user?: Prisma.UserListRelationFilter
}, "id">

export type DashboardNotificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  type?: Prisma.SortOrder
  _count?: Prisma.DashboardNotificationCountOrderByAggregateInput
  _max?: Prisma.DashboardNotificationMaxOrderByAggregateInput
  _min?: Prisma.DashboardNotificationMinOrderByAggregateInput
}

export type DashboardNotificationScalarWhereWithAggregatesInput = {
  AND?: Prisma.DashboardNotificationScalarWhereWithAggregatesInput | Prisma.DashboardNotificationScalarWhereWithAggregatesInput[]
  OR?: Prisma.DashboardNotificationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DashboardNotificationScalarWhereWithAggregatesInput | Prisma.DashboardNotificationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DashboardNotification"> | string
  title?: Prisma.StringWithAggregatesFilter<"DashboardNotification"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DashboardNotification"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DashboardNotification"> | Date | string
  content?: Prisma.StringWithAggregatesFilter<"DashboardNotification"> | string
  isPrivate?: Prisma.BoolWithAggregatesFilter<"DashboardNotification"> | boolean
  type?: Prisma.EnumPROGRAM_CODEWithAggregatesFilter<"DashboardNotification"> | $Enums.PROGRAM_CODE
}

export type DashboardNotificationCreateInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadCreateNestedManyWithoutDashboardNotificationInput
  user?: Prisma.userCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationUncheckedCreateInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUncheckedCreateNestedManyWithoutDashboardNotificationInput
  user?: Prisma.userUncheckedCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUpdateManyWithoutDashboardNotificationNestedInput
  user?: Prisma.userUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUncheckedUpdateManyWithoutDashboardNotificationNestedInput
  user?: Prisma.userUncheckedUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationCreateManyInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
}

export type DashboardNotificationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
}

export type DashboardNotificationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
}

export type DashboardNotificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type DashboardNotificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type DashboardNotificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type DashboardNotificationScalarRelationFilter = {
  is?: Prisma.DashboardNotificationWhereInput
  isNot?: Prisma.DashboardNotificationWhereInput
}

export type DashboardNotificationListRelationFilter = {
  every?: Prisma.DashboardNotificationWhereInput
  some?: Prisma.DashboardNotificationWhereInput
  none?: Prisma.DashboardNotificationWhereInput
}

export type DashboardNotificationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumPROGRAM_CODEFieldUpdateOperationsInput = {
  set?: $Enums.PROGRAM_CODE
}

export type DashboardNotificationCreateNestedOneWithoutDashboardNotificationUserReadInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedCreateWithoutDashboardNotificationUserReadInput>
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutDashboardNotificationUserReadInput
  connect?: Prisma.DashboardNotificationWhereUniqueInput
}

export type DashboardNotificationUpdateOneRequiredWithoutDashboardNotificationUserReadNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedCreateWithoutDashboardNotificationUserReadInput>
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutDashboardNotificationUserReadInput
  upsert?: Prisma.DashboardNotificationUpsertWithoutDashboardNotificationUserReadInput
  connect?: Prisma.DashboardNotificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DashboardNotificationUpdateToOneWithWhereWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUpdateWithoutDashboardNotificationUserReadInput>, Prisma.DashboardNotificationUncheckedUpdateWithoutDashboardNotificationUserReadInput>
}

export type DashboardNotificationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationCreateWithoutUserInput[] | Prisma.DashboardNotificationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationCreateOrConnectWithoutUserInput[]
  connect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
}

export type DashboardNotificationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationCreateWithoutUserInput[] | Prisma.DashboardNotificationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationCreateOrConnectWithoutUserInput[]
  connect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
}

export type DashboardNotificationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationCreateWithoutUserInput[] | Prisma.DashboardNotificationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardNotificationUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUpsertWithWhereUniqueWithoutUserInput[]
  set?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardNotificationUpdateManyWithWhereWithoutUserInput | Prisma.DashboardNotificationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardNotificationScalarWhereInput | Prisma.DashboardNotificationScalarWhereInput[]
}

export type DashboardNotificationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput> | Prisma.DashboardNotificationCreateWithoutUserInput[] | Prisma.DashboardNotificationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DashboardNotificationCreateOrConnectWithoutUserInput | Prisma.DashboardNotificationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DashboardNotificationUpsertWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUpsertWithWhereUniqueWithoutUserInput[]
  set?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  disconnect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  delete?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  connect?: Prisma.DashboardNotificationWhereUniqueInput | Prisma.DashboardNotificationWhereUniqueInput[]
  update?: Prisma.DashboardNotificationUpdateWithWhereUniqueWithoutUserInput | Prisma.DashboardNotificationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DashboardNotificationUpdateManyWithWhereWithoutUserInput | Prisma.DashboardNotificationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DashboardNotificationScalarWhereInput | Prisma.DashboardNotificationScalarWhereInput[]
}

export type DashboardNotificationCreateWithoutDashboardNotificationUserReadInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  user?: Prisma.userCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationUncheckedCreateWithoutDashboardNotificationUserReadInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  user?: Prisma.userUncheckedCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationCreateOrConnectWithoutDashboardNotificationUserReadInput = {
  where: Prisma.DashboardNotificationWhereUniqueInput
  create: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedCreateWithoutDashboardNotificationUserReadInput>
}

export type DashboardNotificationUpsertWithoutDashboardNotificationUserReadInput = {
  update: Prisma.XOR<Prisma.DashboardNotificationUpdateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedUpdateWithoutDashboardNotificationUserReadInput>
  create: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedCreateWithoutDashboardNotificationUserReadInput>
  where?: Prisma.DashboardNotificationWhereInput
}

export type DashboardNotificationUpdateToOneWithWhereWithoutDashboardNotificationUserReadInput = {
  where?: Prisma.DashboardNotificationWhereInput
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateWithoutDashboardNotificationUserReadInput, Prisma.DashboardNotificationUncheckedUpdateWithoutDashboardNotificationUserReadInput>
}

export type DashboardNotificationUpdateWithoutDashboardNotificationUserReadInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  user?: Prisma.userUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationUncheckedUpdateWithoutDashboardNotificationUserReadInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  user?: Prisma.userUncheckedUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationCreateWithoutUserInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationUncheckedCreateWithoutUserInput = {
  id: string
  title: string
  createdAt?: Date | string
  updatedAt: Date | string
  content: string
  isPrivate?: boolean
  type: $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUncheckedCreateNestedManyWithoutDashboardNotificationInput
}

export type DashboardNotificationCreateOrConnectWithoutUserInput = {
  where: Prisma.DashboardNotificationWhereUniqueInput
  create: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput>
}

export type DashboardNotificationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardNotificationWhereUniqueInput
  update: Prisma.XOR<Prisma.DashboardNotificationUpdateWithoutUserInput, Prisma.DashboardNotificationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DashboardNotificationCreateWithoutUserInput, Prisma.DashboardNotificationUncheckedCreateWithoutUserInput>
}

export type DashboardNotificationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DashboardNotificationWhereUniqueInput
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateWithoutUserInput, Prisma.DashboardNotificationUncheckedUpdateWithoutUserInput>
}

export type DashboardNotificationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DashboardNotificationScalarWhereInput
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateManyMutationInput, Prisma.DashboardNotificationUncheckedUpdateManyWithoutUserInput>
}

export type DashboardNotificationScalarWhereInput = {
  AND?: Prisma.DashboardNotificationScalarWhereInput | Prisma.DashboardNotificationScalarWhereInput[]
  OR?: Prisma.DashboardNotificationScalarWhereInput[]
  NOT?: Prisma.DashboardNotificationScalarWhereInput | Prisma.DashboardNotificationScalarWhereInput[]
  id?: Prisma.StringFilter<"DashboardNotification"> | string
  title?: Prisma.StringFilter<"DashboardNotification"> | string
  createdAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DashboardNotification"> | Date | string
  content?: Prisma.StringFilter<"DashboardNotification"> | string
  isPrivate?: Prisma.BoolFilter<"DashboardNotification"> | boolean
  type?: Prisma.EnumPROGRAM_CODEFilter<"DashboardNotification"> | $Enums.PROGRAM_CODE
}

export type DashboardNotificationUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
  DashboardNotificationUserRead?: Prisma.DashboardNotificationUserReadUncheckedUpdateManyWithoutDashboardNotificationNestedInput
}

export type DashboardNotificationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  type?: Prisma.EnumPROGRAM_CODEFieldUpdateOperationsInput | $Enums.PROGRAM_CODE
}


/**
 * Count Type DashboardNotificationCountOutputType
 */

export type DashboardNotificationCountOutputType = {
  DashboardNotificationUserRead: number
  user: number
}

export type DashboardNotificationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DashboardNotificationUserRead?: boolean | DashboardNotificationCountOutputTypeCountDashboardNotificationUserReadArgs
  user?: boolean | DashboardNotificationCountOutputTypeCountUserArgs
}

/**
 * DashboardNotificationCountOutputType without action
 */
export type DashboardNotificationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationCountOutputType
   */
  select?: Prisma.DashboardNotificationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DashboardNotificationCountOutputType without action
 */
export type DashboardNotificationCountOutputTypeCountDashboardNotificationUserReadArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DashboardNotificationUserReadWhereInput
}

/**
 * DashboardNotificationCountOutputType without action
 */
export type DashboardNotificationCountOutputTypeCountUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.userWhereInput
}


export type DashboardNotificationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  content?: boolean
  isPrivate?: boolean
  type?: boolean
  DashboardNotificationUserRead?: boolean | Prisma.DashboardNotification$DashboardNotificationUserReadArgs<ExtArgs>
  user?: boolean | Prisma.DashboardNotification$userArgs<ExtArgs>
  _count?: boolean | Prisma.DashboardNotificationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dashboardNotification"]>

export type DashboardNotificationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  content?: boolean
  isPrivate?: boolean
  type?: boolean
}, ExtArgs["result"]["dashboardNotification"]>

export type DashboardNotificationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  content?: boolean
  isPrivate?: boolean
  type?: boolean
}, ExtArgs["result"]["dashboardNotification"]>

export type DashboardNotificationSelectScalar = {
  id?: boolean
  title?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  content?: boolean
  isPrivate?: boolean
  type?: boolean
}

export type DashboardNotificationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "createdAt" | "updatedAt" | "content" | "isPrivate" | "type", ExtArgs["result"]["dashboardNotification"]>
export type DashboardNotificationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DashboardNotificationUserRead?: boolean | Prisma.DashboardNotification$DashboardNotificationUserReadArgs<ExtArgs>
  user?: boolean | Prisma.DashboardNotification$userArgs<ExtArgs>
  _count?: boolean | Prisma.DashboardNotificationCountOutputTypeDefaultArgs<ExtArgs>
}
export type DashboardNotificationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DashboardNotificationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DashboardNotificationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DashboardNotification"
  objects: {
    DashboardNotificationUserRead: Prisma.$DashboardNotificationUserReadPayload<ExtArgs>[]
    user: Prisma.$userPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
    content: string
    isPrivate: boolean
    type: $Enums.PROGRAM_CODE
  }, ExtArgs["result"]["dashboardNotification"]>
  composites: {}
}

export type DashboardNotificationGetPayload<S extends boolean | null | undefined | DashboardNotificationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload, S>

export type DashboardNotificationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DashboardNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DashboardNotificationCountAggregateInputType | true
  }

export interface DashboardNotificationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DashboardNotification'], meta: { name: 'DashboardNotification' } }
  /**
   * Find zero or one DashboardNotification that matches the filter.
   * @param {DashboardNotificationFindUniqueArgs} args - Arguments to find a DashboardNotification
   * @example
   * // Get one DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DashboardNotificationFindUniqueArgs>(args: Prisma.SelectSubset<T, DashboardNotificationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DashboardNotification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DashboardNotificationFindUniqueOrThrowArgs} args - Arguments to find a DashboardNotification
   * @example
   * // Get one DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DashboardNotificationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DashboardNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardNotification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationFindFirstArgs} args - Arguments to find a DashboardNotification
   * @example
   * // Get one DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DashboardNotificationFindFirstArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationFindFirstArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DashboardNotification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationFindFirstOrThrowArgs} args - Arguments to find a DashboardNotification
   * @example
   * // Get one DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DashboardNotificationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DashboardNotifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DashboardNotifications
   * const dashboardNotifications = await prisma.dashboardNotification.findMany()
   * 
   * // Get first 10 DashboardNotifications
   * const dashboardNotifications = await prisma.dashboardNotification.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dashboardNotificationWithIdOnly = await prisma.dashboardNotification.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DashboardNotificationFindManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DashboardNotification.
   * @param {DashboardNotificationCreateArgs} args - Arguments to create a DashboardNotification.
   * @example
   * // Create one DashboardNotification
   * const DashboardNotification = await prisma.dashboardNotification.create({
   *   data: {
   *     // ... data to create a DashboardNotification
   *   }
   * })
   * 
   */
  create<T extends DashboardNotificationCreateArgs>(args: Prisma.SelectSubset<T, DashboardNotificationCreateArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DashboardNotifications.
   * @param {DashboardNotificationCreateManyArgs} args - Arguments to create many DashboardNotifications.
   * @example
   * // Create many DashboardNotifications
   * const dashboardNotification = await prisma.dashboardNotification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DashboardNotificationCreateManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DashboardNotifications and returns the data saved in the database.
   * @param {DashboardNotificationCreateManyAndReturnArgs} args - Arguments to create many DashboardNotifications.
   * @example
   * // Create many DashboardNotifications
   * const dashboardNotification = await prisma.dashboardNotification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DashboardNotifications and only return the `id`
   * const dashboardNotificationWithIdOnly = await prisma.dashboardNotification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DashboardNotificationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DashboardNotification.
   * @param {DashboardNotificationDeleteArgs} args - Arguments to delete one DashboardNotification.
   * @example
   * // Delete one DashboardNotification
   * const DashboardNotification = await prisma.dashboardNotification.delete({
   *   where: {
   *     // ... filter to delete one DashboardNotification
   *   }
   * })
   * 
   */
  delete<T extends DashboardNotificationDeleteArgs>(args: Prisma.SelectSubset<T, DashboardNotificationDeleteArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DashboardNotification.
   * @param {DashboardNotificationUpdateArgs} args - Arguments to update one DashboardNotification.
   * @example
   * // Update one DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DashboardNotificationUpdateArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUpdateArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DashboardNotifications.
   * @param {DashboardNotificationDeleteManyArgs} args - Arguments to filter DashboardNotifications to delete.
   * @example
   * // Delete a few DashboardNotifications
   * const { count } = await prisma.dashboardNotification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DashboardNotificationDeleteManyArgs>(args?: Prisma.SelectSubset<T, DashboardNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardNotifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DashboardNotifications
   * const dashboardNotification = await prisma.dashboardNotification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DashboardNotificationUpdateManyArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DashboardNotifications and returns the data updated in the database.
   * @param {DashboardNotificationUpdateManyAndReturnArgs} args - Arguments to update many DashboardNotifications.
   * @example
   * // Update many DashboardNotifications
   * const dashboardNotification = await prisma.dashboardNotification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DashboardNotifications and only return the `id`
   * const dashboardNotificationWithIdOnly = await prisma.dashboardNotification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DashboardNotificationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DashboardNotification.
   * @param {DashboardNotificationUpsertArgs} args - Arguments to update or create a DashboardNotification.
   * @example
   * // Update or create a DashboardNotification
   * const dashboardNotification = await prisma.dashboardNotification.upsert({
   *   create: {
   *     // ... data to create a DashboardNotification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DashboardNotification we want to update
   *   }
   * })
   */
  upsert<T extends DashboardNotificationUpsertArgs>(args: Prisma.SelectSubset<T, DashboardNotificationUpsertArgs<ExtArgs>>): Prisma.Prisma__DashboardNotificationClient<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DashboardNotifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationCountArgs} args - Arguments to filter DashboardNotifications to count.
   * @example
   * // Count the number of DashboardNotifications
   * const count = await prisma.dashboardNotification.count({
   *   where: {
   *     // ... the filter for the DashboardNotifications we want to count
   *   }
   * })
  **/
  count<T extends DashboardNotificationCountArgs>(
    args?: Prisma.Subset<T, DashboardNotificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DashboardNotificationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DashboardNotification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DashboardNotificationAggregateArgs>(args: Prisma.Subset<T, DashboardNotificationAggregateArgs>): Prisma.PrismaPromise<GetDashboardNotificationAggregateType<T>>

  /**
   * Group by DashboardNotification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardNotificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DashboardNotificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DashboardNotificationGroupByArgs['orderBy'] }
      : { orderBy?: DashboardNotificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DashboardNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DashboardNotification model
 */
readonly fields: DashboardNotificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DashboardNotification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DashboardNotificationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  DashboardNotificationUserRead<T extends Prisma.DashboardNotification$DashboardNotificationUserReadArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DashboardNotification$DashboardNotificationUserReadArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardNotificationUserReadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.DashboardNotification$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DashboardNotification$userArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DashboardNotification model
 */
export interface DashboardNotificationFieldRefs {
  readonly id: Prisma.FieldRef<"DashboardNotification", 'String'>
  readonly title: Prisma.FieldRef<"DashboardNotification", 'String'>
  readonly createdAt: Prisma.FieldRef<"DashboardNotification", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DashboardNotification", 'DateTime'>
  readonly content: Prisma.FieldRef<"DashboardNotification", 'String'>
  readonly isPrivate: Prisma.FieldRef<"DashboardNotification", 'Boolean'>
  readonly type: Prisma.FieldRef<"DashboardNotification", 'PROGRAM_CODE'>
}
    

// Custom InputTypes
/**
 * DashboardNotification findUnique
 */
export type DashboardNotificationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotification to fetch.
   */
  where: Prisma.DashboardNotificationWhereUniqueInput
}

/**
 * DashboardNotification findUniqueOrThrow
 */
export type DashboardNotificationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotification to fetch.
   */
  where: Prisma.DashboardNotificationWhereUniqueInput
}

/**
 * DashboardNotification findFirst
 */
export type DashboardNotificationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotification to fetch.
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotifications to fetch.
   */
  orderBy?: Prisma.DashboardNotificationOrderByWithRelationInput | Prisma.DashboardNotificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardNotifications.
   */
  cursor?: Prisma.DashboardNotificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardNotifications.
   */
  distinct?: Prisma.DashboardNotificationScalarFieldEnum | Prisma.DashboardNotificationScalarFieldEnum[]
}

/**
 * DashboardNotification findFirstOrThrow
 */
export type DashboardNotificationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotification to fetch.
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotifications to fetch.
   */
  orderBy?: Prisma.DashboardNotificationOrderByWithRelationInput | Prisma.DashboardNotificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DashboardNotifications.
   */
  cursor?: Prisma.DashboardNotificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DashboardNotifications.
   */
  distinct?: Prisma.DashboardNotificationScalarFieldEnum | Prisma.DashboardNotificationScalarFieldEnum[]
}

/**
 * DashboardNotification findMany
 */
export type DashboardNotificationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter, which DashboardNotifications to fetch.
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DashboardNotifications to fetch.
   */
  orderBy?: Prisma.DashboardNotificationOrderByWithRelationInput | Prisma.DashboardNotificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DashboardNotifications.
   */
  cursor?: Prisma.DashboardNotificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DashboardNotifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DashboardNotifications.
   */
  skip?: number
  distinct?: Prisma.DashboardNotificationScalarFieldEnum | Prisma.DashboardNotificationScalarFieldEnum[]
}

/**
 * DashboardNotification create
 */
export type DashboardNotificationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * The data needed to create a DashboardNotification.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationCreateInput, Prisma.DashboardNotificationUncheckedCreateInput>
}

/**
 * DashboardNotification createMany
 */
export type DashboardNotificationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DashboardNotifications.
   */
  data: Prisma.DashboardNotificationCreateManyInput | Prisma.DashboardNotificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DashboardNotification createManyAndReturn
 */
export type DashboardNotificationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * The data used to create many DashboardNotifications.
   */
  data: Prisma.DashboardNotificationCreateManyInput | Prisma.DashboardNotificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DashboardNotification update
 */
export type DashboardNotificationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * The data needed to update a DashboardNotification.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateInput, Prisma.DashboardNotificationUncheckedUpdateInput>
  /**
   * Choose, which DashboardNotification to update.
   */
  where: Prisma.DashboardNotificationWhereUniqueInput
}

/**
 * DashboardNotification updateMany
 */
export type DashboardNotificationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DashboardNotifications.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateManyMutationInput, Prisma.DashboardNotificationUncheckedUpdateManyInput>
  /**
   * Filter which DashboardNotifications to update
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * Limit how many DashboardNotifications to update.
   */
  limit?: number
}

/**
 * DashboardNotification updateManyAndReturn
 */
export type DashboardNotificationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * The data used to update DashboardNotifications.
   */
  data: Prisma.XOR<Prisma.DashboardNotificationUpdateManyMutationInput, Prisma.DashboardNotificationUncheckedUpdateManyInput>
  /**
   * Filter which DashboardNotifications to update
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * Limit how many DashboardNotifications to update.
   */
  limit?: number
}

/**
 * DashboardNotification upsert
 */
export type DashboardNotificationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * The filter to search for the DashboardNotification to update in case it exists.
   */
  where: Prisma.DashboardNotificationWhereUniqueInput
  /**
   * In case the DashboardNotification found by the `where` argument doesn't exist, create a new DashboardNotification with this data.
   */
  create: Prisma.XOR<Prisma.DashboardNotificationCreateInput, Prisma.DashboardNotificationUncheckedCreateInput>
  /**
   * In case the DashboardNotification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DashboardNotificationUpdateInput, Prisma.DashboardNotificationUncheckedUpdateInput>
}

/**
 * DashboardNotification delete
 */
export type DashboardNotificationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
  /**
   * Filter which DashboardNotification to delete.
   */
  where: Prisma.DashboardNotificationWhereUniqueInput
}

/**
 * DashboardNotification deleteMany
 */
export type DashboardNotificationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DashboardNotifications to delete
   */
  where?: Prisma.DashboardNotificationWhereInput
  /**
   * Limit how many DashboardNotifications to delete.
   */
  limit?: number
}

/**
 * DashboardNotification.DashboardNotificationUserRead
 */
export type DashboardNotification$DashboardNotificationUserReadArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotificationUserRead
   */
  select?: Prisma.DashboardNotificationUserReadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotificationUserRead
   */
  omit?: Prisma.DashboardNotificationUserReadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationUserReadInclude<ExtArgs> | null
  where?: Prisma.DashboardNotificationUserReadWhereInput
  orderBy?: Prisma.DashboardNotificationUserReadOrderByWithRelationInput | Prisma.DashboardNotificationUserReadOrderByWithRelationInput[]
  cursor?: Prisma.DashboardNotificationUserReadWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DashboardNotificationUserReadScalarFieldEnum | Prisma.DashboardNotificationUserReadScalarFieldEnum[]
}

/**
 * DashboardNotification.user
 */
export type DashboardNotification$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the user
   */
  select?: Prisma.userSelect<ExtArgs> | null
  /**
   * Omit specific fields from the user
   */
  omit?: Prisma.userOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.userInclude<ExtArgs> | null
  where?: Prisma.userWhereInput
  orderBy?: Prisma.userOrderByWithRelationInput | Prisma.userOrderByWithRelationInput[]
  cursor?: Prisma.userWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * DashboardNotification without action
 */
export type DashboardNotificationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DashboardNotification
   */
  select?: Prisma.DashboardNotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DashboardNotification
   */
  omit?: Prisma.DashboardNotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardNotificationInclude<ExtArgs> | null
}
