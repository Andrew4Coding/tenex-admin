
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PlaygroundToken` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlaygroundToken
 * 
 */
export type PlaygroundTokenModel = runtime.Types.Result.DefaultSelection<Prisma.$PlaygroundTokenPayload>

export type AggregatePlaygroundToken = {
  _count: PlaygroundTokenCountAggregateOutputType | null
  _min: PlaygroundTokenMinAggregateOutputType | null
  _max: PlaygroundTokenMaxAggregateOutputType | null
}

export type PlaygroundTokenMinAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  isUsed: boolean | null
  usedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  expiredAt: Date | null
  tokenType: $Enums.TOKEN_TYPE | null
  code: string | null
}

export type PlaygroundTokenMaxAggregateOutputType = {
  id: string | null
  userPlaygroundId: string | null
  isUsed: boolean | null
  usedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  expiredAt: Date | null
  tokenType: $Enums.TOKEN_TYPE | null
  code: string | null
}

export type PlaygroundTokenCountAggregateOutputType = {
  id: number
  userPlaygroundId: number
  isUsed: number
  usedAt: number
  createdAt: number
  updatedAt: number
  expiredAt: number
  tokenType: number
  code: number
  _all: number
}


export type PlaygroundTokenMinAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  isUsed?: true
  usedAt?: true
  createdAt?: true
  updatedAt?: true
  expiredAt?: true
  tokenType?: true
  code?: true
}

export type PlaygroundTokenMaxAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  isUsed?: true
  usedAt?: true
  createdAt?: true
  updatedAt?: true
  expiredAt?: true
  tokenType?: true
  code?: true
}

export type PlaygroundTokenCountAggregateInputType = {
  id?: true
  userPlaygroundId?: true
  isUsed?: true
  usedAt?: true
  createdAt?: true
  updatedAt?: true
  expiredAt?: true
  tokenType?: true
  code?: true
  _all?: true
}

export type PlaygroundTokenAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundToken to aggregate.
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundTokens to fetch.
   */
  orderBy?: Prisma.PlaygroundTokenOrderByWithRelationInput | Prisma.PlaygroundTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlaygroundTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlaygroundTokens
  **/
  _count?: true | PlaygroundTokenCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlaygroundTokenMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlaygroundTokenMaxAggregateInputType
}

export type GetPlaygroundTokenAggregateType<T extends PlaygroundTokenAggregateArgs> = {
      [P in keyof T & keyof AggregatePlaygroundToken]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlaygroundToken[P]>
    : Prisma.GetScalarType<T[P], AggregatePlaygroundToken[P]>
}




export type PlaygroundTokenGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlaygroundTokenWhereInput
  orderBy?: Prisma.PlaygroundTokenOrderByWithAggregationInput | Prisma.PlaygroundTokenOrderByWithAggregationInput[]
  by: Prisma.PlaygroundTokenScalarFieldEnum[] | Prisma.PlaygroundTokenScalarFieldEnum
  having?: Prisma.PlaygroundTokenScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlaygroundTokenCountAggregateInputType | true
  _min?: PlaygroundTokenMinAggregateInputType
  _max?: PlaygroundTokenMaxAggregateInputType
}

export type PlaygroundTokenGroupByOutputType = {
  id: string
  userPlaygroundId: string
  isUsed: boolean
  usedAt: Date | null
  createdAt: Date
  updatedAt: Date
  expiredAt: Date | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  _count: PlaygroundTokenCountAggregateOutputType | null
  _min: PlaygroundTokenMinAggregateOutputType | null
  _max: PlaygroundTokenMaxAggregateOutputType | null
}

type GetPlaygroundTokenGroupByPayload<T extends PlaygroundTokenGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlaygroundTokenGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlaygroundTokenGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlaygroundTokenGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlaygroundTokenGroupByOutputType[P]>
      }
    >
  > 



export type PlaygroundTokenWhereInput = {
  AND?: Prisma.PlaygroundTokenWhereInput | Prisma.PlaygroundTokenWhereInput[]
  OR?: Prisma.PlaygroundTokenWhereInput[]
  NOT?: Prisma.PlaygroundTokenWhereInput | Prisma.PlaygroundTokenWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundToken"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundToken"> | string
  isUsed?: Prisma.BoolFilter<"PlaygroundToken"> | boolean
  usedAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFilter<"PlaygroundToken"> | $Enums.TOKEN_TYPE
  code?: Prisma.StringFilter<"PlaygroundToken"> | string
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryListRelationFilter
}

export type PlaygroundTokenOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  isUsed?: Prisma.SortOrder
  usedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  tokenType?: Prisma.SortOrder
  code?: Prisma.SortOrder
  UserPlayground?: Prisma.UserPlaygroundOrderByWithRelationInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryOrderByRelationAggregateInput
}

export type PlaygroundTokenWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  code?: string
  AND?: Prisma.PlaygroundTokenWhereInput | Prisma.PlaygroundTokenWhereInput[]
  OR?: Prisma.PlaygroundTokenWhereInput[]
  NOT?: Prisma.PlaygroundTokenWhereInput | Prisma.PlaygroundTokenWhereInput[]
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundToken"> | string
  isUsed?: Prisma.BoolFilter<"PlaygroundToken"> | boolean
  usedAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFilter<"PlaygroundToken"> | $Enums.TOKEN_TYPE
  UserPlayground?: Prisma.XOR<Prisma.UserPlaygroundScalarRelationFilter, Prisma.UserPlaygroundWhereInput>
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryListRelationFilter
}, "id" | "code">

export type PlaygroundTokenOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  isUsed?: Prisma.SortOrder
  usedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  tokenType?: Prisma.SortOrder
  code?: Prisma.SortOrder
  _count?: Prisma.PlaygroundTokenCountOrderByAggregateInput
  _max?: Prisma.PlaygroundTokenMaxOrderByAggregateInput
  _min?: Prisma.PlaygroundTokenMinOrderByAggregateInput
}

export type PlaygroundTokenScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlaygroundTokenScalarWhereWithAggregatesInput | Prisma.PlaygroundTokenScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlaygroundTokenScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlaygroundTokenScalarWhereWithAggregatesInput | Prisma.PlaygroundTokenScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PlaygroundToken"> | string
  userPlaygroundId?: Prisma.StringWithAggregatesFilter<"PlaygroundToken"> | string
  isUsed?: Prisma.BoolWithAggregatesFilter<"PlaygroundToken"> | boolean
  usedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PlaygroundToken"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundToken"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlaygroundToken"> | Date | string
  expiredAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PlaygroundToken"> | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEWithAggregatesFilter<"PlaygroundToken"> | $Enums.TOKEN_TYPE
  code?: Prisma.StringWithAggregatesFilter<"PlaygroundToken"> | string
}

export type PlaygroundTokenCreateInput = {
  id: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutPlaygroundTokenInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutPlaygroundTokenInput
}

export type PlaygroundTokenUncheckedCreateInput = {
  id: string
  userPlaygroundId: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutPlaygroundTokenInput
}

export type PlaygroundTokenUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutPlaygroundTokenNestedInput
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutPlaygroundTokenNestedInput
}

export type PlaygroundTokenUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutPlaygroundTokenNestedInput
}

export type PlaygroundTokenCreateManyInput = {
  id: string
  userPlaygroundId: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
}

export type PlaygroundTokenUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlaygroundTokenUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlaygroundTokenCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  isUsed?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  tokenType?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type PlaygroundTokenMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  isUsed?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  tokenType?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type PlaygroundTokenMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userPlaygroundId?: Prisma.SortOrder
  isUsed?: Prisma.SortOrder
  usedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  tokenType?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type PlaygroundTokenScalarRelationFilter = {
  is?: Prisma.PlaygroundTokenWhereInput
  isNot?: Prisma.PlaygroundTokenWhereInput
}

export type PlaygroundTokenListRelationFilter = {
  every?: Prisma.PlaygroundTokenWhereInput
  some?: Prisma.PlaygroundTokenWhereInput
  none?: Prisma.PlaygroundTokenWhereInput
}

export type PlaygroundTokenOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumTOKEN_TYPEFieldUpdateOperationsInput = {
  set?: $Enums.TOKEN_TYPE
}

export type PlaygroundTokenCreateNestedOneWithoutUserPlayGameHistoryInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlayGameHistoryInput>
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlayGameHistoryInput
  connect?: Prisma.PlaygroundTokenWhereUniqueInput
}

export type PlaygroundTokenUpdateOneRequiredWithoutUserPlayGameHistoryNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlayGameHistoryInput>
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlayGameHistoryInput
  upsert?: Prisma.PlaygroundTokenUpsertWithoutUserPlayGameHistoryInput
  connect?: Prisma.PlaygroundTokenWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlaygroundTokenUpdateToOneWithWhereWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUpdateWithoutUserPlayGameHistoryInput>, Prisma.PlaygroundTokenUncheckedUpdateWithoutUserPlayGameHistoryInput>
}

export type PlaygroundTokenCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundTokenCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
}

export type PlaygroundTokenUncheckedCreateNestedManyWithoutUserPlaygroundInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundTokenCreateManyUserPlaygroundInputEnvelope
  connect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
}

export type PlaygroundTokenUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundTokenUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundTokenCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  delete?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  connect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  update?: Prisma.PlaygroundTokenUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundTokenUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundTokenScalarWhereInput | Prisma.PlaygroundTokenScalarWhereInput[]
}

export type PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundNestedInput = {
  create?: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput> | Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput[] | Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput[]
  connectOrCreate?: Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput | Prisma.PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput[]
  upsert?: Prisma.PlaygroundTokenUpsertWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpsertWithWhereUniqueWithoutUserPlaygroundInput[]
  createMany?: Prisma.PlaygroundTokenCreateManyUserPlaygroundInputEnvelope
  set?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  disconnect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  delete?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  connect?: Prisma.PlaygroundTokenWhereUniqueInput | Prisma.PlaygroundTokenWhereUniqueInput[]
  update?: Prisma.PlaygroundTokenUpdateWithWhereUniqueWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpdateWithWhereUniqueWithoutUserPlaygroundInput[]
  updateMany?: Prisma.PlaygroundTokenUpdateManyWithWhereWithoutUserPlaygroundInput | Prisma.PlaygroundTokenUpdateManyWithWhereWithoutUserPlaygroundInput[]
  deleteMany?: Prisma.PlaygroundTokenScalarWhereInput | Prisma.PlaygroundTokenScalarWhereInput[]
}

export type PlaygroundTokenCreateWithoutUserPlayGameHistoryInput = {
  id: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  UserPlayground: Prisma.UserPlaygroundCreateNestedOneWithoutPlaygroundTokenInput
}

export type PlaygroundTokenUncheckedCreateWithoutUserPlayGameHistoryInput = {
  id: string
  userPlaygroundId: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
}

export type PlaygroundTokenCreateOrConnectWithoutUserPlayGameHistoryInput = {
  where: Prisma.PlaygroundTokenWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlayGameHistoryInput>
}

export type PlaygroundTokenUpsertWithoutUserPlayGameHistoryInput = {
  update: Prisma.XOR<Prisma.PlaygroundTokenUpdateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedUpdateWithoutUserPlayGameHistoryInput>
  create: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlayGameHistoryInput>
  where?: Prisma.PlaygroundTokenWhereInput
}

export type PlaygroundTokenUpdateToOneWithWhereWithoutUserPlayGameHistoryInput = {
  where?: Prisma.PlaygroundTokenWhereInput
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateWithoutUserPlayGameHistoryInput, Prisma.PlaygroundTokenUncheckedUpdateWithoutUserPlayGameHistoryInput>
}

export type PlaygroundTokenUpdateWithoutUserPlayGameHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  UserPlayground?: Prisma.UserPlaygroundUpdateOneRequiredWithoutPlaygroundTokenNestedInput
}

export type PlaygroundTokenUncheckedUpdateWithoutUserPlayGameHistoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userPlaygroundId?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PlaygroundTokenCreateWithoutUserPlaygroundInput = {
  id: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryCreateNestedManyWithoutPlaygroundTokenInput
}

export type PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput = {
  id: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedCreateNestedManyWithoutPlaygroundTokenInput
}

export type PlaygroundTokenCreateOrConnectWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundTokenWhereUniqueInput
  create: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundTokenCreateManyUserPlaygroundInputEnvelope = {
  data: Prisma.PlaygroundTokenCreateManyUserPlaygroundInput | Prisma.PlaygroundTokenCreateManyUserPlaygroundInput[]
  skipDuplicates?: boolean
}

export type PlaygroundTokenUpsertWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundTokenWhereUniqueInput
  update: Prisma.XOR<Prisma.PlaygroundTokenUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedUpdateWithoutUserPlaygroundInput>
  create: Prisma.XOR<Prisma.PlaygroundTokenCreateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedCreateWithoutUserPlaygroundInput>
}

export type PlaygroundTokenUpdateWithWhereUniqueWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundTokenWhereUniqueInput
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateWithoutUserPlaygroundInput, Prisma.PlaygroundTokenUncheckedUpdateWithoutUserPlaygroundInput>
}

export type PlaygroundTokenUpdateManyWithWhereWithoutUserPlaygroundInput = {
  where: Prisma.PlaygroundTokenScalarWhereInput
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateManyMutationInput, Prisma.PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundInput>
}

export type PlaygroundTokenScalarWhereInput = {
  AND?: Prisma.PlaygroundTokenScalarWhereInput | Prisma.PlaygroundTokenScalarWhereInput[]
  OR?: Prisma.PlaygroundTokenScalarWhereInput[]
  NOT?: Prisma.PlaygroundTokenScalarWhereInput | Prisma.PlaygroundTokenScalarWhereInput[]
  id?: Prisma.StringFilter<"PlaygroundToken"> | string
  userPlaygroundId?: Prisma.StringFilter<"PlaygroundToken"> | string
  isUsed?: Prisma.BoolFilter<"PlaygroundToken"> | boolean
  usedAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlaygroundToken"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"PlaygroundToken"> | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFilter<"PlaygroundToken"> | $Enums.TOKEN_TYPE
  code?: Prisma.StringFilter<"PlaygroundToken"> | string
}

export type PlaygroundTokenCreateManyUserPlaygroundInput = {
  id: string
  isUsed: boolean
  usedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  expiredAt?: Date | string | null
  tokenType: $Enums.TOKEN_TYPE
  code: string
}

export type PlaygroundTokenUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUpdateManyWithoutPlaygroundTokenNestedInput
}

export type PlaygroundTokenUncheckedUpdateWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
  UserPlayGameHistory?: Prisma.UserPlayGameHistoryUncheckedUpdateManyWithoutPlaygroundTokenNestedInput
}

export type PlaygroundTokenUncheckedUpdateManyWithoutUserPlaygroundInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isUsed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  usedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  tokenType?: Prisma.EnumTOKEN_TYPEFieldUpdateOperationsInput | $Enums.TOKEN_TYPE
  code?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PlaygroundTokenCountOutputType
 */

export type PlaygroundTokenCountOutputType = {
  UserPlayGameHistory: number
}

export type PlaygroundTokenCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayGameHistory?: boolean | PlaygroundTokenCountOutputTypeCountUserPlayGameHistoryArgs
}

/**
 * PlaygroundTokenCountOutputType without action
 */
export type PlaygroundTokenCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundTokenCountOutputType
   */
  select?: Prisma.PlaygroundTokenCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PlaygroundTokenCountOutputType without action
 */
export type PlaygroundTokenCountOutputTypeCountUserPlayGameHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPlayGameHistoryWhereInput
}


export type PlaygroundTokenSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  isUsed?: boolean
  usedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiredAt?: boolean
  tokenType?: boolean
  code?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
  UserPlayGameHistory?: boolean | Prisma.PlaygroundToken$UserPlayGameHistoryArgs<ExtArgs>
  _count?: boolean | Prisma.PlaygroundTokenCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundToken"]>

export type PlaygroundTokenSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  isUsed?: boolean
  usedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiredAt?: boolean
  tokenType?: boolean
  code?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundToken"]>

export type PlaygroundTokenSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userPlaygroundId?: boolean
  isUsed?: boolean
  usedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiredAt?: boolean
  tokenType?: boolean
  code?: boolean
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}, ExtArgs["result"]["playgroundToken"]>

export type PlaygroundTokenSelectScalar = {
  id?: boolean
  userPlaygroundId?: boolean
  isUsed?: boolean
  usedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiredAt?: boolean
  tokenType?: boolean
  code?: boolean
}

export type PlaygroundTokenOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userPlaygroundId" | "isUsed" | "usedAt" | "createdAt" | "updatedAt" | "expiredAt" | "tokenType" | "code", ExtArgs["result"]["playgroundToken"]>
export type PlaygroundTokenInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
  UserPlayGameHistory?: boolean | Prisma.PlaygroundToken$UserPlayGameHistoryArgs<ExtArgs>
  _count?: boolean | Prisma.PlaygroundTokenCountOutputTypeDefaultArgs<ExtArgs>
}
export type PlaygroundTokenIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}
export type PlaygroundTokenIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  UserPlayground?: boolean | Prisma.UserPlaygroundDefaultArgs<ExtArgs>
}

export type $PlaygroundTokenPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlaygroundToken"
  objects: {
    UserPlayground: Prisma.$UserPlaygroundPayload<ExtArgs>
    UserPlayGameHistory: Prisma.$UserPlayGameHistoryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userPlaygroundId: string
    isUsed: boolean
    usedAt: Date | null
    createdAt: Date
    updatedAt: Date
    expiredAt: Date | null
    tokenType: $Enums.TOKEN_TYPE
    code: string
  }, ExtArgs["result"]["playgroundToken"]>
  composites: {}
}

export type PlaygroundTokenGetPayload<S extends boolean | null | undefined | PlaygroundTokenDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload, S>

export type PlaygroundTokenCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlaygroundTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlaygroundTokenCountAggregateInputType | true
  }

export interface PlaygroundTokenDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaygroundToken'], meta: { name: 'PlaygroundToken' } }
  /**
   * Find zero or one PlaygroundToken that matches the filter.
   * @param {PlaygroundTokenFindUniqueArgs} args - Arguments to find a PlaygroundToken
   * @example
   * // Get one PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlaygroundTokenFindUniqueArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlaygroundToken that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlaygroundTokenFindUniqueOrThrowArgs} args - Arguments to find a PlaygroundToken
   * @example
   * // Get one PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlaygroundTokenFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundToken that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenFindFirstArgs} args - Arguments to find a PlaygroundToken
   * @example
   * // Get one PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlaygroundTokenFindFirstArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlaygroundToken that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenFindFirstOrThrowArgs} args - Arguments to find a PlaygroundToken
   * @example
   * // Get one PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlaygroundTokenFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlaygroundTokens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlaygroundTokens
   * const playgroundTokens = await prisma.playgroundToken.findMany()
   * 
   * // Get first 10 PlaygroundTokens
   * const playgroundTokens = await prisma.playgroundToken.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const playgroundTokenWithIdOnly = await prisma.playgroundToken.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlaygroundTokenFindManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlaygroundToken.
   * @param {PlaygroundTokenCreateArgs} args - Arguments to create a PlaygroundToken.
   * @example
   * // Create one PlaygroundToken
   * const PlaygroundToken = await prisma.playgroundToken.create({
   *   data: {
   *     // ... data to create a PlaygroundToken
   *   }
   * })
   * 
   */
  create<T extends PlaygroundTokenCreateArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenCreateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlaygroundTokens.
   * @param {PlaygroundTokenCreateManyArgs} args - Arguments to create many PlaygroundTokens.
   * @example
   * // Create many PlaygroundTokens
   * const playgroundToken = await prisma.playgroundToken.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlaygroundTokenCreateManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlaygroundTokens and returns the data saved in the database.
   * @param {PlaygroundTokenCreateManyAndReturnArgs} args - Arguments to create many PlaygroundTokens.
   * @example
   * // Create many PlaygroundTokens
   * const playgroundToken = await prisma.playgroundToken.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlaygroundTokens and only return the `id`
   * const playgroundTokenWithIdOnly = await prisma.playgroundToken.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlaygroundTokenCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlaygroundToken.
   * @param {PlaygroundTokenDeleteArgs} args - Arguments to delete one PlaygroundToken.
   * @example
   * // Delete one PlaygroundToken
   * const PlaygroundToken = await prisma.playgroundToken.delete({
   *   where: {
   *     // ... filter to delete one PlaygroundToken
   *   }
   * })
   * 
   */
  delete<T extends PlaygroundTokenDeleteArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenDeleteArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlaygroundToken.
   * @param {PlaygroundTokenUpdateArgs} args - Arguments to update one PlaygroundToken.
   * @example
   * // Update one PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlaygroundTokenUpdateArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenUpdateArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlaygroundTokens.
   * @param {PlaygroundTokenDeleteManyArgs} args - Arguments to filter PlaygroundTokens to delete.
   * @example
   * // Delete a few PlaygroundTokens
   * const { count } = await prisma.playgroundToken.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlaygroundTokenDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlaygroundTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlaygroundTokens
   * const playgroundToken = await prisma.playgroundToken.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlaygroundTokenUpdateManyArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlaygroundTokens and returns the data updated in the database.
   * @param {PlaygroundTokenUpdateManyAndReturnArgs} args - Arguments to update many PlaygroundTokens.
   * @example
   * // Update many PlaygroundTokens
   * const playgroundToken = await prisma.playgroundToken.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlaygroundTokens and only return the `id`
   * const playgroundTokenWithIdOnly = await prisma.playgroundToken.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlaygroundTokenUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlaygroundToken.
   * @param {PlaygroundTokenUpsertArgs} args - Arguments to update or create a PlaygroundToken.
   * @example
   * // Update or create a PlaygroundToken
   * const playgroundToken = await prisma.playgroundToken.upsert({
   *   create: {
   *     // ... data to create a PlaygroundToken
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlaygroundToken we want to update
   *   }
   * })
   */
  upsert<T extends PlaygroundTokenUpsertArgs>(args: Prisma.SelectSubset<T, PlaygroundTokenUpsertArgs<ExtArgs>>): Prisma.Prisma__PlaygroundTokenClient<runtime.Types.Result.GetResult<Prisma.$PlaygroundTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlaygroundTokens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenCountArgs} args - Arguments to filter PlaygroundTokens to count.
   * @example
   * // Count the number of PlaygroundTokens
   * const count = await prisma.playgroundToken.count({
   *   where: {
   *     // ... the filter for the PlaygroundTokens we want to count
   *   }
   * })
  **/
  count<T extends PlaygroundTokenCountArgs>(
    args?: Prisma.Subset<T, PlaygroundTokenCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlaygroundTokenCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlaygroundToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlaygroundTokenAggregateArgs>(args: Prisma.Subset<T, PlaygroundTokenAggregateArgs>): Prisma.PrismaPromise<GetPlaygroundTokenAggregateType<T>>

  /**
   * Group by PlaygroundToken.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlaygroundTokenGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlaygroundTokenGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlaygroundTokenGroupByArgs['orderBy'] }
      : { orderBy?: PlaygroundTokenGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlaygroundTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaygroundTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlaygroundToken model
 */
readonly fields: PlaygroundTokenFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlaygroundToken.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlaygroundTokenClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  UserPlayground<T extends Prisma.UserPlaygroundDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserPlaygroundDefaultArgs<ExtArgs>>): Prisma.Prisma__UserPlaygroundClient<runtime.Types.Result.GetResult<Prisma.$UserPlaygroundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserPlayGameHistory<T extends Prisma.PlaygroundToken$UserPlayGameHistoryArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PlaygroundToken$UserPlayGameHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPlayGameHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlaygroundToken model
 */
export interface PlaygroundTokenFieldRefs {
  readonly id: Prisma.FieldRef<"PlaygroundToken", 'String'>
  readonly userPlaygroundId: Prisma.FieldRef<"PlaygroundToken", 'String'>
  readonly isUsed: Prisma.FieldRef<"PlaygroundToken", 'Boolean'>
  readonly usedAt: Prisma.FieldRef<"PlaygroundToken", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"PlaygroundToken", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlaygroundToken", 'DateTime'>
  readonly expiredAt: Prisma.FieldRef<"PlaygroundToken", 'DateTime'>
  readonly tokenType: Prisma.FieldRef<"PlaygroundToken", 'TOKEN_TYPE'>
  readonly code: Prisma.FieldRef<"PlaygroundToken", 'String'>
}
    

// Custom InputTypes
/**
 * PlaygroundToken findUnique
 */
export type PlaygroundTokenFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundToken to fetch.
   */
  where: Prisma.PlaygroundTokenWhereUniqueInput
}

/**
 * PlaygroundToken findUniqueOrThrow
 */
export type PlaygroundTokenFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundToken to fetch.
   */
  where: Prisma.PlaygroundTokenWhereUniqueInput
}

/**
 * PlaygroundToken findFirst
 */
export type PlaygroundTokenFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundToken to fetch.
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundTokens to fetch.
   */
  orderBy?: Prisma.PlaygroundTokenOrderByWithRelationInput | Prisma.PlaygroundTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundTokens.
   */
  cursor?: Prisma.PlaygroundTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundTokens.
   */
  distinct?: Prisma.PlaygroundTokenScalarFieldEnum | Prisma.PlaygroundTokenScalarFieldEnum[]
}

/**
 * PlaygroundToken findFirstOrThrow
 */
export type PlaygroundTokenFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundToken to fetch.
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundTokens to fetch.
   */
  orderBy?: Prisma.PlaygroundTokenOrderByWithRelationInput | Prisma.PlaygroundTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlaygroundTokens.
   */
  cursor?: Prisma.PlaygroundTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundTokens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlaygroundTokens.
   */
  distinct?: Prisma.PlaygroundTokenScalarFieldEnum | Prisma.PlaygroundTokenScalarFieldEnum[]
}

/**
 * PlaygroundToken findMany
 */
export type PlaygroundTokenFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter, which PlaygroundTokens to fetch.
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlaygroundTokens to fetch.
   */
  orderBy?: Prisma.PlaygroundTokenOrderByWithRelationInput | Prisma.PlaygroundTokenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlaygroundTokens.
   */
  cursor?: Prisma.PlaygroundTokenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlaygroundTokens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlaygroundTokens.
   */
  skip?: number
  distinct?: Prisma.PlaygroundTokenScalarFieldEnum | Prisma.PlaygroundTokenScalarFieldEnum[]
}

/**
 * PlaygroundToken create
 */
export type PlaygroundTokenCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * The data needed to create a PlaygroundToken.
   */
  data: Prisma.XOR<Prisma.PlaygroundTokenCreateInput, Prisma.PlaygroundTokenUncheckedCreateInput>
}

/**
 * PlaygroundToken createMany
 */
export type PlaygroundTokenCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlaygroundTokens.
   */
  data: Prisma.PlaygroundTokenCreateManyInput | Prisma.PlaygroundTokenCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PlaygroundToken createManyAndReturn
 */
export type PlaygroundTokenCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * The data used to create many PlaygroundTokens.
   */
  data: Prisma.PlaygroundTokenCreateManyInput | Prisma.PlaygroundTokenCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundToken update
 */
export type PlaygroundTokenUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * The data needed to update a PlaygroundToken.
   */
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateInput, Prisma.PlaygroundTokenUncheckedUpdateInput>
  /**
   * Choose, which PlaygroundToken to update.
   */
  where: Prisma.PlaygroundTokenWhereUniqueInput
}

/**
 * PlaygroundToken updateMany
 */
export type PlaygroundTokenUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlaygroundTokens.
   */
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateManyMutationInput, Prisma.PlaygroundTokenUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundTokens to update
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * Limit how many PlaygroundTokens to update.
   */
  limit?: number
}

/**
 * PlaygroundToken updateManyAndReturn
 */
export type PlaygroundTokenUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * The data used to update PlaygroundTokens.
   */
  data: Prisma.XOR<Prisma.PlaygroundTokenUpdateManyMutationInput, Prisma.PlaygroundTokenUncheckedUpdateManyInput>
  /**
   * Filter which PlaygroundTokens to update
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * Limit how many PlaygroundTokens to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlaygroundToken upsert
 */
export type PlaygroundTokenUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * The filter to search for the PlaygroundToken to update in case it exists.
   */
  where: Prisma.PlaygroundTokenWhereUniqueInput
  /**
   * In case the PlaygroundToken found by the `where` argument doesn't exist, create a new PlaygroundToken with this data.
   */
  create: Prisma.XOR<Prisma.PlaygroundTokenCreateInput, Prisma.PlaygroundTokenUncheckedCreateInput>
  /**
   * In case the PlaygroundToken was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlaygroundTokenUpdateInput, Prisma.PlaygroundTokenUncheckedUpdateInput>
}

/**
 * PlaygroundToken delete
 */
export type PlaygroundTokenDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
  /**
   * Filter which PlaygroundToken to delete.
   */
  where: Prisma.PlaygroundTokenWhereUniqueInput
}

/**
 * PlaygroundToken deleteMany
 */
export type PlaygroundTokenDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlaygroundTokens to delete
   */
  where?: Prisma.PlaygroundTokenWhereInput
  /**
   * Limit how many PlaygroundTokens to delete.
   */
  limit?: number
}

/**
 * PlaygroundToken.UserPlayGameHistory
 */
export type PlaygroundToken$UserPlayGameHistoryArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPlayGameHistory
   */
  select?: Prisma.UserPlayGameHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPlayGameHistory
   */
  omit?: Prisma.UserPlayGameHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPlayGameHistoryInclude<ExtArgs> | null
  where?: Prisma.UserPlayGameHistoryWhereInput
  orderBy?: Prisma.UserPlayGameHistoryOrderByWithRelationInput | Prisma.UserPlayGameHistoryOrderByWithRelationInput[]
  cursor?: Prisma.UserPlayGameHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserPlayGameHistoryScalarFieldEnum | Prisma.UserPlayGameHistoryScalarFieldEnum[]
}

/**
 * PlaygroundToken without action
 */
export type PlaygroundTokenDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlaygroundToken
   */
  select?: Prisma.PlaygroundTokenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlaygroundToken
   */
  omit?: Prisma.PlaygroundTokenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlaygroundTokenInclude<ExtArgs> | null
}
