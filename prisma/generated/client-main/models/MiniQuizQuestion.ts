
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MiniQuizQuestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MiniQuizQuestion
 * 
 */
export type MiniQuizQuestionModel = runtime.Types.Result.DefaultSelection<Prisma.$MiniQuizQuestionPayload>

export type AggregateMiniQuizQuestion = {
  _count: MiniQuizQuestionCountAggregateOutputType | null
  _min: MiniQuizQuestionMinAggregateOutputType | null
  _max: MiniQuizQuestionMaxAggregateOutputType | null
}

export type MiniQuizQuestionMinAggregateOutputType = {
  id: string | null
  question: string | null
  isTrue: boolean | null
  createdAt: Date | null
  quizId: string | null
  updatedAt: Date | null
}

export type MiniQuizQuestionMaxAggregateOutputType = {
  id: string | null
  question: string | null
  isTrue: boolean | null
  createdAt: Date | null
  quizId: string | null
  updatedAt: Date | null
}

export type MiniQuizQuestionCountAggregateOutputType = {
  id: number
  question: number
  isTrue: number
  createdAt: number
  quizId: number
  updatedAt: number
  _all: number
}


export type MiniQuizQuestionMinAggregateInputType = {
  id?: true
  question?: true
  isTrue?: true
  createdAt?: true
  quizId?: true
  updatedAt?: true
}

export type MiniQuizQuestionMaxAggregateInputType = {
  id?: true
  question?: true
  isTrue?: true
  createdAt?: true
  quizId?: true
  updatedAt?: true
}

export type MiniQuizQuestionCountAggregateInputType = {
  id?: true
  question?: true
  isTrue?: true
  createdAt?: true
  quizId?: true
  updatedAt?: true
  _all?: true
}

export type MiniQuizQuestionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuizQuestion to aggregate.
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizQuestions to fetch.
   */
  orderBy?: Prisma.MiniQuizQuestionOrderByWithRelationInput | Prisma.MiniQuizQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MiniQuizQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MiniQuizQuestions
  **/
  _count?: true | MiniQuizQuestionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MiniQuizQuestionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MiniQuizQuestionMaxAggregateInputType
}

export type GetMiniQuizQuestionAggregateType<T extends MiniQuizQuestionAggregateArgs> = {
      [P in keyof T & keyof AggregateMiniQuizQuestion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMiniQuizQuestion[P]>
    : Prisma.GetScalarType<T[P], AggregateMiniQuizQuestion[P]>
}




export type MiniQuizQuestionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MiniQuizQuestionWhereInput
  orderBy?: Prisma.MiniQuizQuestionOrderByWithAggregationInput | Prisma.MiniQuizQuestionOrderByWithAggregationInput[]
  by: Prisma.MiniQuizQuestionScalarFieldEnum[] | Prisma.MiniQuizQuestionScalarFieldEnum
  having?: Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MiniQuizQuestionCountAggregateInputType | true
  _min?: MiniQuizQuestionMinAggregateInputType
  _max?: MiniQuizQuestionMaxAggregateInputType
}

export type MiniQuizQuestionGroupByOutputType = {
  id: string
  question: string
  isTrue: boolean
  createdAt: Date
  quizId: string
  updatedAt: Date
  _count: MiniQuizQuestionCountAggregateOutputType | null
  _min: MiniQuizQuestionMinAggregateOutputType | null
  _max: MiniQuizQuestionMaxAggregateOutputType | null
}

type GetMiniQuizQuestionGroupByPayload<T extends MiniQuizQuestionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MiniQuizQuestionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MiniQuizQuestionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MiniQuizQuestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MiniQuizQuestionGroupByOutputType[P]>
      }
    >
  > 



export type MiniQuizQuestionWhereInput = {
  AND?: Prisma.MiniQuizQuestionWhereInput | Prisma.MiniQuizQuestionWhereInput[]
  OR?: Prisma.MiniQuizQuestionWhereInput[]
  NOT?: Prisma.MiniQuizQuestionWhereInput | Prisma.MiniQuizQuestionWhereInput[]
  id?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  question?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  isTrue?: Prisma.BoolFilter<"MiniQuizQuestion"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
  quizId?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
  MiniQuiz?: Prisma.XOR<Prisma.MiniQuizScalarRelationFilter, Prisma.MiniQuizWhereInput>
}

export type MiniQuizQuestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  question?: Prisma.SortOrder
  isTrue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  MiniQuiz?: Prisma.MiniQuizOrderByWithRelationInput
}

export type MiniQuizQuestionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MiniQuizQuestionWhereInput | Prisma.MiniQuizQuestionWhereInput[]
  OR?: Prisma.MiniQuizQuestionWhereInput[]
  NOT?: Prisma.MiniQuizQuestionWhereInput | Prisma.MiniQuizQuestionWhereInput[]
  question?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  isTrue?: Prisma.BoolFilter<"MiniQuizQuestion"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
  quizId?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
  MiniQuiz?: Prisma.XOR<Prisma.MiniQuizScalarRelationFilter, Prisma.MiniQuizWhereInput>
}, "id">

export type MiniQuizQuestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  question?: Prisma.SortOrder
  isTrue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MiniQuizQuestionCountOrderByAggregateInput
  _max?: Prisma.MiniQuizQuestionMaxOrderByAggregateInput
  _min?: Prisma.MiniQuizQuestionMinOrderByAggregateInput
}

export type MiniQuizQuestionScalarWhereWithAggregatesInput = {
  AND?: Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput | Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput[]
  OR?: Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput | Prisma.MiniQuizQuestionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MiniQuizQuestion"> | string
  question?: Prisma.StringWithAggregatesFilter<"MiniQuizQuestion"> | string
  isTrue?: Prisma.BoolWithAggregatesFilter<"MiniQuizQuestion"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuizQuestion"> | Date | string
  quizId?: Prisma.StringWithAggregatesFilter<"MiniQuizQuestion"> | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MiniQuizQuestion"> | Date | string
}

export type MiniQuizQuestionCreateInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  updatedAt: Date | string
  MiniQuiz: Prisma.MiniQuizCreateNestedOneWithoutMiniQuizQuestionInput
}

export type MiniQuizQuestionUncheckedCreateInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  quizId: string
  updatedAt: Date | string
}

export type MiniQuizQuestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  MiniQuiz?: Prisma.MiniQuizUpdateOneRequiredWithoutMiniQuizQuestionNestedInput
}

export type MiniQuizQuestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizQuestionCreateManyInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  quizId: string
  updatedAt: Date | string
}

export type MiniQuizQuestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizQuestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizQuestionListRelationFilter = {
  every?: Prisma.MiniQuizQuestionWhereInput
  some?: Prisma.MiniQuizQuestionWhereInput
  none?: Prisma.MiniQuizQuestionWhereInput
}

export type MiniQuizQuestionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MiniQuizQuestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  question?: Prisma.SortOrder
  isTrue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizQuestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  question?: Prisma.SortOrder
  isTrue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizQuestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  question?: Prisma.SortOrder
  isTrue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MiniQuizQuestionCreateNestedManyWithoutMiniQuizInput = {
  create?: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput[] | Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizQuestionCreateManyMiniQuizInputEnvelope
  connect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
}

export type MiniQuizQuestionUncheckedCreateNestedManyWithoutMiniQuizInput = {
  create?: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput[] | Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizQuestionCreateManyMiniQuizInputEnvelope
  connect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
}

export type MiniQuizQuestionUpdateManyWithoutMiniQuizNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput[] | Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput[]
  upsert?: Prisma.MiniQuizQuestionUpsertWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpsertWithWhereUniqueWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizQuestionCreateManyMiniQuizInputEnvelope
  set?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  delete?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  connect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  update?: Prisma.MiniQuizQuestionUpdateWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpdateWithWhereUniqueWithoutMiniQuizInput[]
  updateMany?: Prisma.MiniQuizQuestionUpdateManyWithWhereWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpdateManyWithWhereWithoutMiniQuizInput[]
  deleteMany?: Prisma.MiniQuizQuestionScalarWhereInput | Prisma.MiniQuizQuestionScalarWhereInput[]
}

export type MiniQuizQuestionUncheckedUpdateManyWithoutMiniQuizNestedInput = {
  create?: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput> | Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput[] | Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput[]
  connectOrCreate?: Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput | Prisma.MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput[]
  upsert?: Prisma.MiniQuizQuestionUpsertWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpsertWithWhereUniqueWithoutMiniQuizInput[]
  createMany?: Prisma.MiniQuizQuestionCreateManyMiniQuizInputEnvelope
  set?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  disconnect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  delete?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  connect?: Prisma.MiniQuizQuestionWhereUniqueInput | Prisma.MiniQuizQuestionWhereUniqueInput[]
  update?: Prisma.MiniQuizQuestionUpdateWithWhereUniqueWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpdateWithWhereUniqueWithoutMiniQuizInput[]
  updateMany?: Prisma.MiniQuizQuestionUpdateManyWithWhereWithoutMiniQuizInput | Prisma.MiniQuizQuestionUpdateManyWithWhereWithoutMiniQuizInput[]
  deleteMany?: Prisma.MiniQuizQuestionScalarWhereInput | Prisma.MiniQuizQuestionScalarWhereInput[]
}

export type MiniQuizQuestionCreateWithoutMiniQuizInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizQuestionCreateOrConnectWithoutMiniQuizInput = {
  where: Prisma.MiniQuizQuestionWhereUniqueInput
  create: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput>
}

export type MiniQuizQuestionCreateManyMiniQuizInputEnvelope = {
  data: Prisma.MiniQuizQuestionCreateManyMiniQuizInput | Prisma.MiniQuizQuestionCreateManyMiniQuizInput[]
  skipDuplicates?: boolean
}

export type MiniQuizQuestionUpsertWithWhereUniqueWithoutMiniQuizInput = {
  where: Prisma.MiniQuizQuestionWhereUniqueInput
  update: Prisma.XOR<Prisma.MiniQuizQuestionUpdateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedUpdateWithoutMiniQuizInput>
  create: Prisma.XOR<Prisma.MiniQuizQuestionCreateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedCreateWithoutMiniQuizInput>
}

export type MiniQuizQuestionUpdateWithWhereUniqueWithoutMiniQuizInput = {
  where: Prisma.MiniQuizQuestionWhereUniqueInput
  data: Prisma.XOR<Prisma.MiniQuizQuestionUpdateWithoutMiniQuizInput, Prisma.MiniQuizQuestionUncheckedUpdateWithoutMiniQuizInput>
}

export type MiniQuizQuestionUpdateManyWithWhereWithoutMiniQuizInput = {
  where: Prisma.MiniQuizQuestionScalarWhereInput
  data: Prisma.XOR<Prisma.MiniQuizQuestionUpdateManyMutationInput, Prisma.MiniQuizQuestionUncheckedUpdateManyWithoutMiniQuizInput>
}

export type MiniQuizQuestionScalarWhereInput = {
  AND?: Prisma.MiniQuizQuestionScalarWhereInput | Prisma.MiniQuizQuestionScalarWhereInput[]
  OR?: Prisma.MiniQuizQuestionScalarWhereInput[]
  NOT?: Prisma.MiniQuizQuestionScalarWhereInput | Prisma.MiniQuizQuestionScalarWhereInput[]
  id?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  question?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  isTrue?: Prisma.BoolFilter<"MiniQuizQuestion"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
  quizId?: Prisma.StringFilter<"MiniQuizQuestion"> | string
  updatedAt?: Prisma.DateTimeFilter<"MiniQuizQuestion"> | Date | string
}

export type MiniQuizQuestionCreateManyMiniQuizInput = {
  id: string
  question: string
  isTrue: boolean
  createdAt?: Date | string
  updatedAt: Date | string
}

export type MiniQuizQuestionUpdateWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizQuestionUncheckedUpdateWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MiniQuizQuestionUncheckedUpdateManyWithoutMiniQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  isTrue?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MiniQuizQuestionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  question?: boolean
  isTrue?: boolean
  createdAt?: boolean
  quizId?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizQuestion"]>

export type MiniQuizQuestionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  question?: boolean
  isTrue?: boolean
  createdAt?: boolean
  quizId?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizQuestion"]>

export type MiniQuizQuestionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  question?: boolean
  isTrue?: boolean
  createdAt?: boolean
  quizId?: boolean
  updatedAt?: boolean
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["miniQuizQuestion"]>

export type MiniQuizQuestionSelectScalar = {
  id?: boolean
  question?: boolean
  isTrue?: boolean
  createdAt?: boolean
  quizId?: boolean
  updatedAt?: boolean
}

export type MiniQuizQuestionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "question" | "isTrue" | "createdAt" | "quizId" | "updatedAt", ExtArgs["result"]["miniQuizQuestion"]>
export type MiniQuizQuestionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}
export type MiniQuizQuestionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}
export type MiniQuizQuestionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MiniQuiz?: boolean | Prisma.MiniQuizDefaultArgs<ExtArgs>
}

export type $MiniQuizQuestionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MiniQuizQuestion"
  objects: {
    MiniQuiz: Prisma.$MiniQuizPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    question: string
    isTrue: boolean
    createdAt: Date
    quizId: string
    updatedAt: Date
  }, ExtArgs["result"]["miniQuizQuestion"]>
  composites: {}
}

export type MiniQuizQuestionGetPayload<S extends boolean | null | undefined | MiniQuizQuestionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload, S>

export type MiniQuizQuestionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MiniQuizQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MiniQuizQuestionCountAggregateInputType | true
  }

export interface MiniQuizQuestionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MiniQuizQuestion'], meta: { name: 'MiniQuizQuestion' } }
  /**
   * Find zero or one MiniQuizQuestion that matches the filter.
   * @param {MiniQuizQuestionFindUniqueArgs} args - Arguments to find a MiniQuizQuestion
   * @example
   * // Get one MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MiniQuizQuestionFindUniqueArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MiniQuizQuestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MiniQuizQuestionFindUniqueOrThrowArgs} args - Arguments to find a MiniQuizQuestion
   * @example
   * // Get one MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MiniQuizQuestionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuizQuestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionFindFirstArgs} args - Arguments to find a MiniQuizQuestion
   * @example
   * // Get one MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MiniQuizQuestionFindFirstArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionFindFirstArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MiniQuizQuestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionFindFirstOrThrowArgs} args - Arguments to find a MiniQuizQuestion
   * @example
   * // Get one MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MiniQuizQuestionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MiniQuizQuestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MiniQuizQuestions
   * const miniQuizQuestions = await prisma.miniQuizQuestion.findMany()
   * 
   * // Get first 10 MiniQuizQuestions
   * const miniQuizQuestions = await prisma.miniQuizQuestion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const miniQuizQuestionWithIdOnly = await prisma.miniQuizQuestion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MiniQuizQuestionFindManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MiniQuizQuestion.
   * @param {MiniQuizQuestionCreateArgs} args - Arguments to create a MiniQuizQuestion.
   * @example
   * // Create one MiniQuizQuestion
   * const MiniQuizQuestion = await prisma.miniQuizQuestion.create({
   *   data: {
   *     // ... data to create a MiniQuizQuestion
   *   }
   * })
   * 
   */
  create<T extends MiniQuizQuestionCreateArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionCreateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MiniQuizQuestions.
   * @param {MiniQuizQuestionCreateManyArgs} args - Arguments to create many MiniQuizQuestions.
   * @example
   * // Create many MiniQuizQuestions
   * const miniQuizQuestion = await prisma.miniQuizQuestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MiniQuizQuestionCreateManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MiniQuizQuestions and returns the data saved in the database.
   * @param {MiniQuizQuestionCreateManyAndReturnArgs} args - Arguments to create many MiniQuizQuestions.
   * @example
   * // Create many MiniQuizQuestions
   * const miniQuizQuestion = await prisma.miniQuizQuestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MiniQuizQuestions and only return the `id`
   * const miniQuizQuestionWithIdOnly = await prisma.miniQuizQuestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MiniQuizQuestionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MiniQuizQuestion.
   * @param {MiniQuizQuestionDeleteArgs} args - Arguments to delete one MiniQuizQuestion.
   * @example
   * // Delete one MiniQuizQuestion
   * const MiniQuizQuestion = await prisma.miniQuizQuestion.delete({
   *   where: {
   *     // ... filter to delete one MiniQuizQuestion
   *   }
   * })
   * 
   */
  delete<T extends MiniQuizQuestionDeleteArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionDeleteArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MiniQuizQuestion.
   * @param {MiniQuizQuestionUpdateArgs} args - Arguments to update one MiniQuizQuestion.
   * @example
   * // Update one MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MiniQuizQuestionUpdateArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionUpdateArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MiniQuizQuestions.
   * @param {MiniQuizQuestionDeleteManyArgs} args - Arguments to filter MiniQuizQuestions to delete.
   * @example
   * // Delete a few MiniQuizQuestions
   * const { count } = await prisma.miniQuizQuestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MiniQuizQuestionDeleteManyArgs>(args?: Prisma.SelectSubset<T, MiniQuizQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MiniQuizQuestions
   * const miniQuizQuestion = await prisma.miniQuizQuestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MiniQuizQuestionUpdateManyArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MiniQuizQuestions and returns the data updated in the database.
   * @param {MiniQuizQuestionUpdateManyAndReturnArgs} args - Arguments to update many MiniQuizQuestions.
   * @example
   * // Update many MiniQuizQuestions
   * const miniQuizQuestion = await prisma.miniQuizQuestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MiniQuizQuestions and only return the `id`
   * const miniQuizQuestionWithIdOnly = await prisma.miniQuizQuestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MiniQuizQuestionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MiniQuizQuestion.
   * @param {MiniQuizQuestionUpsertArgs} args - Arguments to update or create a MiniQuizQuestion.
   * @example
   * // Update or create a MiniQuizQuestion
   * const miniQuizQuestion = await prisma.miniQuizQuestion.upsert({
   *   create: {
   *     // ... data to create a MiniQuizQuestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MiniQuizQuestion we want to update
   *   }
   * })
   */
  upsert<T extends MiniQuizQuestionUpsertArgs>(args: Prisma.SelectSubset<T, MiniQuizQuestionUpsertArgs<ExtArgs>>): Prisma.Prisma__MiniQuizQuestionClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MiniQuizQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionCountArgs} args - Arguments to filter MiniQuizQuestions to count.
   * @example
   * // Count the number of MiniQuizQuestions
   * const count = await prisma.miniQuizQuestion.count({
   *   where: {
   *     // ... the filter for the MiniQuizQuestions we want to count
   *   }
   * })
  **/
  count<T extends MiniQuizQuestionCountArgs>(
    args?: Prisma.Subset<T, MiniQuizQuestionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MiniQuizQuestionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MiniQuizQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MiniQuizQuestionAggregateArgs>(args: Prisma.Subset<T, MiniQuizQuestionAggregateArgs>): Prisma.PrismaPromise<GetMiniQuizQuestionAggregateType<T>>

  /**
   * Group by MiniQuizQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MiniQuizQuestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MiniQuizQuestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MiniQuizQuestionGroupByArgs['orderBy'] }
      : { orderBy?: MiniQuizQuestionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MiniQuizQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMiniQuizQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MiniQuizQuestion model
 */
readonly fields: MiniQuizQuestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MiniQuizQuestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MiniQuizQuestionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  MiniQuiz<T extends Prisma.MiniQuizDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MiniQuizDefaultArgs<ExtArgs>>): Prisma.Prisma__MiniQuizClient<runtime.Types.Result.GetResult<Prisma.$MiniQuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MiniQuizQuestion model
 */
export interface MiniQuizQuestionFieldRefs {
  readonly id: Prisma.FieldRef<"MiniQuizQuestion", 'String'>
  readonly question: Prisma.FieldRef<"MiniQuizQuestion", 'String'>
  readonly isTrue: Prisma.FieldRef<"MiniQuizQuestion", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"MiniQuizQuestion", 'DateTime'>
  readonly quizId: Prisma.FieldRef<"MiniQuizQuestion", 'String'>
  readonly updatedAt: Prisma.FieldRef<"MiniQuizQuestion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MiniQuizQuestion findUnique
 */
export type MiniQuizQuestionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizQuestion to fetch.
   */
  where: Prisma.MiniQuizQuestionWhereUniqueInput
}

/**
 * MiniQuizQuestion findUniqueOrThrow
 */
export type MiniQuizQuestionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizQuestion to fetch.
   */
  where: Prisma.MiniQuizQuestionWhereUniqueInput
}

/**
 * MiniQuizQuestion findFirst
 */
export type MiniQuizQuestionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizQuestion to fetch.
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizQuestions to fetch.
   */
  orderBy?: Prisma.MiniQuizQuestionOrderByWithRelationInput | Prisma.MiniQuizQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizQuestions.
   */
  cursor?: Prisma.MiniQuizQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizQuestions.
   */
  distinct?: Prisma.MiniQuizQuestionScalarFieldEnum | Prisma.MiniQuizQuestionScalarFieldEnum[]
}

/**
 * MiniQuizQuestion findFirstOrThrow
 */
export type MiniQuizQuestionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizQuestion to fetch.
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizQuestions to fetch.
   */
  orderBy?: Prisma.MiniQuizQuestionOrderByWithRelationInput | Prisma.MiniQuizQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MiniQuizQuestions.
   */
  cursor?: Prisma.MiniQuizQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MiniQuizQuestions.
   */
  distinct?: Prisma.MiniQuizQuestionScalarFieldEnum | Prisma.MiniQuizQuestionScalarFieldEnum[]
}

/**
 * MiniQuizQuestion findMany
 */
export type MiniQuizQuestionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter, which MiniQuizQuestions to fetch.
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MiniQuizQuestions to fetch.
   */
  orderBy?: Prisma.MiniQuizQuestionOrderByWithRelationInput | Prisma.MiniQuizQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MiniQuizQuestions.
   */
  cursor?: Prisma.MiniQuizQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MiniQuizQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MiniQuizQuestions.
   */
  skip?: number
  distinct?: Prisma.MiniQuizQuestionScalarFieldEnum | Prisma.MiniQuizQuestionScalarFieldEnum[]
}

/**
 * MiniQuizQuestion create
 */
export type MiniQuizQuestionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * The data needed to create a MiniQuizQuestion.
   */
  data: Prisma.XOR<Prisma.MiniQuizQuestionCreateInput, Prisma.MiniQuizQuestionUncheckedCreateInput>
}

/**
 * MiniQuizQuestion createMany
 */
export type MiniQuizQuestionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MiniQuizQuestions.
   */
  data: Prisma.MiniQuizQuestionCreateManyInput | Prisma.MiniQuizQuestionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MiniQuizQuestion createManyAndReturn
 */
export type MiniQuizQuestionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * The data used to create many MiniQuizQuestions.
   */
  data: Prisma.MiniQuizQuestionCreateManyInput | Prisma.MiniQuizQuestionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MiniQuizQuestion update
 */
export type MiniQuizQuestionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * The data needed to update a MiniQuizQuestion.
   */
  data: Prisma.XOR<Prisma.MiniQuizQuestionUpdateInput, Prisma.MiniQuizQuestionUncheckedUpdateInput>
  /**
   * Choose, which MiniQuizQuestion to update.
   */
  where: Prisma.MiniQuizQuestionWhereUniqueInput
}

/**
 * MiniQuizQuestion updateMany
 */
export type MiniQuizQuestionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MiniQuizQuestions.
   */
  data: Prisma.XOR<Prisma.MiniQuizQuestionUpdateManyMutationInput, Prisma.MiniQuizQuestionUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizQuestions to update
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * Limit how many MiniQuizQuestions to update.
   */
  limit?: number
}

/**
 * MiniQuizQuestion updateManyAndReturn
 */
export type MiniQuizQuestionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * The data used to update MiniQuizQuestions.
   */
  data: Prisma.XOR<Prisma.MiniQuizQuestionUpdateManyMutationInput, Prisma.MiniQuizQuestionUncheckedUpdateManyInput>
  /**
   * Filter which MiniQuizQuestions to update
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * Limit how many MiniQuizQuestions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MiniQuizQuestion upsert
 */
export type MiniQuizQuestionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * The filter to search for the MiniQuizQuestion to update in case it exists.
   */
  where: Prisma.MiniQuizQuestionWhereUniqueInput
  /**
   * In case the MiniQuizQuestion found by the `where` argument doesn't exist, create a new MiniQuizQuestion with this data.
   */
  create: Prisma.XOR<Prisma.MiniQuizQuestionCreateInput, Prisma.MiniQuizQuestionUncheckedCreateInput>
  /**
   * In case the MiniQuizQuestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MiniQuizQuestionUpdateInput, Prisma.MiniQuizQuestionUncheckedUpdateInput>
}

/**
 * MiniQuizQuestion delete
 */
export type MiniQuizQuestionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
  /**
   * Filter which MiniQuizQuestion to delete.
   */
  where: Prisma.MiniQuizQuestionWhereUniqueInput
}

/**
 * MiniQuizQuestion deleteMany
 */
export type MiniQuizQuestionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MiniQuizQuestions to delete
   */
  where?: Prisma.MiniQuizQuestionWhereInput
  /**
   * Limit how many MiniQuizQuestions to delete.
   */
  limit?: number
}

/**
 * MiniQuizQuestion without action
 */
export type MiniQuizQuestionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MiniQuizQuestion
   */
  select?: Prisma.MiniQuizQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MiniQuizQuestion
   */
  omit?: Prisma.MiniQuizQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MiniQuizQuestionInclude<ExtArgs> | null
}
