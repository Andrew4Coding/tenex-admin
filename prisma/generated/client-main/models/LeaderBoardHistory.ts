
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LeaderBoardHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LeaderBoardHistory
 * 
 */
export type LeaderBoardHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$LeaderBoardHistoryPayload>

export type AggregateLeaderBoardHistory = {
  _count: LeaderBoardHistoryCountAggregateOutputType | null
  _min: LeaderBoardHistoryMinAggregateOutputType | null
  _max: LeaderBoardHistoryMaxAggregateOutputType | null
}

export type LeaderBoardHistoryMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LeaderBoardHistoryMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LeaderBoardHistoryCountAggregateOutputType = {
  id: number
  jsonData: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LeaderBoardHistoryMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type LeaderBoardHistoryMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type LeaderBoardHistoryCountAggregateInputType = {
  id?: true
  jsonData?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LeaderBoardHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeaderBoardHistory to aggregate.
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderBoardHistories to fetch.
   */
  orderBy?: Prisma.LeaderBoardHistoryOrderByWithRelationInput | Prisma.LeaderBoardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LeaderBoardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderBoardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderBoardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LeaderBoardHistories
  **/
  _count?: true | LeaderBoardHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaderBoardHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaderBoardHistoryMaxAggregateInputType
}

export type GetLeaderBoardHistoryAggregateType<T extends LeaderBoardHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateLeaderBoardHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeaderBoardHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateLeaderBoardHistory[P]>
}




export type LeaderBoardHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeaderBoardHistoryWhereInput
  orderBy?: Prisma.LeaderBoardHistoryOrderByWithAggregationInput | Prisma.LeaderBoardHistoryOrderByWithAggregationInput[]
  by: Prisma.LeaderBoardHistoryScalarFieldEnum[] | Prisma.LeaderBoardHistoryScalarFieldEnum
  having?: Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaderBoardHistoryCountAggregateInputType | true
  _min?: LeaderBoardHistoryMinAggregateInputType
  _max?: LeaderBoardHistoryMaxAggregateInputType
}

export type LeaderBoardHistoryGroupByOutputType = {
  id: string
  jsonData: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: LeaderBoardHistoryCountAggregateOutputType | null
  _min: LeaderBoardHistoryMinAggregateOutputType | null
  _max: LeaderBoardHistoryMaxAggregateOutputType | null
}

type GetLeaderBoardHistoryGroupByPayload<T extends LeaderBoardHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaderBoardHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaderBoardHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaderBoardHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaderBoardHistoryGroupByOutputType[P]>
      }
    >
  > 



export type LeaderBoardHistoryWhereInput = {
  AND?: Prisma.LeaderBoardHistoryWhereInput | Prisma.LeaderBoardHistoryWhereInput[]
  OR?: Prisma.LeaderBoardHistoryWhereInput[]
  NOT?: Prisma.LeaderBoardHistoryWhereInput | Prisma.LeaderBoardHistoryWhereInput[]
  id?: Prisma.StringFilter<"LeaderBoardHistory"> | string
  jsonData?: Prisma.JsonFilter<"LeaderBoardHistory">
  createdAt?: Prisma.DateTimeFilter<"LeaderBoardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LeaderBoardHistory"> | Date | string
}

export type LeaderBoardHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jsonData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LeaderBoardHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LeaderBoardHistoryWhereInput | Prisma.LeaderBoardHistoryWhereInput[]
  OR?: Prisma.LeaderBoardHistoryWhereInput[]
  NOT?: Prisma.LeaderBoardHistoryWhereInput | Prisma.LeaderBoardHistoryWhereInput[]
  jsonData?: Prisma.JsonFilter<"LeaderBoardHistory">
  createdAt?: Prisma.DateTimeFilter<"LeaderBoardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LeaderBoardHistory"> | Date | string
}, "id">

export type LeaderBoardHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jsonData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LeaderBoardHistoryCountOrderByAggregateInput
  _max?: Prisma.LeaderBoardHistoryMaxOrderByAggregateInput
  _min?: Prisma.LeaderBoardHistoryMinOrderByAggregateInput
}

export type LeaderBoardHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput | Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput | Prisma.LeaderBoardHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LeaderBoardHistory"> | string
  jsonData?: Prisma.JsonWithAggregatesFilter<"LeaderBoardHistory">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LeaderBoardHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LeaderBoardHistory"> | Date | string
}

export type LeaderBoardHistoryCreateInput = {
  id: string
  jsonData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type LeaderBoardHistoryUncheckedCreateInput = {
  id: string
  jsonData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type LeaderBoardHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jsonData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderBoardHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jsonData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderBoardHistoryCreateManyInput = {
  id: string
  jsonData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt: Date | string
}

export type LeaderBoardHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jsonData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderBoardHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jsonData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderBoardHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jsonData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LeaderBoardHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LeaderBoardHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type LeaderBoardHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jsonData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["leaderBoardHistory"]>

export type LeaderBoardHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jsonData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["leaderBoardHistory"]>

export type LeaderBoardHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jsonData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["leaderBoardHistory"]>

export type LeaderBoardHistorySelectScalar = {
  id?: boolean
  jsonData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LeaderBoardHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jsonData" | "createdAt" | "updatedAt", ExtArgs["result"]["leaderBoardHistory"]>

export type $LeaderBoardHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LeaderBoardHistory"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jsonData: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["leaderBoardHistory"]>
  composites: {}
}

export type LeaderBoardHistoryGetPayload<S extends boolean | null | undefined | LeaderBoardHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload, S>

export type LeaderBoardHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LeaderBoardHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaderBoardHistoryCountAggregateInputType | true
  }

export interface LeaderBoardHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaderBoardHistory'], meta: { name: 'LeaderBoardHistory' } }
  /**
   * Find zero or one LeaderBoardHistory that matches the filter.
   * @param {LeaderBoardHistoryFindUniqueArgs} args - Arguments to find a LeaderBoardHistory
   * @example
   * // Get one LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LeaderBoardHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LeaderBoardHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LeaderBoardHistoryFindUniqueOrThrowArgs} args - Arguments to find a LeaderBoardHistory
   * @example
   * // Get one LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LeaderBoardHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeaderBoardHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryFindFirstArgs} args - Arguments to find a LeaderBoardHistory
   * @example
   * // Get one LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LeaderBoardHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeaderBoardHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryFindFirstOrThrowArgs} args - Arguments to find a LeaderBoardHistory
   * @example
   * // Get one LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LeaderBoardHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LeaderBoardHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LeaderBoardHistories
   * const leaderBoardHistories = await prisma.leaderBoardHistory.findMany()
   * 
   * // Get first 10 LeaderBoardHistories
   * const leaderBoardHistories = await prisma.leaderBoardHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const leaderBoardHistoryWithIdOnly = await prisma.leaderBoardHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LeaderBoardHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LeaderBoardHistory.
   * @param {LeaderBoardHistoryCreateArgs} args - Arguments to create a LeaderBoardHistory.
   * @example
   * // Create one LeaderBoardHistory
   * const LeaderBoardHistory = await prisma.leaderBoardHistory.create({
   *   data: {
   *     // ... data to create a LeaderBoardHistory
   *   }
   * })
   * 
   */
  create<T extends LeaderBoardHistoryCreateArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LeaderBoardHistories.
   * @param {LeaderBoardHistoryCreateManyArgs} args - Arguments to create many LeaderBoardHistories.
   * @example
   * // Create many LeaderBoardHistories
   * const leaderBoardHistory = await prisma.leaderBoardHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LeaderBoardHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LeaderBoardHistories and returns the data saved in the database.
   * @param {LeaderBoardHistoryCreateManyAndReturnArgs} args - Arguments to create many LeaderBoardHistories.
   * @example
   * // Create many LeaderBoardHistories
   * const leaderBoardHistory = await prisma.leaderBoardHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LeaderBoardHistories and only return the `id`
   * const leaderBoardHistoryWithIdOnly = await prisma.leaderBoardHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LeaderBoardHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LeaderBoardHistory.
   * @param {LeaderBoardHistoryDeleteArgs} args - Arguments to delete one LeaderBoardHistory.
   * @example
   * // Delete one LeaderBoardHistory
   * const LeaderBoardHistory = await prisma.leaderBoardHistory.delete({
   *   where: {
   *     // ... filter to delete one LeaderBoardHistory
   *   }
   * })
   * 
   */
  delete<T extends LeaderBoardHistoryDeleteArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LeaderBoardHistory.
   * @param {LeaderBoardHistoryUpdateArgs} args - Arguments to update one LeaderBoardHistory.
   * @example
   * // Update one LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LeaderBoardHistoryUpdateArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LeaderBoardHistories.
   * @param {LeaderBoardHistoryDeleteManyArgs} args - Arguments to filter LeaderBoardHistories to delete.
   * @example
   * // Delete a few LeaderBoardHistories
   * const { count } = await prisma.leaderBoardHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LeaderBoardHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, LeaderBoardHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeaderBoardHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LeaderBoardHistories
   * const leaderBoardHistory = await prisma.leaderBoardHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LeaderBoardHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeaderBoardHistories and returns the data updated in the database.
   * @param {LeaderBoardHistoryUpdateManyAndReturnArgs} args - Arguments to update many LeaderBoardHistories.
   * @example
   * // Update many LeaderBoardHistories
   * const leaderBoardHistory = await prisma.leaderBoardHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LeaderBoardHistories and only return the `id`
   * const leaderBoardHistoryWithIdOnly = await prisma.leaderBoardHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LeaderBoardHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LeaderBoardHistory.
   * @param {LeaderBoardHistoryUpsertArgs} args - Arguments to update or create a LeaderBoardHistory.
   * @example
   * // Update or create a LeaderBoardHistory
   * const leaderBoardHistory = await prisma.leaderBoardHistory.upsert({
   *   create: {
   *     // ... data to create a LeaderBoardHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LeaderBoardHistory we want to update
   *   }
   * })
   */
  upsert<T extends LeaderBoardHistoryUpsertArgs>(args: Prisma.SelectSubset<T, LeaderBoardHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__LeaderBoardHistoryClient<runtime.Types.Result.GetResult<Prisma.$LeaderBoardHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LeaderBoardHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryCountArgs} args - Arguments to filter LeaderBoardHistories to count.
   * @example
   * // Count the number of LeaderBoardHistories
   * const count = await prisma.leaderBoardHistory.count({
   *   where: {
   *     // ... the filter for the LeaderBoardHistories we want to count
   *   }
   * })
  **/
  count<T extends LeaderBoardHistoryCountArgs>(
    args?: Prisma.Subset<T, LeaderBoardHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaderBoardHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LeaderBoardHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaderBoardHistoryAggregateArgs>(args: Prisma.Subset<T, LeaderBoardHistoryAggregateArgs>): Prisma.PrismaPromise<GetLeaderBoardHistoryAggregateType<T>>

  /**
   * Group by LeaderBoardHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderBoardHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LeaderBoardHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LeaderBoardHistoryGroupByArgs['orderBy'] }
      : { orderBy?: LeaderBoardHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LeaderBoardHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaderBoardHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LeaderBoardHistory model
 */
readonly fields: LeaderBoardHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LeaderBoardHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LeaderBoardHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LeaderBoardHistory model
 */
export interface LeaderBoardHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"LeaderBoardHistory", 'String'>
  readonly jsonData: Prisma.FieldRef<"LeaderBoardHistory", 'Json'>
  readonly createdAt: Prisma.FieldRef<"LeaderBoardHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"LeaderBoardHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LeaderBoardHistory findUnique
 */
export type LeaderBoardHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter, which LeaderBoardHistory to fetch.
   */
  where: Prisma.LeaderBoardHistoryWhereUniqueInput
}

/**
 * LeaderBoardHistory findUniqueOrThrow
 */
export type LeaderBoardHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter, which LeaderBoardHistory to fetch.
   */
  where: Prisma.LeaderBoardHistoryWhereUniqueInput
}

/**
 * LeaderBoardHistory findFirst
 */
export type LeaderBoardHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter, which LeaderBoardHistory to fetch.
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderBoardHistories to fetch.
   */
  orderBy?: Prisma.LeaderBoardHistoryOrderByWithRelationInput | Prisma.LeaderBoardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeaderBoardHistories.
   */
  cursor?: Prisma.LeaderBoardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderBoardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderBoardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeaderBoardHistories.
   */
  distinct?: Prisma.LeaderBoardHistoryScalarFieldEnum | Prisma.LeaderBoardHistoryScalarFieldEnum[]
}

/**
 * LeaderBoardHistory findFirstOrThrow
 */
export type LeaderBoardHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter, which LeaderBoardHistory to fetch.
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderBoardHistories to fetch.
   */
  orderBy?: Prisma.LeaderBoardHistoryOrderByWithRelationInput | Prisma.LeaderBoardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeaderBoardHistories.
   */
  cursor?: Prisma.LeaderBoardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderBoardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderBoardHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeaderBoardHistories.
   */
  distinct?: Prisma.LeaderBoardHistoryScalarFieldEnum | Prisma.LeaderBoardHistoryScalarFieldEnum[]
}

/**
 * LeaderBoardHistory findMany
 */
export type LeaderBoardHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter, which LeaderBoardHistories to fetch.
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderBoardHistories to fetch.
   */
  orderBy?: Prisma.LeaderBoardHistoryOrderByWithRelationInput | Prisma.LeaderBoardHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LeaderBoardHistories.
   */
  cursor?: Prisma.LeaderBoardHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderBoardHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderBoardHistories.
   */
  skip?: number
  distinct?: Prisma.LeaderBoardHistoryScalarFieldEnum | Prisma.LeaderBoardHistoryScalarFieldEnum[]
}

/**
 * LeaderBoardHistory create
 */
export type LeaderBoardHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * The data needed to create a LeaderBoardHistory.
   */
  data: Prisma.XOR<Prisma.LeaderBoardHistoryCreateInput, Prisma.LeaderBoardHistoryUncheckedCreateInput>
}

/**
 * LeaderBoardHistory createMany
 */
export type LeaderBoardHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LeaderBoardHistories.
   */
  data: Prisma.LeaderBoardHistoryCreateManyInput | Prisma.LeaderBoardHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LeaderBoardHistory createManyAndReturn
 */
export type LeaderBoardHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many LeaderBoardHistories.
   */
  data: Prisma.LeaderBoardHistoryCreateManyInput | Prisma.LeaderBoardHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LeaderBoardHistory update
 */
export type LeaderBoardHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * The data needed to update a LeaderBoardHistory.
   */
  data: Prisma.XOR<Prisma.LeaderBoardHistoryUpdateInput, Prisma.LeaderBoardHistoryUncheckedUpdateInput>
  /**
   * Choose, which LeaderBoardHistory to update.
   */
  where: Prisma.LeaderBoardHistoryWhereUniqueInput
}

/**
 * LeaderBoardHistory updateMany
 */
export type LeaderBoardHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LeaderBoardHistories.
   */
  data: Prisma.XOR<Prisma.LeaderBoardHistoryUpdateManyMutationInput, Prisma.LeaderBoardHistoryUncheckedUpdateManyInput>
  /**
   * Filter which LeaderBoardHistories to update
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * Limit how many LeaderBoardHistories to update.
   */
  limit?: number
}

/**
 * LeaderBoardHistory updateManyAndReturn
 */
export type LeaderBoardHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * The data used to update LeaderBoardHistories.
   */
  data: Prisma.XOR<Prisma.LeaderBoardHistoryUpdateManyMutationInput, Prisma.LeaderBoardHistoryUncheckedUpdateManyInput>
  /**
   * Filter which LeaderBoardHistories to update
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * Limit how many LeaderBoardHistories to update.
   */
  limit?: number
}

/**
 * LeaderBoardHistory upsert
 */
export type LeaderBoardHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * The filter to search for the LeaderBoardHistory to update in case it exists.
   */
  where: Prisma.LeaderBoardHistoryWhereUniqueInput
  /**
   * In case the LeaderBoardHistory found by the `where` argument doesn't exist, create a new LeaderBoardHistory with this data.
   */
  create: Prisma.XOR<Prisma.LeaderBoardHistoryCreateInput, Prisma.LeaderBoardHistoryUncheckedCreateInput>
  /**
   * In case the LeaderBoardHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LeaderBoardHistoryUpdateInput, Prisma.LeaderBoardHistoryUncheckedUpdateInput>
}

/**
 * LeaderBoardHistory delete
 */
export type LeaderBoardHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
  /**
   * Filter which LeaderBoardHistory to delete.
   */
  where: Prisma.LeaderBoardHistoryWhereUniqueInput
}

/**
 * LeaderBoardHistory deleteMany
 */
export type LeaderBoardHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeaderBoardHistories to delete
   */
  where?: Prisma.LeaderBoardHistoryWhereInput
  /**
   * Limit how many LeaderBoardHistories to delete.
   */
  limit?: number
}

/**
 * LeaderBoardHistory without action
 */
export type LeaderBoardHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderBoardHistory
   */
  select?: Prisma.LeaderBoardHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderBoardHistory
   */
  omit?: Prisma.LeaderBoardHistoryOmit<ExtArgs> | null
}
